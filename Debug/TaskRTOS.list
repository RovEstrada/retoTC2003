
TaskRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a484  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  0800a598  0800a598  0001a598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b410  0800b410  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b410  0800b410  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b410  0800b410  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b414  0800b414  0001b414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a6c  200001e8  0800b600  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c54  0800b600  00022c54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c7a  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003490  00000000  00000000  00031ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4a  00000000  00000000  000364f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa27  00000000  00000000  0003723a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a7b  00000000  00000000  00051c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093bd4  00000000  00000000  000656dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059cc  00000000  00000000  000f92b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000fec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a57c 	.word	0x0800a57c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a57c 	.word	0x0800a57c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b092      	sub	sp, #72	; 0x48
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d8e:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9c:	f7ff fe18 	bl	80009d0 <__aeabi_dcmple>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d020      	beq.n	8000de8 <look2_binlxpw+0x64>
    iLeft = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8000daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000db4:	f7ff f9d8 	bl	8000168 <__aeabi_dsub>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4614      	mov	r4, r2
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff f9cb 	bl	8000168 <__aeabi_dsub>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fca7 	bl	800072c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000de6:	e08e      	b.n	8000f06 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8000de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000df0:	4413      	add	r3, r2
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f7ff fddf 	bl	80009bc <__aeabi_dcmplt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d04d      	beq.n	8000ea0 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8000e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	085b      	lsrs	r3, r3, #1
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 8000e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8000e16:	e016      	b.n	8000e46 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 8000e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e1e:	4413      	add	r3, r2
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e28:	f7ff fdc8 	bl	80009bc <__aeabi_dcmplt>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 8000e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e36:	e001      	b.n	8000e3c <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	4413      	add	r3, r2
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8000e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d8e3      	bhi.n	8000e18 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e56:	4413      	add	r3, r2
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e60:	f7ff f982 	bl	8000168 <__aeabi_dsub>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4614      	mov	r4, r2
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	3301      	adds	r3, #1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e74:	4413      	add	r3, r2
 8000e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e80:	4413      	add	r3, r2
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff f96f 	bl	8000168 <__aeabi_dsub>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4620      	mov	r0, r4
 8000e90:	4629      	mov	r1, r5
 8000e92:	f7ff fc4b 	bl	800072c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000e9e:	e032      	b.n	8000f06 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8000ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8000ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000eb6:	4413      	add	r3, r2
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ec0:	f7ff f952 	bl	8000168 <__aeabi_dsub>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4614      	mov	r4, r2
 8000eca:	461d      	mov	r5, r3
 8000ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ed4:	4413      	add	r3, r2
 8000ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee8:	4413      	add	r3, r2
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff f93b 	bl	8000168 <__aeabi_dsub>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	4629      	mov	r1, r5
 8000efa:	f7ff fc17 	bl	800072c <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 8000f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 8000f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f1c:	f7ff fd58 	bl	80009d0 <__aeabi_dcmple>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d020      	beq.n	8000f68 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8000f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f34:	f7ff f918 	bl	8000168 <__aeabi_dsub>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f42:	3308      	adds	r3, #8
 8000f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff f90b 	bl	8000168 <__aeabi_dsub>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff fbe7 	bl	800072c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000f66:	e095      	b.n	8001094 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8000f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f72:	4413      	add	r3, r2
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f7c:	f7ff fd1e 	bl	80009bc <__aeabi_dcmplt>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d04f      	beq.n	8001026 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	3304      	adds	r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8000f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8000f9c:	e016      	b.n	8000fcc <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fa4:	4413      	add	r3, r2
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fae:	f7ff fd05 	bl	80009bc <__aeabi_dcmplt>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8000fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fbc:	e001      	b.n	8000fc2 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 8000fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	4413      	add	r3, r2
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8000fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d8e3      	bhi.n	8000f9e <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fdc:	4413      	add	r3, r2
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe6:	f7ff f8bf 	bl	8000168 <__aeabi_dsub>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4614      	mov	r4, r2
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001006:	4413      	add	r3, r2
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff f8ac 	bl	8000168 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fb88 	bl	800072c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001024:	e036      	b.n	8001094 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	3304      	adds	r3, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 8001030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800103a:	3b01      	subs	r3, #1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001040:	4413      	add	r3, r2
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104a:	f7ff f88d 	bl	8000168 <__aeabi_dsub>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4614      	mov	r4, r2
 8001054:	461d      	mov	r5, r3
 8001056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001060:	4413      	add	r3, r2
 8001062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001068:	3304      	adds	r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001070:	3b01      	subs	r3, #1
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001076:	4413      	add	r3, r2
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fb50 	bl	800072c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001098:	fb03 f202 	mul.w	r2, r3, r2
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	4413      	add	r3, r2
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 80010a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a4:	3301      	adds	r3, #1
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010aa:	4413      	add	r3, r2
 80010ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b6:	4413      	add	r3, r2
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010cc:	f7ff fa04 	bl	80004d8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f842 	bl	800016c <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80010f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010f4:	4413      	add	r3, r2
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	3301      	adds	r3, #1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001100:	4413      	add	r3, r2
 8001102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800110c:	4413      	add	r3, r2
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f829 	bl	8000168 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001122:	f7ff f9d9 	bl	80004d8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001134:	4413      	add	r3, r2
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f817 	bl	800016c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800114a:	f7ff f80d 	bl	8000168 <__aeabi_dsub>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800115a:	f7ff f9bd 	bl	80004d8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800116a:	f7fe ffff 	bl	800016c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
}
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	3748      	adds	r7, #72	; 0x48
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}

0800117c <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001194:	f7ff fc1c 	bl	80009d0 <__aeabi_dcmple>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d020      	beq.n	80011e0 <look1_binlxpw+0x64>
    iLeft = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4614      	mov	r4, r2
 80011b6:	461d      	mov	r5, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3308      	adds	r3, #8
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7fe ffcf 	bl	8000168 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff faab 	bl	800072c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011de:	e087      	b.n	80012f0 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80011e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f0:	f7ff fbe4 	bl	80009bc <__aeabi_dcmplt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d04b      	beq.n	8001292 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80011fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 8001204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001206:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 8001208:	e016      	b.n	8001238 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121a:	f7ff fbcf 	bl	80009bc <__aeabi_dcmplt>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <look1_binlxpw+0xae>
        iRght = bpIdx;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e001      	b.n	800122e <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4413      	add	r3, r2
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d8e3      	bhi.n	800120a <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001252:	f7fe ff89 	bl	8000168 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3301      	adds	r3, #1
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7fe ff76 	bl	8000168 <__aeabi_dsub>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff fa52 	bl	800072c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001290:	e02e      	b.n	80012f0 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001294:	3b01      	subs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800129e:	3b01      	subs	r3, #1
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ae:	f7fe ff5b 	bl	8000168 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80012cc:	3b01      	subs	r3, #1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7fe ff46 	bl	8000168 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7ff fa22 	bl	800072c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	3301      	adds	r3, #1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7fe ff2d 	bl	8000168 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800131a:	f7ff f8dd 	bl	80004d8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7fe ff1b 	bl	800016c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
}
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bdb0      	pop	{r4, r5, r7, pc}

08001344 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <EngTrModel_gear_state+0xf8>)
 800134e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001352:	3b01      	subs	r3, #1
 8001354:	2b03      	cmp	r3, #3
 8001356:	d86c      	bhi.n	8001432 <EngTrModel_gear_state+0xee>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <EngTrModel_gear_state+0x1c>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001391 	.word	0x08001391
 8001368:	080013af 	.word	0x080013af
 800136c:	080013e9 	.word	0x080013e9
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d155      	bne.n	8001424 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <EngTrModel_gear_state+0xf8>)
 800137a:	2203      	movs	r2, #3
 800137c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001380:	492f      	ldr	r1, [pc, #188]	; (8001440 <EngTrModel_gear_state+0xfc>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800138e:	e049      	b.n	8001424 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d147      	bne.n	8001428 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <EngTrModel_gear_state+0xf8>)
 800139a:	2204      	movs	r2, #4
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 80013a0:	4927      	ldr	r1, [pc, #156]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <EngTrModel_gear_state+0x100>)
 80013a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 80013ac:	e03c      	b.n	8001428 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <EngTrModel_gear_state+0x8c>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d138      	bne.n	800142c <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013bc:	2204      	movs	r2, #4
 80013be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 80013c2:	491f      	ldr	r1, [pc, #124]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <EngTrModel_gear_state+0x100>)
 80013ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80013ce:	e00a      	b.n	80013e6 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 80013d8:	4919      	ldr	r1, [pc, #100]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <EngTrModel_gear_state+0x104>)
 80013e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80013e4:	bf00      	nop
    }
    break;
 80013e6:	e021      	b.n	800142c <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <EngTrModel_gear_state+0xc6>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11d      	bne.n	8001430 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80013fc:	4910      	ldr	r1, [pc, #64]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <EngTrModel_gear_state+0x108>)
 8001404:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001408:	e00b      	b.n	8001422 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <EngTrModel_gear_state+0xf8>)
 800140c:	2203      	movs	r2, #3
 800140e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001412:	490b      	ldr	r1, [pc, #44]	; (8001440 <EngTrModel_gear_state+0xfc>)
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001420:	bf00      	nop
    }
    break;
 8001422:	e005      	b.n	8001430 <EngTrModel_gear_state+0xec>
    break;
 8001424:	bf00      	nop
 8001426:	e004      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 8001428:	bf00      	nop
 800142a:	e002      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 8001430:	bf00      	nop
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000238 	.word	0x20000238
 8001440:	20000208 	.word	0x20000208
 8001444:	40080000 	.word	0x40080000
 8001448:	3ff00000 	.word	0x3ff00000
 800144c:	40100000 	.word	0x40100000

08001450 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800145a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800145e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001462:	f001 fe57 	bl	8003114 <rtIsNaN>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <rt_powd_snf+0x2a>
 800146c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001470:	f001 fe50 	bl	8003114 <rtIsNaN>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <rt_powd_snf+0x36>
    y = (rtNaN);
 800147a:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <rt_powd_snf+0x224>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001484:	e0ef      	b.n	8001666 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001496:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 800149a:	68bc      	ldr	r4, [r7, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80014a2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 80014a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014aa:	f001 fe0f 	bl	80030cc <rtIsInf>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d049      	beq.n	8001548 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <rt_powd_snf+0x228>)
 80014ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014be:	f7ff fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <rt_powd_snf+0x84>
        y = 1.0;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <rt_powd_snf+0x228>)
 80014ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80014d2:	e0c8      	b.n	8001666 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b67      	ldr	r3, [pc, #412]	; (8001678 <rt_powd_snf+0x228>)
 80014da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014de:	f7ff fa8b 	bl	80009f8 <__aeabi_dcmpgt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f4:	f7ff fa80 	bl	80009f8 <__aeabi_dcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <rt_powd_snf+0xba>
          y = (rtInf);
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <rt_powd_snf+0x22c>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001508:	e0ad      	b.n	8001666 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001516:	e0a6      	b.n	8001666 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001524:	f7ff fa68 	bl	80009f8 <__aeabi_dcmpgt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <rt_powd_snf+0xec>
        y = 0.0;
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800153a:	e094      	b.n	8001666 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <rt_powd_snf+0x22c>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001546:	e08e      	b.n	8001666 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001554:	f7ff fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <rt_powd_snf+0x11a>
      y = 1.0;
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <rt_powd_snf+0x228>)
 8001564:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001568:	e07d      	b.n	8001666 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <rt_powd_snf+0x228>)
 8001570:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001574:	f7ff fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01b      	beq.n	80015b6 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800158a:	f7ff fa35 	bl	80009f8 <__aeabi_dcmpgt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <rt_powd_snf+0x14e>
        y = u0;
 8001594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001598:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800159c:	e063      	b.n	8001666 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800159e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015a2:	f04f 0000 	mov.w	r0, #0
 80015a6:	4934      	ldr	r1, [pc, #208]	; (8001678 <rt_powd_snf+0x228>)
 80015a8:	f7ff f8c0 	bl	800072c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015b4:	e057      	b.n	8001666 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c2:	f7ff f9f1 	bl	80009a8 <__aeabi_dcmpeq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <rt_powd_snf+0x192>
      y = u0 * u0;
 80015cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	f7fe ff80 	bl	80004d8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015e0:	e041      	b.n	8001666 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <rt_powd_snf+0x230>)
 80015e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ec:	f7ff f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d011      	beq.n	800161a <rt_powd_snf+0x1ca>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001602:	f7ff f9ef 	bl	80009e4 <__aeabi_dcmpge>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 800160c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001610:	f008 f86e 	bl	80096f0 <sqrt>
 8001614:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001618:	e025      	b.n	8001666 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001626:	f7ff f9c9 	bl	80009bc <__aeabi_dcmplt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <rt_powd_snf+0x206>
 8001630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001634:	f008 f960 	bl	80098f8 <floor>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001640:	f7ff f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <rt_powd_snf+0x206>
      y = (rtNaN);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <rt_powd_snf+0x224>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001654:	e007      	b.n	8001666 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800165a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165e:	f007 ffdf 	bl	8009620 <pow>
 8001662:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	3730      	adds	r7, #48	; 0x30
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	20000558 	.word	0x20000558
 8001678:	3ff00000 	.word	0x3ff00000
 800167c:	20000548 	.word	0x20000548
 8001680:	3fe00000 	.word	0x3fe00000
 8001684:	00000000 	.word	0x00000000

08001688 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 800168e:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <EngTrModel_step+0x238>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	498b      	ldr	r1, [pc, #556]	; (80018c4 <EngTrModel_step+0x23c>)
 8001696:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <EngTrModel_step+0x23c>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	4989      	ldr	r1, [pc, #548]	; (80018c8 <EngTrModel_step+0x240>)
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80016a6:	4b86      	ldr	r3, [pc, #536]	; (80018c0 <EngTrModel_step+0x238>)
 80016a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80016ac:	a380      	add	r3, pc, #512	; (adr r3, 80018b0 <EngTrModel_step+0x228>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ff11 	bl	80004d8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80016be:	a37e      	add	r3, pc, #504	; (adr r3, 80018b8 <EngTrModel_step+0x230>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff08 	bl	80004d8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80016cc:	497d      	ldr	r1, [pc, #500]	; (80018c4 <EngTrModel_step+0x23c>)
 80016ce:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <EngTrModel_step+0x238>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d004      	beq.n	80016ec <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <EngTrModel_step+0x238>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <EngTrModel_step+0x238>)
 80016ea:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80016ec:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <EngTrModel_step+0x238>)
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80016f6:	4b72      	ldr	r3, [pc, #456]	; (80018c0 <EngTrModel_step+0x238>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <EngTrModel_step+0x238>)
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <EngTrModel_step+0x238>)
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 800170e:	496d      	ldr	r1, [pc, #436]	; (80018c4 <EngTrModel_step+0x23c>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <EngTrModel_step+0x244>)
 8001716:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <EngTrModel_step+0x238>)
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <EngTrModel_step+0x238>)
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800172a:	e0e4      	b.n	80018f6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <EngTrModel_step+0x238>)
 800172e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe03 	bl	8001344 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 800173e:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <EngTrModel_step+0x238>)
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80d6 	beq.w	80018f6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 800174a:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <EngTrModel_step+0x248>)
 800174c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001750:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <EngTrModel_step+0x23c>)
 8001752:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001756:	2406      	movs	r4, #6
 8001758:	9404      	str	r4, [sp, #16]
 800175a:	4c5e      	ldr	r4, [pc, #376]	; (80018d4 <EngTrModel_step+0x24c>)
 800175c:	9403      	str	r4, [sp, #12]
 800175e:	4c5e      	ldr	r4, [pc, #376]	; (80018d8 <EngTrModel_step+0x250>)
 8001760:	9402      	str	r4, [sp, #8]
 8001762:	4c5e      	ldr	r4, [pc, #376]	; (80018dc <EngTrModel_step+0x254>)
 8001764:	9401      	str	r4, [sp, #4]
 8001766:	4c5e      	ldr	r4, [pc, #376]	; (80018e0 <EngTrModel_step+0x258>)
 8001768:	9400      	str	r4, [sp, #0]
 800176a:	f7ff fb0b 	bl	8000d84 <look2_binlxpw>
 800176e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <EngTrModel_step+0x248>)
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <EngTrModel_step+0x23c>)
 800177a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800177e:	2406      	movs	r4, #6
 8001780:	9404      	str	r4, [sp, #16]
 8001782:	4c54      	ldr	r4, [pc, #336]	; (80018d4 <EngTrModel_step+0x24c>)
 8001784:	9403      	str	r4, [sp, #12]
 8001786:	4c57      	ldr	r4, [pc, #348]	; (80018e4 <EngTrModel_step+0x25c>)
 8001788:	9402      	str	r4, [sp, #8]
 800178a:	4c54      	ldr	r4, [pc, #336]	; (80018dc <EngTrModel_step+0x254>)
 800178c:	9401      	str	r4, [sp, #4]
 800178e:	4c56      	ldr	r4, [pc, #344]	; (80018e8 <EngTrModel_step+0x260>)
 8001790:	9400      	str	r4, [sp, #0]
 8001792:	f7ff faf7 	bl	8000d84 <look2_binlxpw>
 8001796:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 800179a:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <EngTrModel_step+0x238>)
 800179c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d05a      	beq.n	800185a <EngTrModel_step+0x1d2>
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	f300 80a6 	bgt.w	80018f6 <EngTrModel_step+0x26e>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d002      	beq.n	80017b4 <EngTrModel_step+0x12c>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d02e      	beq.n	8001810 <EngTrModel_step+0x188>
 80017b2:	e0a0      	b.n	80018f6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <EngTrModel_step+0x238>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d919      	bls.n	80017f0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <EngTrModel_step+0x23c>)
 80017be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 80017c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c6:	f7ff f90d 	bl	80009e4 <__aeabi_dcmpge>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00f      	beq.n	80017f0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <EngTrModel_step+0x238>)
 80017d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdaf 	bl	8001344 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <EngTrModel_step+0x238>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 80017ee:	e082      	b.n	80018f6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <EngTrModel_step+0x23c>)
 80017f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fa:	f7ff f8df 	bl	80009bc <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <EngTrModel_step+0x17e>
        break;
 8001804:	e077      	b.n	80018f6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <EngTrModel_step+0x238>)
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 800180e:	e072      	b.n	80018f6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <EngTrModel_step+0x23c>)
 8001812:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800181a:	f7ff f8cf 	bl	80009bc <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <EngTrModel_step+0x238>)
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <EngTrModel_step+0x238>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001832:	e060      	b.n	80018f6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <EngTrModel_step+0x23c>)
 8001836:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800183a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800183e:	f7ff f8db 	bl	80009f8 <__aeabi_dcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <EngTrModel_step+0x1c2>
        break;
 8001848:	e055      	b.n	80018f6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <EngTrModel_step+0x238>)
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <EngTrModel_step+0x238>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
        break;
 8001858:	e04d      	b.n	80018f6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <EngTrModel_step+0x238>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d919      	bls.n	8001896 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <EngTrModel_step+0x23c>)
 8001864:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186c:	f7ff f8b0 	bl	80009d0 <__aeabi_dcmple>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00f      	beq.n	8001896 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001876:	2301      	movs	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <EngTrModel_step+0x238>)
 800187c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fd5c 	bl	8001344 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <EngTrModel_step+0x238>)
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001894:	e02e      	b.n	80018f4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <EngTrModel_step+0x23c>)
 8001898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800189c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a0:	f7ff f8aa 	bl	80009f8 <__aeabi_dcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d120      	bne.n	80018ec <EngTrModel_step+0x264>
        break;
 80018aa:	e023      	b.n	80018f4 <EngTrModel_step+0x26c>
 80018ac:	f3af 8000 	nop.w
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	401921fb 	.word	0x401921fb
 80018b8:	745d1746 	.word	0x745d1746
 80018bc:	3f8745d1 	.word	0x3f8745d1
 80018c0:	20000238 	.word	0x20000238
 80018c4:	20000208 	.word	0x20000208
 80018c8:	20000270 	.word	0x20000270
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	20000260 	.word	0x20000260
 80018d4:	0800aff0 	.word	0x0800aff0
 80018d8:	0800a7c0 	.word	0x0800a7c0
 80018dc:	0800a8b0 	.word	0x0800a8b0
 80018e0:	0800a880 	.word	0x0800a880
 80018e4:	0800a8d0 	.word	0x0800a8d0
 80018e8:	0800a990 	.word	0x0800a990
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <EngTrModel_step+0x478>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 80018f4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <EngTrModel_step+0x47c>)
 80018f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018fc:	2303      	movs	r3, #3
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <EngTrModel_step+0x480>)
 8001902:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <EngTrModel_step+0x484>)
 8001904:	f7ff fc3a 	bl	800117c <look1_binlxpw>
 8001908:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 800190c:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <EngTrModel_step+0x478>)
 800190e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001912:	a375      	add	r3, pc, #468	; (adr r3, 8001ae8 <EngTrModel_step+0x460>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fdde 	bl	80004d8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4978      	ldr	r1, [pc, #480]	; (8001b04 <EngTrModel_step+0x47c>)
 8001922:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM > 0)
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <EngTrModel_step+0x47c>)
 8001928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f7ff f860 	bl	80009f8 <__aeabi_dcmpgt>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <EngTrModel_step+0x2e0>
	  InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <EngTrModel_step+0x47c>)
 8001940:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001944:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001948:	f7fe fdc6 	bl	80004d8 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <EngTrModel_step+0x47c>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fee7 	bl	800072c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001966:	e005      	b.n	8001974 <EngTrModel_step+0x2ec>
  else
	  InterpUp = 0.0;
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <EngTrModel_step+0x47c>)
 8001976:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 800197a:	2314      	movs	r3, #20
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <EngTrModel_step+0x488>)
 8001980:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <EngTrModel_step+0x48c>)
 8001982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001986:	f7ff fbf9 	bl	800117c <look1_binlxpw>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 800198e:	4620      	mov	r0, r4
 8001990:	4629      	mov	r1, r5
 8001992:	f7fe fecb 	bl	800072c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	f7ff fd53 	bl	8001450 <rt_powd_snf>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4955      	ldr	r1, [pc, #340]	; (8001b04 <EngTrModel_step+0x47c>)
 80019b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 80019b4:	2314      	movs	r3, #20
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <EngTrModel_step+0x490>)
 80019ba:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <EngTrModel_step+0x48c>)
 80019bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c0:	f7ff fbdc 	bl	800117c <look1_binlxpw>
 80019c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <EngTrModel_step+0x47c>)
 80019ca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	f7fe fd81 	bl	80004d8 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e2:	f7fe fd79 	bl	80004d8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4946      	ldr	r1, [pc, #280]	; (8001b04 <EngTrModel_step+0x47c>)
 80019ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <EngTrModel_step+0x47c>)
 80019f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019f6:	4949      	ldr	r1, [pc, #292]	; (8001b1c <EngTrModel_step+0x494>)
 80019f8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <EngTrModel_step+0x47c>)
 80019fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a02:	4946      	ldr	r1, [pc, #280]	; (8001b1c <EngTrModel_step+0x494>)
 8001a04:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <EngTrModel_step+0x498>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	240a      	movs	r4, #10
 8001a16:	9404      	str	r4, [sp, #16]
 8001a18:	4c42      	ldr	r4, [pc, #264]	; (8001b24 <EngTrModel_step+0x49c>)
 8001a1a:	9403      	str	r4, [sp, #12]
 8001a1c:	4c42      	ldr	r4, [pc, #264]	; (8001b28 <EngTrModel_step+0x4a0>)
 8001a1e:	9402      	str	r4, [sp, #8]
 8001a20:	4c42      	ldr	r4, [pc, #264]	; (8001b2c <EngTrModel_step+0x4a4>)
 8001a22:	9401      	str	r4, [sp, #4]
 8001a24:	4c42      	ldr	r4, [pc, #264]	; (8001b30 <EngTrModel_step+0x4a8>)
 8001a26:	9400      	str	r4, [sp, #0]
 8001a28:	f7ff f9ac 	bl	8000d84 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a32:	f7fe fb99 	bl	8000168 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001a3e:	a32c      	add	r3, pc, #176	; (adr r3, 8001af0 <EngTrModel_step+0x468>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fd48 	bl	80004d8 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	a329      	add	r3, pc, #164	; (adr r3, 8001af8 <EngTrModel_step+0x470>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fd3f 	bl	80004d8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <EngTrModel_step+0x478>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fb80 	bl	800016c <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4923      	ldr	r1, [pc, #140]	; (8001b00 <EngTrModel_step+0x478>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	f7fe ff9a 	bl	80009bc <__aeabi_dcmplt>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <EngTrModel_step+0x4ac>)
 8001a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a98:	e055      	b.n	8001b46 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f7fe ffa6 	bl	80009f8 <__aeabi_dcmpgt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <EngTrModel_step+0x4b0>)
 8001ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001abc:	e043      	b.n	8001b46 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <EngTrModel_step+0x47c>)
 8001ac0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f7fe ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d032      	beq.n	8001b3c <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ae2:	e030      	b.n	8001b46 <EngTrModel_step+0x4be>
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	3d70a3d7 	.word	0x3d70a3d7
 8001aec:	4009d70a 	.word	0x4009d70a
 8001af0:	0865b653 	.word	0x0865b653
 8001af4:	4046bc6f 	.word	0x4046bc6f
 8001af8:	47ae147b 	.word	0x47ae147b
 8001afc:	3fa47ae1 	.word	0x3fa47ae1
 8001b00:	20000238 	.word	0x20000238
 8001b04:	20000208 	.word	0x20000208
 8001b08:	0800add8 	.word	0x0800add8
 8001b0c:	0800a8b0 	.word	0x0800a8b0
 8001b10:	0800adf8 	.word	0x0800adf8
 8001b14:	0800aea0 	.word	0x0800aea0
 8001b18:	0800af48 	.word	0x0800af48
 8001b1c:	20000270 	.word	0x20000270
 8001b20:	20000260 	.word	0x20000260
 8001b24:	0800aff8 	.word	0x0800aff8
 8001b28:	0800a9c0 	.word	0x0800a9c0
 8001b2c:	0800ad80 	.word	0x0800ad80
 8001b30:	0800ad30 	.word	0x0800ad30
 8001b34:	bff00000 	.word	0xbff00000
 8001b38:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <EngTrModel_step+0x5a0>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <EngTrModel_step+0x5a4>)
 8001b48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b4c:	a32e      	add	r3, pc, #184	; (adr r3, 8001c08 <EngTrModel_step+0x580>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fcc1 	bl	80004d8 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <EngTrModel_step+0x5a4>)
 8001b60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b6c:	f7ff fc70 	bl	8001450 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001b70:	a327      	add	r3, pc, #156	; (adr r3, 8001c10 <EngTrModel_step+0x588>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fcaf 	bl	80004d8 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <EngTrModel_step+0x5a8>)
 8001b88:	f7fe faf0 	bl	800016c <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <EngTrModel_step+0x5ac>)
 8001b96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b9a:	f7fe fae7 	bl	800016c <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001baa:	f7fe fc95 	bl	80004d8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe fad7 	bl	8000168 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001bc2:	a315      	add	r3, pc, #84	; (adr r3, 8001c18 <EngTrModel_step+0x590>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fc86 	bl	80004d8 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	a312      	add	r3, pc, #72	; (adr r3, 8001c20 <EngTrModel_step+0x598>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fc7d 	bl	80004d8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <EngTrModel_step+0x5b0>)
 8001be8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bec:	f7fe fabe 	bl	800016c <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4910      	ldr	r1, [pc, #64]	; (8001c38 <EngTrModel_step+0x5b0>)
 8001bf6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	3d70a3d7 	.word	0x3d70a3d7
 8001c0c:	4009d70a 	.word	0x4009d70a
 8001c10:	47ae147b 	.word	0x47ae147b
 8001c14:	3f947ae1 	.word	0x3f947ae1
 8001c18:	b3bfa695 	.word	0xb3bfa695
 8001c1c:	3fb52ad1 	.word	0x3fb52ad1
 8001c20:	47ae147b 	.word	0x47ae147b
 8001c24:	3fa47ae1 	.word	0x3fa47ae1
 8001c28:	20000558 	.word	0x20000558
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	40440000 	.word	0x40440000
 8001c34:	20000260 	.word	0x20000260
 8001c38:	20000238 	.word	0x20000238

08001c3c <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001c40:	2008      	movs	r0, #8
 8001c42:	f001 fa0b 	bl	800305c <rt_InitInfAndNaN>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <vApplicationGetIdleTaskMemory+0x28>)
 8001c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000288 	.word	0x20000288
 8001c78:	20000328 	.word	0x20000328

08001c7c <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
	char const *p;
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <LCD_Init+0x160>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <LCD_Init+0x160>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6193      	str	r3, [r2, #24]
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */

	 // Conexión recomendada de los pines:                                           *
	 // RS->PC6, RW->PC7, EN->PC8, D4->PC9, D5->PC10, D6->PC11, D7->PC12
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <LCD_Init+0x164>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a53      	ldr	r2, [pc, #332]	; (8001de0 <LCD_Init+0x164>)
 8001c94:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001c98:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <LCD_Init+0x164>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a50      	ldr	r2, [pc, #320]	; (8001de0 <LCD_Init+0x164>)
 8001ca0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001ca4:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF7;
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <LCD_Init+0x164>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <LCD_Init+0x164>)
 8001cac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001cb0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE7;
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <LCD_Init+0x164>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <LCD_Init+0x164>)
 8001cb8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <LCD_Init+0x164>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <LCD_Init+0x164>)
 8001cc4:	f023 030c 	bic.w	r3, r3, #12
 8001cc8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <LCD_Init+0x164>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a44      	ldr	r2, [pc, #272]	; (8001de0 <LCD_Init+0x164>)
 8001cd0:	f043 0303 	orr.w	r3, r3, #3
 8001cd4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <LCD_Init+0x164>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <LCD_Init+0x164>)
 8001cdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ce0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <LCD_Init+0x164>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a3e      	ldr	r2, [pc, #248]	; (8001de0 <LCD_Init+0x164>)
 8001ce8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cec:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF10;
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <LCD_Init+0x164>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <LCD_Init+0x164>)
 8001cf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cf8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE10;
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <LCD_Init+0x164>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <LCD_Init+0x164>)
 8001d00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d04:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF11;
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <LCD_Init+0x164>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <LCD_Init+0x164>)
 8001d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d10:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE11;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <LCD_Init+0x164>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <LCD_Init+0x164>)
 8001d18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d1c:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF12;
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <LCD_Init+0x164>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <LCD_Init+0x164>)
 8001d24:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d28:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE12;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <LCD_Init+0x164>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <LCD_Init+0x164>)
 8001d30:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001d34:	6053      	str	r3, [r2, #4]
  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <LCD_Init+0x164>)
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <LCD_Init+0x168>)
 8001d3a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8001d3c:	200f      	movs	r0, #15
 8001d3e:	f001 fc3d 	bl	80035bc <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <LCD_Init+0x164>)
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <LCD_Init+0x168>)
 8001d46:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d48:	f000 f9d0 	bl	80020ec <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8001d4c:	2005      	movs	r0, #5
 8001d4e:	f001 fc35 	bl	80035bc <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <LCD_Init+0x164>)
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <LCD_Init+0x168>)
 8001d56:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d58:	f000 f9c8 	bl	80020ec <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f001 fc2d 	bl	80035bc <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <LCD_Init+0x164>)
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <LCD_Init+0x168>)
 8001d66:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d68:	f000 f9c0 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8001d6c:	bf00      	nop
 8001d6e:	f000 f973 	bl	8002058 <LCD_Busy>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1fa      	bne.n	8001d6e <LCD_Init+0xf2>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <LCD_Init+0x164>)
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <LCD_Init+0x16c>)
 8001d7c:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d7e:	f000 f9b5 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8001d82:	bf00      	nop
 8001d84:	f000 f968 	bl	8002058 <LCD_Busy>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1fa      	bne.n	8001d84 <LCD_Init+0x108>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8001d8e:	2028      	movs	r0, #40	; 0x28
 8001d90:	f000 f894 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8001d94:	200c      	movs	r0, #12
 8001d96:	f000 f891 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8001d9a:	2006      	movs	r0, #6
 8001d9c:	f000 f88e 	bl	8001ebc <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8001da0:	2040      	movs	r0, #64	; 0x40
 8001da2:	f000 f88b 	bl	8001ebc <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <LCD_Init+0x170>)
 8001da8:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	e00a      	b.n	8001dc6 <LCD_Init+0x14a>
		LCD_Put_Char( *p );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f895 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dca:	d9f1      	bls.n	8001db0 <LCD_Init+0x134>

	LCD_Write_Cmd( 0x80 );
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	f000 f875 	bl	8001ebc <LCD_Write_Cmd>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40011000 	.word	0x40011000
 8001de4:	18000600 	.word	0x18000600
 8001de8:	1a000400 	.word	0x1a000400
 8001dec:	0800b000 	.word	0x0800b000

08001df0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	e003      	b.n	8001e16 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	e003      	b.n	8001e32 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e30:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	e003      	b.n	8001e4e <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e4c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5e:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8001e60:	e003      	b.n	8001e6a <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e68:	611a      	str	r2, [r3, #16]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40011000 	.word	0x40011000

08001e78 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffb1 	bl	8001df0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001e8e:	f000 f92d 	bl	80020ec <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ffa8 	bl	8001df0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001ea0:	f000 f924 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8001ea4:	bf00      	nop
 8001ea6:	f000 f8d7 	bl	8002058 <LCD_Busy>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1fa      	bne.n	8001ea6 <LCD_Write_Byte+0x2e>
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <LCD_Write_Cmd+0x24>)
 8001ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ecc:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ffd1 	bl	8001e78 <LCD_Write_Byte>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40011000 	.word	0x40011000

08001ee4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <LCD_Put_Char+0x20>)
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffbe 	bl	8001e78 <LCD_Write_Byte>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40011000 	.word	0x40011000

08001f08 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <LCD_Set_Cursor+0x1c>
		column--;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <LCD_Set_Cursor+0x28>
		line--;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	461a      	mov	r2, r3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	4413      	add	r3, r2
 8001f40:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b80      	subs	r3, #128	; 0x80
 8001f4c:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ffb3 	bl	8001ebc <LCD_Write_Cmd>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e009      	b.n	8001f80 <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ffb5 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	dc05      	bgt.n	8001f92 <LCD_Put_Str+0x34>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ec      	bne.n	8001f6c <LCD_Put_Str+0xe>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
void LCD_Put_Num(int num){
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	int p;
	int f = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
	char ch[ 5 ];

	for( int i = 0; i < 5; i++ ){
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e04d      	b.n	8002048 <LCD_Put_Num+0xae>
		p = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1c3 0304 	rsb	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e008      	b.n	8001fcc <LCD_Put_Num+0x32>
			p = p * 10;
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dcf3      	bgt.n	8001fba <LCD_Put_Num+0x20>
		ch[ i ] = ( num / p );
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
		if( num >= p && !f )
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	db04      	blt.n	8001ffa <LCD_Put_Num+0x60>
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <LCD_Put_Num+0x60>
			f = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
		num = num - ch[ i ] * p;
 8001ffa:	f107 0208 	add.w	r2, r7, #8
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	4413      	add	r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	607b      	str	r3, [r7, #4]
		ch[ i ] = ch[ i ] + 48;
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3330      	adds	r3, #48	; 0x30
 800201e:	b2d9      	uxtb	r1, r3
 8002020:	f107 0208 	add.w	r2, r7, #8
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
		if( f )
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <LCD_Put_Num+0xa8>
			LCD_Put_Char( ch[ i ] );
 8002032:	f107 0208 	add.w	r2, r7, #8
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff51 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < 5; i++ ){
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b04      	cmp	r3, #4
 800204c:	ddae      	ble.n	8001fac <LCD_Put_Num+0x12>
	}
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * input floating                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF12_1;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <LCD_Busy+0x8c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <LCD_Busy+0x8c>)
 8002062:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002066:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_MODE12;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <LCD_Busy+0x8c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <LCD_Busy+0x8c>)
 800206e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002072:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF12_0;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <LCD_Busy+0x8c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <LCD_Busy+0x8c>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6053      	str	r3, [r2, #4]
  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <LCD_Busy+0x8c>)
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <LCD_Busy+0x90>)
 8002084:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 8002086:	2001      	movs	r0, #1
 8002088:	f001 fa98 	bl	80035bc <HAL_Delay>

  /* ***************************************************** */
  if((GPIOC->IDR & (1U << 12)) != 0 ){//		       if D7 is set, then
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <LCD_Busy+0x8c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d011      	beq.n	80020bc <LCD_Busy+0x64>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <LCD_Busy+0x8c>)
 800209a:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 800209e:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <LCD_Busy+0x8c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <LCD_Busy+0x8c>)
 80020a6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020aa:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <LCD_Busy+0x8c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <LCD_Busy+0x8c>)
 80020b2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80020b6:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <LCD_Busy+0x86>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <LCD_Busy+0x8c>)
 80020be:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80020c2:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <LCD_Busy+0x8c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <LCD_Busy+0x8c>)
 80020ca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020ce:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <LCD_Busy+0x8c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <LCD_Busy+0x8c>)
 80020d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80020da:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 80020dc:	2300      	movs	r3, #0
	}
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40011000 	.word	0x40011000
 80020e8:	00400180 	.word	0x00400180

080020ec <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LCD_Pulse_EN+0x20>)
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 80020f8:	2001      	movs	r0, #1
 80020fa:	f001 fa5f 	bl	80035bc <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <LCD_Pulse_EN+0x20>)
 8002100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002104:	611a      	str	r2, [r3, #16]
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40011000 	.word	0x40011000

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b0c2      	sub	sp, #264	; 0x108
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002116:	f001 fa1f 	bl	8003558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211a:	f000 f8eb 	bl	80022f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211e:	f000 f92b 	bl	8002378 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8002122:	f000 f963 	bl	80023ec <USER_RCC_Init>
  USER_GPIO_Init();
 8002126:	f000 f98d 	bl	8002444 <USER_GPIO_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(msgQueue, 4, uint32_t);
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <main+0x1a8>)
 800212c:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8002130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 8002136:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fa46 	bl	80045ce <osMessageCreate>
 8002142:	4603      	mov	r3, r0
 8002144:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <main+0x1ac>)
 8002146:	6013      	str	r3, [r2, #0]

  osMessageQDef(speedQueue, 4, uint32_t);
 8002148:	4b5b      	ldr	r3, [pc, #364]	; (80022b8 <main+0x1a8>)
 800214a:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 800214e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(speedQueue), NULL);
 8002154:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fa37 	bl	80045ce <osMessageCreate>
 8002160:	4603      	mov	r3, r0
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <main+0x1ac>)
 8002164:	6013      	str	r3, [r2, #0]

  osMessageQDef(engineQueue, 4, uint32_t);
 8002166:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <main+0x1a8>)
 8002168:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800216c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(engineQueue), NULL);
 8002172:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fa28 	bl	80045ce <osMessageCreate>
 800217e:	4603      	mov	r3, r0
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <main+0x1ac>)
 8002182:	6013      	str	r3, [r2, #0]

  osMessageQDef(gearQueue, 4, uint32_t);
 8002184:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <main+0x1a8>)
 8002186:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800218a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(gearQueue), NULL);
 8002190:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fa19 	bl	80045ce <osMessageCreate>
 800219c:	4603      	mov	r3, r0
 800219e:	4a47      	ldr	r2, [pc, #284]	; (80022bc <main+0x1ac>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <main+0x1b0>)
 80021a4:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80021a8:	461d      	mov	r5, r3
 80021aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 f9a6 	bl	800450e <osThreadCreate>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a3f      	ldr	r2, [pc, #252]	; (80022c4 <main+0x1b4>)
 80021c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(MatricialTask, readMatricial, osPriorityNormal, 0, 128*2);
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <main+0x1b8>)
 80021ca:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80021ce:	461d      	mov	r5, r3
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadMatricialHandle = osThreadCreate(osThread(MatricialTask), NULL);
 80021dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 f993 	bl	800450e <osThreadCreate>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a38      	ldr	r2, [pc, #224]	; (80022cc <main+0x1bc>)
 80021ec:	6013      	str	r3, [r2, #0]
//
  osThreadDef(ADCTask, readADC, osPriorityNormal, 0, 512);
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <main+0x1c0>)
 80021f0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80021f4:	461d      	mov	r5, r3
 80021f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadADCHandle = osThreadCreate(osThread(ADCTask), NULL);
 8002202:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f002 f980 	bl	800450e <osThreadCreate>
 800220e:	4603      	mov	r3, r0
 8002210:	4a30      	ldr	r2, [pc, #192]	; (80022d4 <main+0x1c4>)
 8002212:	6013      	str	r3, [r2, #0]
//
  osThreadDef(readStateTask, readState, osPriorityNormal, 0, 256);
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <main+0x1c8>)
 8002216:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800221a:	461d      	mov	r5, r3
 800221c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002220:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002224:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadStateHandle = osThreadCreate(osThread(readStateTask), NULL);
 8002228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f002 f96d 	bl	800450e <osThreadCreate>
 8002234:	4603      	mov	r3, r0
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <main+0x1cc>)
 8002238:	6013      	str	r3, [r2, #0]

  osThreadDef(readControlTask, readControl, osPriorityNormal, 0, 256);
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <main+0x1d0>)
 800223c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002240:	461d      	mov	r5, r3
 8002242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002246:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800224a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadStateHandle = osThreadCreate(osThread(readControlTask), NULL);
 800224e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f002 f95a 	bl	800450e <osThreadCreate>
 800225a:	4603      	mov	r3, r0
 800225c:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <main+0x1cc>)
 800225e:	6013      	str	r3, [r2, #0]

  osThreadDef(LCDTask, sendLCD, osPriorityNormal, 0, 512);
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <main+0x1d4>)
 8002262:	f107 0420 	add.w	r4, r7, #32
 8002266:	461d      	mov	r5, r3
 8002268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendLCDHandle = osThreadCreate(osThread(LCDTask), NULL);
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f002 f947 	bl	800450e <osThreadCreate>
 8002280:	4603      	mov	r3, r0
 8002282:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <main+0x1d8>)
 8002284:	6013      	str	r3, [r2, #0]

  osThreadDef(sendDataTask, sendData, osPriorityNormal, 0, 512);
 8002286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800228a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <main+0x1dc>)
 8002290:	461c      	mov	r4, r3
 8002292:	4615      	mov	r5, r2
 8002294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800229c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendDataHandle = osThreadCreate(osThread(sendDataTask), NULL);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 f932 	bl	800450e <osThreadCreate>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <main+0x1e0>)
 80022ae:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022b0:	f002 f926 	bl	8004500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <main+0x1a4>
 80022b6:	bf00      	nop
 80022b8:	0800a598 	.word	0x0800a598
 80022bc:	20000540 	.word	0x20000540
 80022c0:	0800a5b4 	.word	0x0800a5b4
 80022c4:	20000528 	.word	0x20000528
 80022c8:	0800a5e0 	.word	0x0800a5e0
 80022cc:	2000052c 	.word	0x2000052c
 80022d0:	0800a604 	.word	0x0800a604
 80022d4:	20000530 	.word	0x20000530
 80022d8:	0800a630 	.word	0x0800a630
 80022dc:	20000534 	.word	0x20000534
 80022e0:	0800a65c 	.word	0x0800a65c
 80022e4:	0800a680 	.word	0x0800a680
 80022e8:	20000538 	.word	0x20000538
 80022ec:	0800a6ac 	.word	0x0800a6ac
 80022f0:	2000053c 	.word	0x2000053c

080022f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b090      	sub	sp, #64	; 0x40
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	2228      	movs	r2, #40	; 0x28
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f005 fa88 	bl	8007818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800231a:	2301      	movs	r3, #1
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800231e:	2310      	movs	r3, #16
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002322:	2302      	movs	r3, #2
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800232a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800232e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	4618      	mov	r0, r3
 8002336:	f001 fa45 	bl	80037c4 <HAL_RCC_OscConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002340:	f000 fd4c 	bl	8002ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002344:	230f      	movs	r3, #15
 8002346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002348:	2302      	movs	r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fcb2 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800236a:	f000 fd37 	bl	8002ddc <Error_Handler>
  }
}
 800236e:	bf00      	nop
 8002370:	3740      	adds	r7, #64	; 0x40
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	6193      	str	r3, [r2, #24]
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_GPIO_Init+0x70>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <MX_GPIO_Init+0x70>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6193      	str	r3, [r2, #24]
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	6193      	str	r3, [r2, #24]
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6193      	str	r3, [r2, #24]
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

/* GENERAL FUNCTIONS */

void USER_RCC_Init(void){
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // I/O port A clock enable
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <USER_RCC_Init+0x54>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <USER_RCC_Init+0x54>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//		I/O port B clock enable
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <USER_RCC_Init+0x54>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <USER_RCC_Init+0x54>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <USER_RCC_Init+0x54>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <USER_RCC_Init+0x54>)
 800240e:	f043 0310 	orr.w	r3, r3, #16
 8002412:	6193      	str	r3, [r2, #24]
//  -------UART--------------
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <USER_RCC_Init+0x54>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <USER_RCC_Init+0x54>)
 800241a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241e:	6193      	str	r3, [r2, #24]
//  --------ADC--------------
  RCC->APB2ENR |=	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <USER_RCC_Init+0x54>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <USER_RCC_Init+0x54>)
 8002426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242a:	6193      	str	r3, [r2, #24]
  RCC->CFGR |=	 RCC_CFGR_ADCPRE;  //	ADC prescaler 1:8 for 8 MHz
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <USER_RCC_Init+0x54>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <USER_RCC_Init+0x54>)
 8002432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002436:	6053      	str	r3, [r2, #4]

}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000

08002444 <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	USER_GPIO_Init_UART();
 8002448:	f000 f806 	bl	8002458 <USER_GPIO_Init_UART>
	USER_GPIO_Init_Matricial();
 800244c:	f000 f854 	bl	80024f8 <USER_GPIO_Init_Matricial>
	USER_GPIO_Init_ADC();
 8002450:	f000 f8f2 	bl	8002638 <USER_GPIO_Init_ADC>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <USER_GPIO_Init_UART>:
void USER_GPIO_Init_UART(void){
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRH &= ~GPIO_CRH_CNF9;
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 8002462:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002466:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9;
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 800246e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002472:	6053      	str	r3, [r2, #4]

	// Pin PA10 (RX)
	GPIOA->CRH &= ~GPIO_CRH_CNF10;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 800247a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800247e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a03      	ldr	r2, [pc, #12]	; (8002494 <USER_GPIO_Init_UART+0x3c>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6053      	str	r3, [r2, #4]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40010800 	.word	0x40010800

08002498 <USER_USART1_Init>:

void USER_USART1_Init(void){
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  USART1->CR1 |= USART_CR1_UE; // USART enabled
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <USER_USART1_Init+0x5c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a6:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_M; // 1 start bit, 8 data bits
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b2:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_PCE; // Parity control disabled
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024be:	60d3      	str	r3, [r2, #12]
  USART1->CR2 &= ~USART_CR2_STOP; // 1 stop bit
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ca:	6113      	str	r3, [r2, #16]
  USART1->BRR = 0x22C; // 115200 bps 34.72
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024ce:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80024d2:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_TE; // Transmitter enabled
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;// receiver enabled
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <USER_USART1_Init+0x5c>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40013800 	.word	0x40013800

080024f8 <USER_GPIO_Init_Matricial>:

void USER_GPIO_Init_Matricial(void){
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	//PA5 -> 0, LD2 OFF
	GPIOA->BSRR = GPIO_BSRR_BR5;
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 80024fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002502:	611a      	str	r2, [r3, #16]
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a49      	ldr	r2, [pc, #292]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800250a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800250e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8002510:	4b47      	ldr	r3, [pc, #284]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a46      	ldr	r2, [pc, #280]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	6013      	str	r3, [r2, #0]

	//PA12 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE12 & ~GPIO_CRH_CNF12_0;
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a43      	ldr	r2, [pc, #268]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002522:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002526:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_1;
 8002528:	4b41      	ldr	r3, [pc, #260]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a40      	ldr	r2, [pc, #256]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800252e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002532:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR12;
 8002534:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800253a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800253e:	60d3      	str	r3, [r2, #12]
	//PA6 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE6 & ~GPIO_CRL_CNF6_0;
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800254a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a37      	ldr	r2, [pc, #220]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002556:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR6;
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	60d3      	str	r3, [r2, #12]
	//PA11 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE11 & ~GPIO_CRH_CNF11_0;
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800256a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800256e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR11;
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a2b      	ldr	r2, [pc, #172]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002586:	60d3      	str	r3, [r2, #12]
	//PA7 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE7 & ~GPIO_CRL_CNF7_0;
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800258e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002592:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;
 8002594:	4b26      	ldr	r3, [pc, #152]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 800259a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800259e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR7;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <USER_GPIO_Init_Matricial+0x138>)
 80025a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025aa:	60d3      	str	r3, [r2, #12]

	//PB3 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS3;
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025ae:	2208      	movs	r2, #8
 80025b0:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE3_1 & ~GPIO_CRL_CNF3;
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025bc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c8:	6013      	str	r3, [r2, #0]
	//PB4 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS4;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025cc:	2210      	movs	r2, #16
 80025ce:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE4_1 & ~GPIO_CRL_CNF4;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025d6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80025da:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE4_0;
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
	//PB5 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS5;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025ea:	2220      	movs	r2, #32
 80025ec:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE5_1 & ~GPIO_CRL_CNF5;
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025f4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80025f8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE5_0;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 8002600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002604:	6013      	str	r3, [r2, #0]
	//PB10 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BR10;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 8002608:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800260c:	611a      	str	r2, [r3, #16]
	GPIOB->CRH &= ~GPIO_CRH_MODE10_1 & ~GPIO_CRH_CNF10;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 8002614:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8002618:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE10_0;
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <USER_GPIO_Init_Matricial+0x13c>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6053      	str	r3, [r2, #4]
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40010800 	.word	0x40010800
 8002634:	40010c00 	.word	0x40010c00

08002638 <USER_GPIO_Init_ADC>:

void USER_GPIO_Init_ADC(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	//PA0 (ADC12_IN0) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a09      	ldr	r2, [pc, #36]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 8002642:	f023 030f 	bic.w	r3, r3, #15
 8002646:	6013      	str	r3, [r2, #0]
	//PA1 (TIM2_CH2) as alternate function push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1_1;
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 800264e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002652:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF1_1 | GPIO_CRL_MODE1_0;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <USER_GPIO_Init_ADC+0x30>)
 800265a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800265e:	6013      	str	r3, [r2, #0]
	//PA2 (ADC12_IN2) as analog
//	GPIOA->CRL	&	~GPIOIO_CRL_CNF2 & ~GPIO_CRL_MODE2;
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40010800 	.word	0x40010800

0800266c <USER_ADC_Init>:
}




void USER_ADC_Init(void){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <USER_ADC_Init+0x64>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <USER_ADC_Init+0x64>)
 8002676:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800267a:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <USER_ADC_Init+0x64>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <USER_ADC_Init+0x64>)
 8002682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002686:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <USER_ADC_Init+0x64>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <USER_ADC_Init+0x64>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <USER_ADC_Init+0x64>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <USER_ADC_Init+0x64>)
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <USER_ADC_Init+0x64>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <USER_ADC_Init+0x64>)
 80026a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026aa:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <USER_ADC_Init+0x64>)
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <USER_ADC_Init+0x64>)
 80026b2:	f023 031f 	bic.w	r3, r3, #31
 80026b6:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <USER_ADC_Init+0x64>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <USER_ADC_Init+0x64>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 80026c4:	2001      	movs	r0, #1
 80026c6:	f000 ff79 	bl	80035bc <HAL_Delay>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40012400 	.word	0x40012400

080026d4 <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <USER_ADC_Calibration+0x28>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <USER_ADC_Calibration+0x28>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 80026e4:	bf00      	nop
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <USER_ADC_Calibration+0x28>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f9      	bne.n	80026e6 <USER_ADC_Calibration+0x12>
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40012400 	.word	0x40012400

08002700 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 8002704:	bf00      	nop
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <USER_ADC_Read+0x20>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f9      	beq.n	8002706 <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 8002712:	4b03      	ldr	r3, [pc, #12]	; (8002720 <USER_ADC_Read+0x20>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	b29b      	uxth	r3, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40012400 	.word	0x40012400

08002724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 800272c:	2001      	movs	r0, #1
 800272e:	f001 ff3a 	bl	80045a6 <osDelay>
 8002732:	e7fb      	b.n	800272c <StartDefaultTask+0x8>

08002734 <readMatricial>:

/*
INPUT FUNCTIONS
 */

void readMatricial(void const * argument){
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t counter = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
	uint32_t temp;
	/* Infinite loop */
	USER_USART1_Init();
 8002740:	f7ff feaa 	bl	8002498 <USER_USART1_Init>

	printf("Tt\r\n");
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <readMatricial+0x24>)
 8002746:	f004 ff87 	bl	8007658 <puts>
	for(;;)
	{
	  barrido();
 800274a:	f000 f931 	bl	80029b0 <barrido>
	  osDelay(50);
 800274e:	2032      	movs	r0, #50	; 0x32
 8002750:	f001 ff29 	bl	80045a6 <osDelay>
	  barrido();
 8002754:	e7f9      	b.n	800274a <readMatricial+0x16>
 8002756:	bf00      	nop
 8002758:	0800a6c8 	.word	0x0800a6c8
 800275c:	00000000 	.word	0x00000000

08002760 <readADC>:
	}
	/* USER CODE END 5 */
}

void readADC(void const * argument){
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	 El dispositivo deberá recibir una señal analógica
	 de un potenciómetro para el acelerador.
	 */

	uint32_t msg;
	float dataADC = 0;
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
	float converted = 0;
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	613b      	str	r3, [r7, #16]

	USER_ADC_Init();
 8002774:	f7ff ff7a 	bl	800266c <USER_ADC_Init>
	USER_ADC_Calibration();
 8002778:	f7ff ffac 	bl	80026d4 <USER_ADC_Calibration>
	ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <readADC+0xb0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <readADC+0xb0>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6093      	str	r3, [r2, #8]

	  /* Infinite loop */
	for(;;)
	{
	  dataADC = USER_ADC_Read();
 8002788:	f7ff ffba 	bl	8002700 <USER_ADC_Read>
 800278c:	4603      	mov	r3, r0
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe faa0 	bl	8000cd4 <__aeabi_ui2f>
 8002794:	4603      	mov	r3, r0
 8002796:	617b      	str	r3, [r7, #20]
	  converted = 100*(dataADC/((pow(2,12)-1)));
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f7fd fe45 	bl	8000428 <__aeabi_f2d>
 800279e:	a31a      	add	r3, pc, #104	; (adr r3, 8002808 <readADC+0xa8>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f7fd ffc2 	bl	800072c <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <readADC+0xb4>)
 80027b6:	f7fd fe8f 	bl	80004d8 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fe f981 	bl	8000ac8 <__aeabi_d2f>
 80027c6:	4603      	mov	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]
	  msg = (uint32_t)floor(converted);
 80027ca:	6938      	ldr	r0, [r7, #16]
 80027cc:	f7fd fe2c 	bl	8000428 <__aeabi_f2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f007 f88e 	bl	80098f8 <floor>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f950 	bl	8000a88 <__aeabi_d2uiz>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
//	  EngTrModel_U.Throttle = msg;	//Actualizamos la velocidad del acelerador
//	  EngTrModel_U.BrakeTorque = 0.0; //Paramos de frenar
	  osMessagePut(msgQueueHandle, msg, 0);
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <readADC+0xb8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 ff13 	bl	8004620 <osMessagePut>
	  osDelay(5);
 80027fa:	2005      	movs	r0, #5
 80027fc:	f001 fed3 	bl	80045a6 <osDelay>
	  dataADC = USER_ADC_Read();
 8002800:	e7c2      	b.n	8002788 <readADC+0x28>
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	00000000 	.word	0x00000000
 800280c:	40affe00 	.word	0x40affe00
 8002810:	40012400 	.word	0x40012400
 8002814:	40590000 	.word	0x40590000
 8002818:	20000540 	.word	0x20000540

0800281c <readState>:
	}
	  /* USER CODE END 5 */
}

void readState(void const * argument){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	EngTrModel_initialize();
 8002824:	f7ff fa0a 	bl	8001c3c <EngTrModel_initialize>
	  /* Infinite loop */

	for(;;)
	{
		EngTrModel_step();
 8002828:	f7fe ff2e 	bl	8001688 <EngTrModel_step>


		printf("Vehicle Speed: %f\r\n", EngTrModel_Y.VehicleSpeed);
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <readState+0x3c>)
 800282e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <readState+0x40>)
 8002834:	f004 feaa 	bl	800758c <iprintf>
		printf("Engine Speed: %f\r\n", EngTrModel_Y.EngineSpeed);
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <readState+0x3c>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	4808      	ldr	r0, [pc, #32]	; (8002860 <readState+0x44>)
 8002840:	f004 fea4 	bl	800758c <iprintf>
		printf("Gear: %f\r\n", EngTrModel_Y.Gear);
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <readState+0x3c>)
 8002846:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800284a:	4806      	ldr	r0, [pc, #24]	; (8002864 <readState+0x48>)
 800284c:	f004 fe9e 	bl	800758c <iprintf>
		osDelay(40);
 8002850:	2028      	movs	r0, #40	; 0x28
 8002852:	f001 fea8 	bl	80045a6 <osDelay>
		EngTrModel_step();
 8002856:	e7e7      	b.n	8002828 <readState+0xc>
 8002858:	20000270 	.word	0x20000270
 800285c:	0800a6cc 	.word	0x0800a6cc
 8002860:	0800a6e0 	.word	0x0800a6e0
 8002864:	0800a6f4 	.word	0x0800a6f4

08002868 <readControl>:
	}
}

void readControl(void const * argument){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	osEvent r_event;
	uint32_t value;
	for(;;){
		r_event = osMessageGet(msgQueueHandle, 10);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <readControl+0x70>)
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	220a      	movs	r2, #10
 800287a:	4618      	mov	r0, r3
 800287c:	f001 ff10 	bl	80046a0 <osMessageGet>
		if( r_event.status == osEventMessage )
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b10      	cmp	r3, #16
 8002884:	d101      	bne.n	800288a <readControl+0x22>
			value = r_event.value.v;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	617b      	str	r3, [r7, #20]

		if(!(GPIOC->IDR & GPIO_IDR_IDR13)){
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <readControl+0x74>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <readControl+0x4a>
			EngTrModel_U.Throttle = 2.0;
 8002896:	4912      	ldr	r1, [pc, #72]	; (80028e0 <readControl+0x78>)
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028a0:	e9c1 2300 	strd	r2, r3, [r1]
			EngTrModel_U.BrakeTorque = 100.0;
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <readControl+0x78>)
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <readControl+0x7c>)
 80028ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80028b0:	e00e      	b.n	80028d0 <readControl+0x68>
		}
		else{
			EngTrModel_U.Throttle = value;
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7fd fd96 	bl	80003e4 <__aeabi_ui2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <readControl+0x78>)
 80028be:	e9c1 2300 	strd	r2, r3, [r1]
//			printf("%d\n\r", value);
			EngTrModel_U.BrakeTorque = 0.0;
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <readControl+0x78>)
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		osDelay(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f001 fe68 	bl	80045a6 <osDelay>
		r_event = osMessageGet(msgQueueHandle, 10);
 80028d6:	e7cb      	b.n	8002870 <readControl+0x8>
 80028d8:	20000540 	.word	0x20000540
 80028dc:	40011000 	.word	0x40011000
 80028e0:	20000260 	.word	0x20000260
 80028e4:	40590000 	.word	0x40590000

080028e8 <sendLCD>:
	}
}

/*	OUTPUT FUNCTIONS	*/

void sendLCD(void const * argument){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	 el acelerador en la pantalla principal de 16x2, , utilizando las
	 unidades correctas y con el espacio correcto.
	 Mostrará los valores actuales
	 * */

	uint32_t counter = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
	uint32_t temp;
	int valorAnterior = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
	int value, valorCambiado;
	osEvent r_event;

	LCD_Init( );//				inicializamos la libreria del LCD
 80028f8:	f7ff f9c0 	bl	8001c7c <LCD_Init>
	LCD_Cursor_ON( );//			cursor visible activo
 80028fc:	200e      	movs	r0, #14
 80028fe:	f7ff fadd 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Clear( );//			borra la pantalla
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff fada 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Set_Cursor( 1,0);
 8002908:	2100      	movs	r1, #0
 800290a:	2001      	movs	r0, #1
 800290c:	f7ff fafc 	bl	8001f08 <LCD_Set_Cursor>

	/* Infinite loop */
	for(;;)
	{
		r_event = osMessagePeek(msgQueueHandle, 100);
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <sendLCD+0xa0>)
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	2264      	movs	r2, #100	; 0x64
 800291a:	4618      	mov	r0, r3
 800291c:	f001 ff34 	bl	8004788 <osMessagePeek>
		if( r_event.status == osEventMessage )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d101      	bne.n	800292a <sendLCD+0x42>
			value = r_event.value.v;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	623b      	str	r3, [r7, #32]

		 valorCambiado = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
			  // Comprobar si el valor ha cambiado
		 if (value < (valorAnterior - 3) || value > (valorAnterior + 3)) {
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3b03      	subs	r3, #3
 8002932:	6a3a      	ldr	r2, [r7, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	db04      	blt.n	8002942 <sendLCD+0x5a>
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	3303      	adds	r3, #3
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	429a      	cmp	r2, r3
 8002940:	dd01      	ble.n	8002946 <sendLCD+0x5e>
				  valorCambiado = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
		 }
		if (valorCambiado) {
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d018      	beq.n	800297e <sendLCD+0x96>
				  LCD_Clear();
 800294c:	2001      	movs	r0, #1
 800294e:	f7ff fab5 	bl	8001ebc <LCD_Write_Cmd>
				  LCD_Set_Cursor(1, 0);
 8002952:	2100      	movs	r1, #0
 8002954:	2001      	movs	r0, #1
 8002956:	f7ff fad7 	bl	8001f08 <LCD_Set_Cursor>
				  LCD_Put_Str("V ->");
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <sendLCD+0xa4>)
 800295c:	f7ff faff 	bl	8001f5e <LCD_Put_Str>
				  LCD_Set_Cursor(2, 0);
 8002960:	2100      	movs	r1, #0
 8002962:	2002      	movs	r0, #2
 8002964:	f7ff fad0 	bl	8001f08 <LCD_Set_Cursor>
				  LCD_Put_Num(value);
 8002968:	6a38      	ldr	r0, [r7, #32]
 800296a:	f7ff fb16 	bl	8001f9a <LCD_Put_Num>
				  LCD_Put_Str("%");
 800296e:	4808      	ldr	r0, [pc, #32]	; (8002990 <sendLCD+0xa8>)
 8002970:	f7ff faf5 	bl	8001f5e <LCD_Put_Str>
				  HAL_Delay(200);
 8002974:	20c8      	movs	r0, #200	; 0xc8
 8002976:	f000 fe21 	bl	80035bc <HAL_Delay>
				  valorAnterior = value;
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
		}
//		temp = osKernelSysTick() - (100 * counter++);
		osDelay(1);
 800297e:	2001      	movs	r0, #1
 8002980:	f001 fe11 	bl	80045a6 <osDelay>
		r_event = osMessagePeek(msgQueueHandle, 100);
 8002984:	e7c4      	b.n	8002910 <sendLCD+0x28>
 8002986:	bf00      	nop
 8002988:	20000540 	.word	0x20000540
 800298c:	0800a700 	.word	0x0800a700
 8002990:	0800a708 	.word	0x0800a708

08002994 <sendData>:
	}
	/* USER CODE END 5 */
}

void sendData(void const * argument){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	{
//		printf("RPM: ,");
//		printf("Vehicle Speed: ,");
//		printf("Gear: ,");
//		printf("Throttle: \n\r");
		printf("SENDING DATA\n\r");
 800299c:	4803      	ldr	r0, [pc, #12]	; (80029ac <sendData+0x18>)
 800299e:	f004 fdf5 	bl	800758c <iprintf>
		osDelay(500);
 80029a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029a6:	f001 fdfe 	bl	80045a6 <osDelay>
		printf("SENDING DATA\n\r");
 80029aa:	e7f7      	b.n	800299c <sendData+0x8>
 80029ac:	0800a70c 	.word	0x0800a70c

080029b0 <barrido>:

}

/*	PROCESS FUNCTIONS	*/

void barrido(void){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	//ROWS
	//	  	 PA 12,6,11,7
	//	  First Column
	GPIOB->ODR &= ~GPIO_ODR_ODR3;
 80029b4:	4ba2      	ldr	r3, [pc, #648]	; (8002c40 <barrido+0x290>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4aa1      	ldr	r2, [pc, #644]	; (8002c40 <barrido+0x290>)
 80029ba:	f023 0308 	bic.w	r3, r3, #8
 80029be:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 80029c0:	4b9f      	ldr	r3, [pc, #636]	; (8002c40 <barrido+0x290>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a9e      	ldr	r2, [pc, #632]	; (8002c40 <barrido+0x290>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80029cc:	4b9c      	ldr	r3, [pc, #624]	; (8002c40 <barrido+0x290>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a9b      	ldr	r2, [pc, #620]	; (8002c40 <barrido+0x290>)
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <barrido+0x290>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a98      	ldr	r2, [pc, #608]	; (8002c40 <barrido+0x290>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //1
 80029e4:	4b97      	ldr	r3, [pc, #604]	; (8002c44 <barrido+0x294>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d112      	bne.n	8002a16 <barrido+0x66>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 80029f0:	4b94      	ldr	r3, [pc, #592]	; (8002c44 <barrido+0x294>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a93      	ldr	r2, [pc, #588]	; (8002c44 <barrido+0x294>)
 80029f6:	f083 0320 	eor.w	r3, r3, #32
 80029fa:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Left\n\r");
 80029fc:	4892      	ldr	r0, [pc, #584]	; (8002c48 <barrido+0x298>)
 80029fe:	f004 fdc5 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002a02:	bf00      	nop
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <barrido+0x294>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f9      	beq.n	8002a04 <barrido+0x54>
		HAL_Delay(10);
 8002a10:	200a      	movs	r0, #10
 8002a12:	f000 fdd3 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //4
 8002a16:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <barrido+0x294>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d112      	bne.n	8002a48 <barrido+0x98>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <barrido+0x294>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4a87      	ldr	r2, [pc, #540]	; (8002c44 <barrido+0x294>)
 8002a28:	f083 0320 	eor.w	r3, r3, #32
 8002a2c:	60d3      	str	r3, [r2, #12]
		printf("Left\n\r");
 8002a2e:	4887      	ldr	r0, [pc, #540]	; (8002c4c <barrido+0x29c>)
 8002a30:	f004 fdac 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002a34:	bf00      	nop
 8002a36:	4b83      	ldr	r3, [pc, #524]	; (8002c44 <barrido+0x294>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f9      	beq.n	8002a36 <barrido+0x86>
		HAL_Delay(10);
 8002a42:	200a      	movs	r0, #10
 8002a44:	f000 fdba 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //7
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <barrido+0x294>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10f      	bne.n	8002a74 <barrido+0xc4>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a54:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <barrido+0x294>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <barrido+0x294>)
 8002a5a:	f083 0320 	eor.w	r3, r3, #32
 8002a5e:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002a60:	bf00      	nop
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <barrido+0x294>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f9      	beq.n	8002a62 <barrido+0xb2>
		HAL_Delay(10);
 8002a6e:	200a      	movs	r0, #10
 8002a70:	f000 fda4 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //* delete
 8002a74:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <barrido+0x294>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <barrido+0xf0>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a80:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <barrido+0x294>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <barrido+0x294>)
 8002a86:	f083 0320 	eor.w	r3, r3, #32
 8002a8a:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002a8c:	bf00      	nop
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <barrido+0x294>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f9      	beq.n	8002a8e <barrido+0xde>
		HAL_Delay(10);
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f000 fd8e 	bl	80035bc <HAL_Delay>
	}

	//ROWS
	//	  	 PA 12,6,11,7
	//Second Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002aa0:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <barrido+0x290>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <barrido+0x290>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR4;
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <barrido+0x290>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <barrido+0x290>)
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <barrido+0x290>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <barrido+0x290>)
 8002abe:	f043 0320 	orr.w	r3, r3, #32
 8002ac2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <barrido+0x290>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a5d      	ldr	r2, [pc, #372]	; (8002c40 <barrido+0x290>)
 8002aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ace:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //2
 8002ad0:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <barrido+0x294>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d112      	bne.n	8002b02 <barrido+0x152>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <barrido+0x294>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <barrido+0x294>)
 8002ae2:	f083 0320 	eor.w	r3, r3, #32
 8002ae6:	60d3      	str	r3, [r2, #12]
		printf("Forward\n\r");
 8002ae8:	4859      	ldr	r0, [pc, #356]	; (8002c50 <barrido+0x2a0>)
 8002aea:	f004 fd4f 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002aee:	bf00      	nop
 8002af0:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <barrido+0x294>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f9      	beq.n	8002af0 <barrido+0x140>
		HAL_Delay(10);
 8002afc:	200a      	movs	r0, #10
 8002afe:	f000 fd5d 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //5
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <barrido+0x294>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d112      	bne.n	8002b34 <barrido+0x184>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <barrido+0x294>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <barrido+0x294>)
 8002b14:	f083 0320 	eor.w	r3, r3, #32
 8002b18:	60d3      	str	r3, [r2, #12]
	  printf("Braking\n\r");
 8002b1a:	484e      	ldr	r0, [pc, #312]	; (8002c54 <barrido+0x2a4>)
 8002b1c:	f004 fd36 	bl	800758c <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002b20:	bf00      	nop
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <barrido+0x294>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f9      	beq.n	8002b22 <barrido+0x172>
	  HAL_Delay(10);
 8002b2e:	200a      	movs	r0, #10
 8002b30:	f000 fd44 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //8
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <barrido+0x294>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d112      	bne.n	8002b66 <barrido+0x1b6>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b40:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <barrido+0x294>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <barrido+0x294>)
 8002b46:	f083 0320 	eor.w	r3, r3, #32
 8002b4a:	60d3      	str	r3, [r2, #12]
	  printf("Backward\n\r");
 8002b4c:	4842      	ldr	r0, [pc, #264]	; (8002c58 <barrido+0x2a8>)
 8002b4e:	f004 fd1d 	bl	800758c <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002b52:	bf00      	nop
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <barrido+0x294>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f9      	beq.n	8002b54 <barrido+0x1a4>
	  HAL_Delay(10);
 8002b60:	200a      	movs	r0, #10
 8002b62:	f000 fd2b 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //0
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <barrido+0x294>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <barrido+0x1e2>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <barrido+0x294>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a33      	ldr	r2, [pc, #204]	; (8002c44 <barrido+0x294>)
 8002b78:	f083 0320 	eor.w	r3, r3, #32
 8002b7c:	60d3      	str	r3, [r2, #12]
	  //printf("");
	  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002b7e:	bf00      	nop
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <barrido+0x294>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f9      	beq.n	8002b80 <barrido+0x1d0>
	  HAL_Delay(10);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f000 fd15 	bl	80035bc <HAL_Delay>
	}

	//Third Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <barrido+0x290>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <barrido+0x290>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <barrido+0x290>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <barrido+0x290>)
 8002ba4:	f043 0310 	orr.w	r3, r3, #16
 8002ba8:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR5;
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <barrido+0x290>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <barrido+0x290>)
 8002bb0:	f023 0320 	bic.w	r3, r3, #32
 8002bb4:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <barrido+0x290>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <barrido+0x290>)
 8002bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc0:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //3
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <barrido+0x294>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <barrido+0x244>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <barrido+0x294>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <barrido+0x294>)
 8002bd4:	f083 0320 	eor.w	r3, r3, #32
 8002bd8:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Right\n\r");
 8002bda:	4820      	ldr	r0, [pc, #128]	; (8002c5c <barrido+0x2ac>)
 8002bdc:	f004 fcd6 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002be0:	bf00      	nop
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <barrido+0x294>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f9      	beq.n	8002be2 <barrido+0x232>
		HAL_Delay(10);
 8002bee:	200a      	movs	r0, #10
 8002bf0:	f000 fce4 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //6
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <barrido+0x294>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d112      	bne.n	8002c26 <barrido+0x276>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <barrido+0x294>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <barrido+0x294>)
 8002c06:	f083 0320 	eor.w	r3, r3, #32
 8002c0a:	60d3      	str	r3, [r2, #12]
		printf("Right\n\r");
 8002c0c:	4814      	ldr	r0, [pc, #80]	; (8002c60 <barrido+0x2b0>)
 8002c0e:	f004 fcbd 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002c12:	bf00      	nop
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <barrido+0x294>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f9      	beq.n	8002c14 <barrido+0x264>
		HAL_Delay(10);
 8002c20:	200a      	movs	r0, #10
 8002c22:	f000 fccb 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //9
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <barrido+0x294>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d122      	bne.n	8002c78 <barrido+0x2c8>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <barrido+0x294>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a03      	ldr	r2, [pc, #12]	; (8002c44 <barrido+0x294>)
 8002c38:	f083 0320 	eor.w	r3, r3, #32
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e011      	b.n	8002c64 <barrido+0x2b4>
 8002c40:	40010c00 	.word	0x40010c00
 8002c44:	40010800 	.word	0x40010800
 8002c48:	0800a71c 	.word	0x0800a71c
 8002c4c:	0800a730 	.word	0x0800a730
 8002c50:	0800a738 	.word	0x0800a738
 8002c54:	0800a744 	.word	0x0800a744
 8002c58:	0800a750 	.word	0x0800a750
 8002c5c:	0800a75c 	.word	0x0800a75c
 8002c60:	0800a770 	.word	0x0800a770
		  //printf();
		  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002c64:	bf00      	nop
 8002c66:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <barrido+0x3f0>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f9      	beq.n	8002c66 <barrido+0x2b6>
		  HAL_Delay(10);
 8002c72:	200a      	movs	r0, #10
 8002c74:	f000 fca2 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //# space
 8002c78:	4b49      	ldr	r3, [pc, #292]	; (8002da0 <barrido+0x3f0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10f      	bne.n	8002ca4 <barrido+0x2f4>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c84:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <barrido+0x3f0>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a45      	ldr	r2, [pc, #276]	; (8002da0 <barrido+0x3f0>)
 8002c8a:	f083 0320 	eor.w	r3, r3, #32
 8002c8e:	60d3      	str	r3, [r2, #12]
		  //printf("");
		  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002c90:	bf00      	nop
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <barrido+0x3f0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f9      	beq.n	8002c92 <barrido+0x2e2>
		  HAL_Delay(10);
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	f000 fc8c 	bl	80035bc <HAL_Delay>
	}

	//Fourth Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <barrido+0x3f4>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a3e      	ldr	r2, [pc, #248]	; (8002da4 <barrido+0x3f4>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002cb0:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <barrido+0x3f4>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	; (8002da4 <barrido+0x3f4>)
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <barrido+0x3f4>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <barrido+0x3f4>)
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR10;
 8002cc8:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <barrido+0x3f4>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <barrido+0x3f4>)
 8002cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cd2:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //A
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <barrido+0x3f0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d112      	bne.n	8002d06 <barrido+0x356>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <barrido+0x3f0>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	; (8002da0 <barrido+0x3f0>)
 8002ce6:	f083 0320 	eor.w	r3, r3, #32
 8002cea:	60d3      	str	r3, [r2, #12]
		printf("Drive Mode\n\r");
 8002cec:	482e      	ldr	r0, [pc, #184]	; (8002da8 <barrido+0x3f8>)
 8002cee:	f004 fc4d 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002cf2:	bf00      	nop
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <barrido+0x3f0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <barrido+0x344>
		HAL_Delay(10);
 8002d00:	200a      	movs	r0, #10
 8002d02:	f000 fc5b 	bl	80035bc <HAL_Delay>
	  }
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //B
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <barrido+0x3f0>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d112      	bne.n	8002d38 <barrido+0x388>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <barrido+0x3f0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <barrido+0x3f0>)
 8002d18:	f083 0320 	eor.w	r3, r3, #32
 8002d1c:	60d3      	str	r3, [r2, #12]
		printf("Neutral Mode\n\r");
 8002d1e:	4823      	ldr	r0, [pc, #140]	; (8002dac <barrido+0x3fc>)
 8002d20:	f004 fc34 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002d24:	bf00      	nop
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <barrido+0x3f0>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f9      	beq.n	8002d26 <barrido+0x376>
		HAL_Delay(10);
 8002d32:	200a      	movs	r0, #10
 8002d34:	f000 fc42 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //C
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <barrido+0x3f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d112      	bne.n	8002d6a <barrido+0x3ba>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <barrido+0x3f0>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <barrido+0x3f0>)
 8002d4a:	f083 0320 	eor.w	r3, r3, #32
 8002d4e:	60d3      	str	r3, [r2, #12]
		printf("Reverse Mode\n\r");
 8002d50:	4817      	ldr	r0, [pc, #92]	; (8002db0 <barrido+0x400>)
 8002d52:	f004 fc1b 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002d56:	bf00      	nop
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <barrido+0x3f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f9      	beq.n	8002d58 <barrido+0x3a8>
		HAL_Delay(10);
 8002d64:	200a      	movs	r0, #10
 8002d66:	f000 fc29 	bl	80035bc <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //D
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <barrido+0x3f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <barrido+0x3ec>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <barrido+0x3f0>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <barrido+0x3f0>)
 8002d7c:	f083 0320 	eor.w	r3, r3, #32
 8002d80:	60d3      	str	r3, [r2, #12]
		printf("D1 Mode\n\r");
 8002d82:	480c      	ldr	r0, [pc, #48]	; (8002db4 <barrido+0x404>)
 8002d84:	f004 fc02 	bl	800758c <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002d88:	bf00      	nop
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <barrido+0x3f0>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f9      	beq.n	8002d8a <barrido+0x3da>
		HAL_Delay(10);
 8002d96:	200a      	movs	r0, #10
 8002d98:	f000 fc10 	bl	80035bc <HAL_Delay>
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010800 	.word	0x40010800
 8002da4:	40010c00 	.word	0x40010c00
 8002da8:	0800a778 	.word	0x0800a778
 8002dac:	0800a788 	.word	0x0800a788
 8002db0:	0800a798 	.word	0x0800a798
 8002db4:	0800a7a8 	.word	0x0800a7a8

08002db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dca:	f000 fbdb 	bl	8003584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40000800 	.word	0x40000800

08002ddc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <Error_Handler+0x8>
	...

08002de8 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00f      	b.n	8002e1a <_write+0x32>
		while( ( USART1->SR & USART_SR_TXE ) == 0 ){}
 8002dfa:	bf00      	nop
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <_write+0x48>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f9      	beq.n	8002dfc <_write+0x14>
		USART1->DR = *ptr++;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	60ba      	str	r2, [r7, #8]
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <_write+0x48>)
 8002e12:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	dbeb      	blt.n	8002dfa <_write+0x12>
	}
	return len;
 8002e22:	687b      	ldr	r3, [r7, #4]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40013800 	.word	0x40013800

08002e34 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d10a      	bne.n	8002e66 <rtGetInf+0x32>
    inf = rtGetInfF();
 8002e50:	f000 f836 	bl	8002ec0 <rtGetInfF>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fae6 	bl	8000428 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002e64:	e022      	b.n	8002eac <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8002e66:	2301      	movs	r3, #1
 8002e68:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <rtGetInf+0x54>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d009      	beq.n	8002e9a <rtGetInf+0x66>
 8002e86:	e011      	b.n	8002eac <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <rtGetInf+0x88>)
 8002e8a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8002e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e94:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002e98:	e008      	b.n	8002eac <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <rtGetInf+0x88>)
 8002e9c:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8002ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002eaa:	bf00      	nop
      }
    }
  }

  return inf;
 8002eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	7ff00000 	.word	0x7ff00000

08002ec0 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002ec6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8002eca:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d10a      	bne.n	8002f0a <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8002ef4:	f000 f836 	bl	8002f64 <rtGetMinusInfF>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fa94 	bl	8000428 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002f08:	e022      	b.n	8002f50 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <rtGetMinusInf+0x54>
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d009      	beq.n	8002f3e <rtGetMinusInf+0x66>
 8002f2a:	e011      	b.n	8002f50 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <rtGetMinusInf+0x88>)
 8002f2e:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002f3c:	e008      	b.n	8002f50 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <rtGetMinusInf+0x88>)
 8002f40:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8002f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002f4e:	bf00      	nop
      }
    }
  }

  return minf;
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	fff00000 	.word	0xfff00000

08002f64 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <rtGetMinusInfF+0x18>)
 8002f6c:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8002f6e:	687b      	ldr	r3, [r7, #4]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	ff800000 	.word	0xff800000

08002f80 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d10a      	bne.n	8002fb2 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8002f9c:	f000 f838 	bl	8003010 <rtGetNaNF>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fa40 	bl	8000428 <__aeabi_f2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002fb0:	e024      	b.n	8002ffc <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <rtGetNaN+0x54>
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d009      	beq.n	8002fe6 <rtGetNaN+0x66>
 8002fd2:	e013      	b.n	8002ffc <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <rtGetNaN+0x8c>)
 8002fd6:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8002fdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe0:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002fe4:	e00a      	b.n	8002ffc <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 8002fe6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002fea:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff0:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8002ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002ffa:	bf00      	nop
      }
    }
  }

  return nan;
 8002ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	fff80000 	.word	0xfff80000

08003010 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 800301c:	2301      	movs	r3, #1
 800301e:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003020:	1dbb      	adds	r3, r7, #6
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <rtGetNaNF+0x2c>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <rtGetNaNF+0x32>
 800303a:	e006      	b.n	800304a <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <rtGetNaNF+0x48>)
 800303e:	60bb      	str	r3, [r7, #8]
      break;
 8003040:	e003      	b.n	800304a <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 8003042:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003046:	60bb      	str	r3, [r7, #8]
      break;
 8003048:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 800304a:	68bb      	ldr	r3, [r7, #8]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	ffc00000 	.word	0xffc00000

0800305c <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8003064:	f7ff ff8c 	bl	8002f80 <rtGetNaN>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4911      	ldr	r1, [pc, #68]	; (80030b4 <rt_InitInfAndNaN+0x58>)
 800306e:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 8003072:	f7ff ffcd 	bl	8003010 <rtGetNaNF>
 8003076:	4603      	mov	r3, r0
 8003078:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <rt_InitInfAndNaN+0x5c>)
 800307a:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 800307c:	f7ff feda 	bl	8002e34 <rtGetInf>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	490d      	ldr	r1, [pc, #52]	; (80030bc <rt_InitInfAndNaN+0x60>)
 8003086:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 800308a:	f7ff ff19 	bl	8002ec0 <rtGetInfF>
 800308e:	4603      	mov	r3, r0
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <rt_InitInfAndNaN+0x64>)
 8003092:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 8003094:	f7ff ff20 	bl	8002ed8 <rtGetMinusInf>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4909      	ldr	r1, [pc, #36]	; (80030c4 <rt_InitInfAndNaN+0x68>)
 800309e:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80030a2:	f7ff ff5f 	bl	8002f64 <rtGetMinusInfF>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <rt_InitInfAndNaN+0x6c>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000558 	.word	0x20000558
 80030b8:	20000568 	.word	0x20000568
 80030bc:	20000548 	.word	0x20000548
 80030c0:	20000560 	.word	0x20000560
 80030c4:	20000550 	.word	0x20000550
 80030c8:	20000564 	.word	0x20000564

080030cc <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <rtIsInf+0x40>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e0:	f7fd fc62 	bl	80009a8 <__aeabi_dcmpeq>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <rtIsInf+0x32>
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <rtIsInf+0x44>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030f4:	f7fd fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <rtIsInf+0x36>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <rtIsInf+0x38>
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000548 	.word	0x20000548
 8003110:	20000550 	.word	0x20000550

08003114 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003124:	2340      	movs	r3, #64	; 0x40
 8003126:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b20      	cmp	r3, #32
 800312c:	d10b      	bne.n	8003146 <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 800312e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003132:	f7fd fcc9 	bl	8000ac8 <__aeabi_d2f>
 8003136:	4603      	mov	r3, r0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f84d 	bl	80031d8 <rtIsNaNF>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003144:	e040      	b.n	80031c8 <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 8003146:	2301      	movs	r3, #1
 8003148:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 800315c:	7ffb      	ldrb	r3, [r7, #31]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <rtIsNaN+0x54>
 8003162:	2b01      	cmp	r3, #1
 8003164:	d018      	beq.n	8003198 <rtIsNaN+0x84>
 8003166:	e02f      	b.n	80031c8 <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800316c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <rtIsNaN+0xc0>)
 8003174:	4013      	ands	r3, r2
                             0x7FF00000 &&
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <rtIsNaN+0xc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d109      	bne.n	8003190 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 8003186:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <rtIsNaN+0x7e>
 8003190:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 8003196:	e017      	b.n	80031c8 <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 8003198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800319c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <rtIsNaN+0xc0>)
 80031a4:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <rtIsNaN+0xc0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d109      	bne.n	80031c0 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80031b6:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <rtIsNaN+0xac>
                             0x7FF00000 &&
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <rtIsNaN+0xae>
 80031c0:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80031c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 80031c6:	bf00      	nop
      }
    }
  }

  return result;
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	7ff00000 	.word	0x7ff00000

080031d8 <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80031ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80031ee:	d106      	bne.n	80031fe <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <rtIsNaNF+0x26>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <rtIsNaNF+0x28>
 80031fe:	2300      	movs	r3, #0
 8003200:	b2db      	uxtb	r3, r3
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_MspInit+0x68>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_MspInit+0x68>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6193      	str	r3, [r2, #24]
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_MspInit+0x68>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_MspInit+0x68>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_MspInit+0x68>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	61d3      	str	r3, [r2, #28]
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_MspInit+0x68>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	210f      	movs	r1, #15
 8003246:	f06f 0001 	mvn.w	r0, #1
 800324a:	f000 fa90 	bl	800376e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_MspInit+0x6c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_MspInit+0x6c>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000

0800327c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	; 0x38
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_InitTick+0xe8>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a33      	ldr	r2, [pc, #204]	; (8003364 <HAL_InitTick+0xe8>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	61d3      	str	r3, [r2, #28]
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_InitTick+0xe8>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032aa:	f107 0210 	add.w	r2, r7, #16
 80032ae:	f107 0314 	add.w	r3, r7, #20
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fe63 	bl	8003f80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032c4:	f000 fe48 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80032c8:	6378      	str	r0, [r7, #52]	; 0x34
 80032ca:	e004      	b.n	80032d6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032cc:	f000 fe44 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80032d0:	4603      	mov	r3, r0
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_InitTick+0xec>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	3b01      	subs	r3, #1
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_InitTick+0xf0>)
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_InitTick+0xf4>)
 80032e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80032ea:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_InitTick+0xf0>)
 80032ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_InitTick+0xf0>)
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_InitTick+0xf0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_InitTick+0xf0>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_InitTick+0xf0>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800330a:	4818      	ldr	r0, [pc, #96]	; (800336c <HAL_InitTick+0xf0>)
 800330c:	f000 fe86 	bl	800401c <HAL_TIM_Base_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11b      	bne.n	8003356 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800331e:	4813      	ldr	r0, [pc, #76]	; (800336c <HAL_InitTick+0xf0>)
 8003320:	f000 fed4 	bl	80040cc <HAL_TIM_Base_Start_IT>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800332a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800332e:	2b00      	cmp	r3, #0
 8003330:	d111      	bne.n	8003356 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003332:	201e      	movs	r0, #30
 8003334:	f000 fa37 	bl	80037a6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	d808      	bhi.n	8003350 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800333e:	2200      	movs	r2, #0
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	201e      	movs	r0, #30
 8003344:	f000 fa13 	bl	800376e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_InitTick+0xf8>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e002      	b.n	8003356 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800335a:	4618      	mov	r0, r3
 800335c:	3738      	adds	r7, #56	; 0x38
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	431bde83 	.word	0x431bde83
 800336c:	2000056c 	.word	0x2000056c
 8003370:	40000800 	.word	0x40000800
 8003374:	20000004 	.word	0x20000004

08003378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800337c:	e7fe      	b.n	800337c <NMI_Handler+0x4>

0800337e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <HardFault_Handler+0x4>

08003384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <MemManage_Handler+0x4>

0800338a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <UsageFault_Handler+0x4>

08003396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
	...

080033a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <TIM4_IRQHandler+0x10>)
 80033aa:	f000 fee1 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000056c 	.word	0x2000056c

080033b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <_kill>:

int _kill(int pid, int sig)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033d0:	f004 faca 	bl	8007968 <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2216      	movs	r2, #22
 80033d8:	601a      	str	r2, [r3, #0]
  return -1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <_exit>:

void _exit (int status)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033ee:	f04f 31ff 	mov.w	r1, #4294967295
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffe7 	bl	80033c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033f8:	e7fe      	b.n	80033f8 <_exit+0x12>

080033fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e00a      	b.n	8003422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800340c:	f3af 8000 	nop.w
 8003410:	4601      	mov	r1, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	60ba      	str	r2, [r7, #8]
 8003418:	b2ca      	uxtb	r2, r1
 800341a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	dbf0      	blt.n	800340c <_read+0x12>
  }

  return len;
 800342a:	687b      	ldr	r3, [r7, #4]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800345a:	605a      	str	r2, [r3, #4]
  return 0;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <_isatty>:

int _isatty(int file)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003470:	2301      	movs	r3, #1
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <_sbrk+0x5c>)
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <_sbrk+0x60>)
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <_sbrk+0x64>)
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <_sbrk+0x68>)
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d207      	bcs.n	80034d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c4:	f004 fa50 	bl	8007968 <__errno>
 80034c8:	4603      	mov	r3, r0
 80034ca:	220c      	movs	r2, #12
 80034cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	e009      	b.n	80034e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <_sbrk+0x64>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <_sbrk+0x64>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <_sbrk+0x64>)
 80034e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034e6:	68fb      	ldr	r3, [r7, #12]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20005000 	.word	0x20005000
 80034f4:	00000400 	.word	0x00000400
 80034f8:	200005b4 	.word	0x200005b4
 80034fc:	20002c58 	.word	0x20002c58

08003500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800350c:	f7ff fff8 	bl	8003500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003510:	480b      	ldr	r0, [pc, #44]	; (8003540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003512:	490c      	ldr	r1, [pc, #48]	; (8003544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003518:	e002      	b.n	8003520 <LoopCopyDataInit>

0800351a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800351c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800351e:	3304      	adds	r3, #4

08003520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003524:	d3f9      	bcc.n	800351a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003528:	4c09      	ldr	r4, [pc, #36]	; (8003550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800352c:	e001      	b.n	8003532 <LoopFillZerobss>

0800352e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800352e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003530:	3204      	adds	r2, #4

08003532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003534:	d3fb      	bcc.n	800352e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003536:	f004 fa1d 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800353a:	f7fe fde9 	bl	8002110 <main>
  bx lr
 800353e:	4770      	bx	lr
  ldr r0, =_sdata
 8003540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003544:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003548:	0800b418 	.word	0x0800b418
  ldr r2, =_sbss
 800354c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003550:	20002c54 	.word	0x20002c54

08003554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003554:	e7fe      	b.n	8003554 <ADC1_2_IRQHandler>
	...

08003558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_Init+0x28>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_Init+0x28>)
 8003562:	f043 0310 	orr.w	r3, r3, #16
 8003566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003568:	2003      	movs	r0, #3
 800356a:	f000 f8f5 	bl	8003758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356e:	200f      	movs	r0, #15
 8003570:	f7ff fe84 	bl	800327c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003574:	f7ff fe4a 	bl	800320c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40022000 	.word	0x40022000

08003584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_IncTick+0x1c>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_IncTick+0x20>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <HAL_IncTick+0x20>)
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000008 	.word	0x20000008
 80035a4:	200005b8 	.word	0x200005b8

080035a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return uwTick;
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <HAL_GetTick+0x10>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	200005b8 	.word	0x200005b8

080035bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d005      	beq.n	80035e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_Delay+0x44>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035e2:	bf00      	nop
 80035e4:	f7ff ffe0 	bl	80035a8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d8f7      	bhi.n	80035e4 <HAL_Delay+0x28>
  {
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008

08003604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <__NVIC_GetPriorityGrouping+0x18>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0307 	and.w	r3, r3, #7
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db0b      	blt.n	8003692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	4906      	ldr	r1, [pc, #24]	; (800369c <__NVIC_EnableIRQ+0x34>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f202 	lsl.w	r2, r0, r2
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100

080036a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db0a      	blt.n	80036ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	490c      	ldr	r1, [pc, #48]	; (80036ec <__NVIC_SetPriority+0x4c>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	440b      	add	r3, r1
 80036c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c8:	e00a      	b.n	80036e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4908      	ldr	r1, [pc, #32]	; (80036f0 <__NVIC_SetPriority+0x50>)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3b04      	subs	r3, #4
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	440b      	add	r3, r1
 80036de:	761a      	strb	r2, [r3, #24]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f1c3 0307 	rsb	r3, r3, #7
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf28      	it	cs
 8003712:	2304      	movcs	r3, #4
 8003714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3304      	adds	r3, #4
 800371a:	2b06      	cmp	r3, #6
 800371c:	d902      	bls.n	8003724 <NVIC_EncodePriority+0x30>
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3b03      	subs	r3, #3
 8003722:	e000      	b.n	8003726 <NVIC_EncodePriority+0x32>
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	401a      	ands	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800373c:	f04f 31ff 	mov.w	r1, #4294967295
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43d9      	mvns	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	4313      	orrs	r3, r2
         );
}
 800374e:	4618      	mov	r0, r3
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff4f 	bl	8003604 <__NVIC_SetPriorityGrouping>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800376e:	b580      	push	{r7, lr}
 8003770:	b086      	sub	sp, #24
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003780:	f7ff ff64 	bl	800364c <__NVIC_GetPriorityGrouping>
 8003784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7ff ffb2 	bl	80036f4 <NVIC_EncodePriority>
 8003790:	4602      	mov	r2, r0
 8003792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff81 	bl	80036a0 <__NVIC_SetPriority>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	4603      	mov	r3, r0
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff57 	bl	8003668 <__NVIC_EnableIRQ>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e272      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8087 	beq.w	80038f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	4b92      	ldr	r3, [pc, #584]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00c      	beq.n	800380a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f0:	4b8f      	ldr	r3, [pc, #572]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d112      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
 80037fc:	4b8c      	ldr	r3, [pc, #560]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d10b      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d168      	bne.n	80038f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e24c      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x76>
 800382c:	4b80      	ldr	r3, [pc, #512]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7f      	ldr	r2, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7a      	ldr	r2, [pc, #488]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a77      	ldr	r2, [pc, #476]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e01d      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0xbc>
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a71      	ldr	r2, [pc, #452]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 8003880:	4b6b      	ldr	r3, [pc, #428]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6a      	ldr	r2, [pc, #424]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a67      	ldr	r2, [pc, #412]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7ff fe82 	bl	80035a8 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7ff fe7e 	bl	80035a8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e200      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe4>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff fe6e 	bl	80035a8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7ff fe6a 	bl	80035a8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ec      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10c>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800390a:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1c0      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4939      	ldr	r1, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e03a      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCC_OscConfig+0x270>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7ff fe23 	bl	80035a8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7ff fe1f 	bl	80035a8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1a1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4927      	ldr	r1, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <HAL_RCC_OscConfig+0x270>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7ff fe02 	bl	80035a8 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7ff fdfe 	bl	80035a8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e180      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03a      	beq.n	8003a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b17      	ldr	r3, [pc, #92]	; (8003a38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7ff fde2 	bl	80035a8 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7ff fdde 	bl	80035a8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e160      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f000 faea 	bl	8003fe0 <RCC_Delay>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7ff fdc8 	bl	80035a8 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7ff fdc4 	bl	80035a8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e146      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	42420000 	.word	0x42420000
 8003a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e9      	bne.n	8003a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a6 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a87      	ldr	r2, [pc, #540]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b85      	ldr	r3, [pc, #532]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b82      	ldr	r3, [pc, #520]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7e      	ldr	r2, [pc, #504]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7ff fd85 	bl	80035a8 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7ff fd81 	bl	80035a8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e103      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x312>
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	e02d      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a66      	ldr	r2, [pc, #408]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	e01c      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x356>
 8003b00:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a60      	ldr	r2, [pc, #384]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b58      	ldr	r3, [pc, #352]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7ff fd35 	bl	80035a8 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7ff fd31 	bl	80035a8 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RCC_OscConfig+0x37e>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b66:	f7ff fd1f 	bl	80035a8 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7ff fd1b 	bl	80035a8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b3c      	ldr	r3, [pc, #240]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d061      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d146      	bne.n	8003c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7ff fcef 	bl	80035a8 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7ff fceb 	bl	80035a8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e06d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4921      	ldr	r1, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	4b1f      	ldr	r3, [pc, #124]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a19      	ldr	r1, [r3, #32]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	491b      	ldr	r1, [pc, #108]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7ff fcbf 	bl	80035a8 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7ff fcbb 	bl	80035a8 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46a>
 8003c4c:	e035      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7ff fca8 	bl	80035a8 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7ff fca4 	bl	80035a8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e026      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x498>
 8003c7a:	e01e      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e019      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x500>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d0      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b67      	ldr	r3, [pc, #412]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4965      	ldr	r1, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a52      	ldr	r2, [pc, #328]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4936      	ldr	r1, [pc, #216]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7ff fbf6 	bl	80035a8 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7ff fbf2 	bl	80035a8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e053      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d210      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1cc>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff fa00 	bl	800327c <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800b040 	.word	0x0800b040
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e027      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0c5b      	lsrs	r3, r3, #17
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e004      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	693b      	ldr	r3, [r7, #16]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	0800b058 	.word	0x0800b058
 8003f3c:	0800b068 	.word	0x0800b068
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	20000000 	.word	0x20000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff2 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800b050 	.word	0x0800b050

08003f80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_RCC_GetClockConfig+0x58>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_RCC_GetClockConfig+0x58>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_GetClockConfig+0x58>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_RCC_GetClockConfig+0x58>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	08db      	lsrs	r3, r3, #3
 8003fba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_GetClockConfig+0x5c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40022000 	.word	0x40022000

08003fe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <RCC_Delay+0x34>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <RCC_Delay+0x38>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0a5b      	lsrs	r3, r3, #9
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ffc:	bf00      	nop
  }
  while (Delay --);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	60fa      	str	r2, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f9      	bne.n	8003ffc <RCC_Delay+0x1c>
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	20000000 	.word	0x20000000
 8004018:	10624dd3 	.word	0x10624dd3

0800401c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e041      	b.n	80040b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f839 	bl	80040ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 f9b4 	bl	80043c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e03a      	b.n	800415a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIM_Base_Start_IT+0x98>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d009      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIM_Base_Start_IT+0x9c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x58>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_TIM_Base_Start_IT+0xa0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d111      	bne.n	8004148 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d010      	beq.n	8004158 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e007      	b.n	8004158 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0202 	mvn.w	r2, #2
 800419c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8ed 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8e0 	bl	8004380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8ef 	bl	80043a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0204 	mvn.w	r2, #4
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8c3 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8b6 	bl	8004380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8c5 	bl	80043a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0208 	mvn.w	r2, #8
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f899 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f88c 	bl	8004380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f89b 	bl	80043a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0210 	mvn.w	r2, #16
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2208      	movs	r2, #8
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f86f 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f862 	bl	8004380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f871 	bl	80043a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0201 	mvn.w	r2, #1
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fe fd62 	bl	8002db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8bf 	bl	800449e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f835 	bl	80043b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b20      	cmp	r3, #32
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0220 	mvn.w	r2, #32
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f88a 	bl	800448c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a29      	ldr	r2, [pc, #164]	; (8004480 <TIM_Base_SetConfig+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00b      	beq.n	80043f8 <TIM_Base_SetConfig+0x30>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d007      	beq.n	80043f8 <TIM_Base_SetConfig+0x30>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a26      	ldr	r2, [pc, #152]	; (8004484 <TIM_Base_SetConfig+0xbc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_Base_SetConfig+0x30>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a25      	ldr	r2, [pc, #148]	; (8004488 <TIM_Base_SetConfig+0xc0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d108      	bne.n	800440a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <TIM_Base_SetConfig+0xb8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00b      	beq.n	800442a <TIM_Base_SetConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004418:	d007      	beq.n	800442a <TIM_Base_SetConfig+0x62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a19      	ldr	r2, [pc, #100]	; (8004484 <TIM_Base_SetConfig+0xbc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d003      	beq.n	800442a <TIM_Base_SetConfig+0x62>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a18      	ldr	r2, [pc, #96]	; (8004488 <TIM_Base_SetConfig+0xc0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a07      	ldr	r2, [pc, #28]	; (8004480 <TIM_Base_SetConfig+0xb8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d103      	bne.n	8004470 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	615a      	str	r2, [r3, #20]
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800

0800448c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	2b84      	cmp	r3, #132	; 0x84
 80044c4:	d005      	beq.n	80044d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	3303      	adds	r3, #3
 80044d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e4:	f3ef 8305 	mrs	r3, IPSR
 80044e8:	607b      	str	r3, [r7, #4]
  return(result);
 80044ea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004504:	f001 fa34 	bl	8005970 <vTaskStartScheduler>
  
  return osOK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	bd80      	pop	{r7, pc}

0800450e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800450e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004510:	b089      	sub	sp, #36	; 0x24
 8004512:	af04      	add	r7, sp, #16
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <osThreadCreate+0x54>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01c      	beq.n	8004562 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685c      	ldr	r4, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691e      	ldr	r6, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ffb8 	bl	80044b0 <makeFreeRtosPriority>
 8004540:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454a:	9202      	str	r2, [sp, #8]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	9100      	str	r1, [sp, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4632      	mov	r2, r6
 8004554:	4629      	mov	r1, r5
 8004556:	4620      	mov	r0, r4
 8004558:	f001 f834 	bl	80055c4 <xTaskCreateStatic>
 800455c:	4603      	mov	r3, r0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e01c      	b.n	800459c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685c      	ldr	r4, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff9a 	bl	80044b0 <makeFreeRtosPriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	4632      	mov	r2, r6
 800458a:	4629      	mov	r1, r5
 800458c:	4620      	mov	r0, r4
 800458e:	f001 f875 	bl	800567c <xTaskCreate>
 8004592:	4603      	mov	r3, r0
 8004594:	2b01      	cmp	r3, #1
 8004596:	d001      	beq.n	800459c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <osDelay+0x16>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	e000      	b.n	80045be <osDelay+0x18>
 80045bc:	2301      	movs	r3, #1
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f9a2 	bl	8005908 <vTaskDelay>
  
  return osOK;
 80045c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045ce:	b590      	push	{r4, r7, lr}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af02      	add	r7, sp, #8
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d011      	beq.n	8004604 <osMessageCreate+0x36>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2400      	movs	r4, #0
 80045fa:	9400      	str	r4, [sp, #0]
 80045fc:	f000 fa26 	bl	8004a4c <xQueueGenericCreateStatic>
 8004600:	4603      	mov	r3, r0
 8004602:	e008      	b.n	8004616 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	4619      	mov	r1, r3
 8004610:	f000 fa93 	bl	8004b3a <xQueueGenericCreate>
 8004614:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}
	...

08004620 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <osMessagePut+0x1e>
    ticks = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800463e:	f7ff ff4e 	bl	80044de <inHandlerMode>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d018      	beq.n	800467a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004648:	f107 0210 	add.w	r2, r7, #16
 800464c:	f107 0108 	add.w	r1, r7, #8
 8004650:	2300      	movs	r3, #0
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fbcc 	bl	8004df0 <xQueueGenericSendFromISR>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <osMessagePut+0x42>
      return osErrorOS;
 800465e:	23ff      	movs	r3, #255	; 0xff
 8004660:	e018      	b.n	8004694 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d014      	beq.n	8004692 <osMessagePut+0x72>
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <osMessagePut+0x7c>)
 800466a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	e00b      	b.n	8004692 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800467a:	f107 0108 	add.w	r1, r7, #8
 800467e:	2300      	movs	r3, #0
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fab6 	bl	8004bf4 <xQueueGenericSend>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d001      	beq.n	8004692 <osMessagePut+0x72>
      return osErrorOS;
 800468e:	23ff      	movs	r3, #255	; 0xff
 8004690:	e000      	b.n	8004694 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b08b      	sub	sp, #44	; 0x2c
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	617b      	str	r3, [r7, #20]
    return event;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	461c      	mov	r4, r3
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046ce:	e054      	b.n	800477a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d103      	bne.n	80046e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	e009      	b.n	80046fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <osMessageGet+0x5c>
      ticks = 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80046fc:	f7ff feef 	bl	80044de <inHandlerMode>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01c      	beq.n	8004740 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004706:	f107 0220 	add.w	r2, r7, #32
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	f000 fdc6 	bl	80052a4 <xQueueReceiveFromISR>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d102      	bne.n	8004724 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800471e:	2310      	movs	r3, #16
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e001      	b.n	8004728 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01d      	beq.n	800476a <osMessageGet+0xca>
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <osMessageGet+0xe4>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	e014      	b.n	800476a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	3304      	adds	r3, #4
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	4619      	mov	r1, r3
 800474a:	68b8      	ldr	r0, [r7, #8]
 800474c:	f000 fbe8 	bl	8004f20 <xQueueReceive>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d102      	bne.n	800475c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004756:	2310      	movs	r3, #16
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e006      	b.n	800476a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <osMessageGet+0xc6>
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <osMessageGet+0xc8>
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	461c      	mov	r4, r3
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	372c      	adds	r7, #44	; 0x2c
 800477e:	46bd      	mov	sp, r7
 8004780:	bd90      	pop	{r4, r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <osMessagePeek>:
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
*/
osEvent osMessagePeek (osMessageQId queue_id, uint32_t millisec)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <osMessagePeek+0x2c>
    event.status = osErrorParameter;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	613b      	str	r3, [r7, #16]
    return event;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	461c      	mov	r4, r3
 80047a6:	f107 0310 	add.w	r3, r7, #16
 80047aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047b2:	e030      	b.n	8004816 <osMessagePeek+0x8e>
  }
  
  ticks = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d103      	bne.n	80047c8 <osMessagePeek+0x40>
    ticks = portMAX_DELAY;
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	e009      	b.n	80047dc <osMessagePeek+0x54>
  }
  else if (millisec != 0) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <osMessagePeek+0x54>
    ticks = millisec / portTICK_PERIOD_MS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <osMessagePeek+0x54>
      ticks = 1;
 80047d8:	2301      	movs	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
    }
  }
  
  if (xQueuePeek(queue_id, &event.value.v, ticks) == pdTRUE) 
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	3304      	adds	r3, #4
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	4619      	mov	r1, r3
 80047e6:	68b8      	ldr	r0, [r7, #8]
 80047e8:	f000 fc7a 	bl	80050e0 <xQueuePeek>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <osMessagePeek+0x70>
  {
    /* We have mail */
    event.status = osEventMessage;
 80047f2:	2310      	movs	r3, #16
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e006      	b.n	8004806 <osMessagePeek+0x7e>
  }
  else 
  {
    event.status = (ticks == 0) ? osOK : osEventTimeout;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <osMessagePeek+0x7a>
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <osMessagePeek+0x7c>
 8004802:	2340      	movs	r3, #64	; 0x40
 8004804:	613b      	str	r3, [r7, #16]
  }
  
  return event;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	461c      	mov	r4, r3
 800480a:	f107 0310 	add.w	r3, r7, #16
 800480e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}

0800481e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 0208 	add.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f04f 32ff 	mov.w	r2, #4294967295
 8004836:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 0208 	add.w	r2, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 0208 	add.w	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d103      	bne.n	80048da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e00c      	b.n	80048f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3308      	adds	r3, #8
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e002      	b.n	80048e8 <vListInsert+0x2e>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d2f6      	bcs.n	80048e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6892      	ldr	r2, [r2, #8]
 8004940:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6852      	ldr	r2, [r2, #4]
 800494a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d103      	bne.n	800495e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049a6:	f001 fdf9 	bl	800659c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	441a      	add	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	3b01      	subs	r3, #1
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d114      	bne.n	8004a26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3310      	adds	r3, #16
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 fa09 	bl	8005e20 <xTaskRemoveFromEventList>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <xQueueGenericReset+0xcc>)
 8004a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	e009      	b.n	8004a3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3310      	adds	r3, #16
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fef7 	bl	800481e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3324      	adds	r3, #36	; 0x24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fef2 	bl	800481e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a3a:	f001 fddf 	bl	80065fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	; 0x38
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <xQueueGenericCreateStatic+0x52>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <xQueueGenericCreateStatic+0x56>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericCreateStatic+0x58>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xQueueGenericCreateStatic+0x7e>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueGenericCreateStatic+0x82>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueGenericCreateStatic+0x84>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61fb      	str	r3, [r7, #28]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aea:	2348      	movs	r3, #72	; 0x48
 8004aec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b48      	cmp	r3, #72	; 0x48
 8004af2:	d00a      	beq.n	8004b0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61bb      	str	r3, [r7, #24]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f843 	bl	8004bb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3730      	adds	r7, #48	; 0x30
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08a      	sub	sp, #40	; 0x28
 8004b3e:	af02      	add	r7, sp, #8
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	613b      	str	r3, [r7, #16]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	e004      	b.n	8004b7a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3348      	adds	r3, #72	; 0x48
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fe0c 	bl	800679c <pvPortMalloc>
 8004b84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	3348      	adds	r3, #72	; 0x48
 8004b90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b9a:	79fa      	ldrb	r2, [r7, #7]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f805 	bl	8004bb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004bac:	69bb      	ldr	r3, [r7, #24]
	}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e002      	b.n	8004bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004be4:	2101      	movs	r1, #1
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	f7ff fec8 	bl	800497c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	; 0x38
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c02:	2300      	movs	r3, #0
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xQueueGenericSend+0x32>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <xQueueGenericSend+0x40>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <xQueueGenericSend+0x44>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <xQueueGenericSend+0x46>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <xQueueGenericSend+0x60>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d103      	bne.n	8004c62 <xQueueGenericSend+0x6e>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <xQueueGenericSend+0x72>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueGenericSend+0x74>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <xQueueGenericSend+0x8e>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	623b      	str	r3, [r7, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c82:	f001 fa91 	bl	80061a8 <xTaskGetSchedulerState>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d102      	bne.n	8004c92 <xQueueGenericSend+0x9e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <xQueueGenericSend+0xa2>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueGenericSend+0xa4>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	61fb      	str	r3, [r7, #28]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cb2:	f001 fc73 	bl	800659c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <xQueueGenericSend+0xd4>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d129      	bne.n	8004d1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cce:	f000 fb69 	bl	80053a4 <prvCopyDataToQueue>
 8004cd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f89d 	bl	8005e20 <xTaskRemoveFromEventList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <xQueueGenericSend+0x1f8>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e00a      	b.n	8004d14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <xQueueGenericSend+0x1f8>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d14:	f001 fc72 	bl	80065fc <vPortExitCritical>
				return pdPASS;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e063      	b.n	8004de4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d22:	f001 fc6b 	bl	80065fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e05c      	b.n	8004de4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d30:	f107 0314 	add.w	r3, r7, #20
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 f8d5 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d3e:	f001 fc5d 	bl	80065fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d42:	f000 fe7f 	bl	8005a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d46:	f001 fc29 	bl	800659c <vPortEnterCritical>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d50:	b25b      	sxtb	r3, r3
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d103      	bne.n	8004d60 <xQueueGenericSend+0x16c>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d66:	b25b      	sxtb	r3, r3
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d103      	bne.n	8004d76 <xQueueGenericSend+0x182>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d76:	f001 fc41 	bl	80065fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d7a:	1d3a      	adds	r2, r7, #4
 8004d7c:	f107 0314 	add.w	r3, r7, #20
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 f8c4 	bl	8005f10 <xTaskCheckForTimeOut>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d124      	bne.n	8004dd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d90:	f000 fc00 	bl	8005594 <prvIsQueueFull>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d018      	beq.n	8004dcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	3310      	adds	r3, #16
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4611      	mov	r1, r2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 f818 	bl	8005dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004daa:	f000 fb8b 	bl	80054c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dae:	f000 fe57 	bl	8005a60 <xTaskResumeAll>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f47f af7c 	bne.w	8004cb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <xQueueGenericSend+0x1f8>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	e772      	b.n	8004cb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dce:	f000 fb79 	bl	80054c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dd2:	f000 fe45 	bl	8005a60 <xTaskResumeAll>
 8004dd6:	e76c      	b.n	8004cb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dda:	f000 fb73 	bl	80054c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dde:	f000 fe3f 	bl	8005a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004de2:	2300      	movs	r3, #0
		}
	}
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3738      	adds	r7, #56	; 0x38
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <xQueueGenericSendFromISR+0x3c>
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <xQueueGenericSendFromISR+0x40>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <xQueueGenericSendFromISR+0x42>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	623b      	str	r3, [r7, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSendFromISR+0x6a>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <xQueueGenericSendFromISR+0x6e>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericSendFromISR+0x70>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61fb      	str	r3, [r7, #28]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e7a:	f001 fc51 	bl	8006720 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	61ba      	str	r2, [r7, #24]
 8004e94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <xQueueGenericSendFromISR+0xbc>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d12c      	bne.n	8004f06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ebc:	f000 fa72 	bl	80053a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ec0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d112      	bne.n	8004ef0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	3324      	adds	r3, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 ffa2 	bl	8005e20 <xTaskRemoveFromEventList>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00e      	beq.n	8004f00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	b25a      	sxtb	r2, r3
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f00:	2301      	movs	r3, #1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f04:	e001      	b.n	8004f0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3738      	adds	r7, #56	; 0x38
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xQueueReceive+0x30>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	623b      	str	r3, [r7, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <xQueueReceive+0x3e>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <xQueueReceive+0x42>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <xQueueReceive+0x44>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xQueueReceive+0x5e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	61fb      	str	r3, [r7, #28]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f7e:	f001 f913 	bl	80061a8 <xTaskGetSchedulerState>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xQueueReceive+0x6e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <xQueueReceive+0x72>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <xQueueReceive+0x74>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xQueueReceive+0x8e>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	61bb      	str	r3, [r7, #24]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fae:	f001 faf5 	bl	800659c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01f      	beq.n	8004ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc2:	f000 fa59 	bl	8005478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	3310      	adds	r3, #16
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ff20 	bl	8005e20 <xTaskRemoveFromEventList>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	; (80050dc <xQueueReceive+0x1bc>)
 8004fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ff6:	f001 fb01 	bl	80065fc <vPortExitCritical>
				return pdPASS;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e069      	b.n	80050d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005004:	f001 fafa 	bl	80065fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005008:	2300      	movs	r3, #0
 800500a:	e062      	b.n	80050d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f000 ff64 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005020:	f001 faec 	bl	80065fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005024:	f000 fd0e 	bl	8005a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005028:	f001 fab8 	bl	800659c <vPortEnterCritical>
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005032:	b25b      	sxtb	r3, r3
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d103      	bne.n	8005042 <xQueueReceive+0x122>
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005048:	b25b      	sxtb	r3, r3
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d103      	bne.n	8005058 <xQueueReceive+0x138>
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005058:	f001 fad0 	bl	80065fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800505c:	1d3a      	adds	r2, r7, #4
 800505e:	f107 0310 	add.w	r3, r7, #16
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 ff53 	bl	8005f10 <xTaskCheckForTimeOut>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d123      	bne.n	80050b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	f000 fa79 	bl	8005568 <prvIsQueueEmpty>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fea7 	bl	8005dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800508a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508c:	f000 fa1a 	bl	80054c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005090:	f000 fce6 	bl	8005a60 <xTaskResumeAll>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d189      	bne.n	8004fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <xQueueReceive+0x1bc>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e780      	b.n	8004fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ae:	f000 fa09 	bl	80054c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b2:	f000 fcd5 	bl	8005a60 <xTaskResumeAll>
 80050b6:	e77a      	b.n	8004fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ba:	f000 fa03 	bl	80054c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050be:	f000 fccf 	bl	8005a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c4:	f000 fa50 	bl	8005568 <prvIsQueueEmpty>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f43f af6f 	beq.w	8004fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3730      	adds	r7, #48	; 0x30
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <xQueuePeek>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08e      	sub	sp, #56	; 0x38
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xQueuePeek+0x30>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <xQueuePeek+0x3e>
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <xQueuePeek+0x42>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <xQueuePeek+0x44>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <xQueuePeek+0x5e>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	623b      	str	r3, [r7, #32]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800513e:	f001 f833 	bl	80061a8 <xTaskGetSchedulerState>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <xQueuePeek+0x6e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <xQueuePeek+0x72>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <xQueuePeek+0x74>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueuePeek+0x8e>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	61fb      	str	r3, [r7, #28]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueuePeek+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800516e:	f001 fa15 	bl	800659c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d021      	beq.n	80051c2 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005188:	f000 f976 	bl	8005478 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005190:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	3324      	adds	r3, #36	; 0x24
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fe3e 	bl	8005e20 <xTaskRemoveFromEventList>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <xQueuePeek+0x1c0>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051ba:	f001 fa1f 	bl	80065fc <vPortExitCritical>
				return pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	e069      	b.n	8005296 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c8:	f001 fa18 	bl	80065fc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e062      	b.n	8005296 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d6:	f107 0314 	add.w	r3, r7, #20
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fe82 	bl	8005ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e0:	2301      	movs	r3, #1
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051e4:	f001 fa0a 	bl	80065fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e8:	f000 fc2c 	bl	8005a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ec:	f001 f9d6 	bl	800659c <vPortEnterCritical>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d103      	bne.n	8005206 <xQueuePeek+0x126>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520c:	b25b      	sxtb	r3, r3
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d103      	bne.n	800521c <xQueuePeek+0x13c>
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521c:	f001 f9ee 	bl	80065fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005220:	1d3a      	adds	r2, r7, #4
 8005222:	f107 0314 	add.w	r3, r7, #20
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fe71 	bl	8005f10 <xTaskCheckForTimeOut>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d123      	bne.n	800527c <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 f997 	bl	8005568 <prvIsQueueEmpty>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fdc5 	bl	8005dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800524e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005250:	f000 f938 	bl	80054c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005254:	f000 fc04 	bl	8005a60 <xTaskResumeAll>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d187      	bne.n	800516e <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <xQueuePeek+0x1c0>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	e77e      	b.n	800516e <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8005270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005272:	f000 f927 	bl	80054c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005276:	f000 fbf3 	bl	8005a60 <xTaskResumeAll>
 800527a:	e778      	b.n	800516e <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800527c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800527e:	f000 f921 	bl	80054c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005282:	f000 fbed 	bl	8005a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005288:	f000 f96e 	bl	8005568 <prvIsQueueEmpty>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f43f af6d 	beq.w	800516e <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005294:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005296:	4618      	mov	r0, r3
 8005298:	3738      	adds	r7, #56	; 0x38
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08e      	sub	sp, #56	; 0x38
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	623b      	str	r3, [r7, #32]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <xQueueReceiveFromISR+0x3a>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <xQueueReceiveFromISR+0x3e>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <xQueueReceiveFromISR+0x40>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61fb      	str	r3, [r7, #28]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052fe:	f001 fa0f 	bl	8006720 <vPortValidateInterruptPriority>
	__asm volatile
 8005302:	f3ef 8211 	mrs	r2, BASEPRI
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	61ba      	str	r2, [r7, #24]
 8005318:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800531a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d02f      	beq.n	800538a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005338:	f000 f89e 	bl	8005478 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	1e5a      	subs	r2, r3, #1
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d112      	bne.n	8005374 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	3310      	adds	r3, #16
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fd60 	bl	8005e20 <xTaskRemoveFromEventList>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e007      	b.n	8005384 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005378:	3301      	adds	r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	b25a      	sxtb	r2, r3
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	637b      	str	r3, [r7, #52]	; 0x34
 8005388:	e001      	b.n	800538e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f383 8811 	msr	BASEPRI, r3
}
 8005398:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800539c:	4618      	mov	r0, r3
 800539e:	3738      	adds	r7, #56	; 0x38
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d14d      	bne.n	8005466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 ff08 	bl	80061e4 <xTaskPriorityDisinherit>
 80053d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	e043      	b.n	8005466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d119      	bne.n	8005418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6898      	ldr	r0, [r3, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	461a      	mov	r2, r3
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	f002 faf5 	bl	80079de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	441a      	add	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d32b      	bcc.n	8005466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	e026      	b.n	8005466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68d8      	ldr	r0, [r3, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	461a      	mov	r2, r3
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	f002 fadb 	bl	80079de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	425b      	negs	r3, r3
 8005432:	441a      	add	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d207      	bcs.n	8005454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	425b      	negs	r3, r3
 800544e:	441a      	add	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d105      	bne.n	8005466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	3b01      	subs	r3, #1
 8005464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800546e:	697b      	ldr	r3, [r7, #20]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	441a      	add	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d303      	bcc.n	80054ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68d9      	ldr	r1, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	461a      	mov	r2, r3
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f002 fa91 	bl	80079de <memcpy>
	}
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054cc:	f001 f866 	bl	800659c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d8:	e011      	b.n	80054fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d012      	beq.n	8005508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3324      	adds	r3, #36	; 0x24
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fc9a 	bl	8005e20 <xTaskRemoveFromEventList>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054f2:	f000 fd6f 	bl	8005fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	dce9      	bgt.n	80054da <prvUnlockQueue+0x16>
 8005506:	e000      	b.n	800550a <prvUnlockQueue+0x46>
					break;
 8005508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005512:	f001 f873 	bl	80065fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005516:	f001 f841 	bl	800659c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005522:	e011      	b.n	8005548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3310      	adds	r3, #16
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fc75 	bl	8005e20 <xTaskRemoveFromEventList>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800553c:	f000 fd4a 	bl	8005fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005540:	7bbb      	ldrb	r3, [r7, #14]
 8005542:	3b01      	subs	r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800554c:	2b00      	cmp	r3, #0
 800554e:	dce9      	bgt.n	8005524 <prvUnlockQueue+0x60>
 8005550:	e000      	b.n	8005554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	22ff      	movs	r2, #255	; 0xff
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800555c:	f001 f84e 	bl	80065fc <vPortExitCritical>
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005570:	f001 f814 	bl	800659c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e001      	b.n	8005586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005586:	f001 f839 	bl	80065fc <vPortExitCritical>

	return xReturn;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800559c:	f000 fffe 	bl	800659c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d102      	bne.n	80055b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055ac:	2301      	movs	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e001      	b.n	80055b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055b6:	f001 f821 	bl	80065fc <vPortExitCritical>

	return xReturn;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08e      	sub	sp, #56	; 0x38
 80055c8:	af04      	add	r7, sp, #16
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	623b      	str	r3, [r7, #32]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xTaskCreateStatic+0x46>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	61fb      	str	r3, [r7, #28]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800560a:	23a0      	movs	r3, #160	; 0xa0
 800560c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2ba0      	cmp	r3, #160	; 0xa0
 8005612:	d00a      	beq.n	800562a <xTaskCreateStatic+0x66>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61bb      	str	r3, [r7, #24]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <xTaskCreateStatic+0xaa>
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01b      	beq.n	800566e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800563e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	2202      	movs	r2, #2
 8005644:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005648:	2300      	movs	r3, #0
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f851 	bl	8005708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005668:	f000 f8e4 	bl	8005834 <prvAddNewTaskToReadyList>
 800566c:	e001      	b.n	8005672 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005672:	697b      	ldr	r3, [r7, #20]
	}
 8005674:	4618      	mov	r0, r3
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08c      	sub	sp, #48	; 0x30
 8005680:	af04      	add	r7, sp, #16
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f883 	bl	800679c <pvPortMalloc>
 8005696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00e      	beq.n	80056bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800569e:	20a0      	movs	r0, #160	; 0xa0
 80056a0:	f001 f87c 	bl	800679c <pvPortMalloc>
 80056a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
 80056b2:	e005      	b.n	80056c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056b4:	6978      	ldr	r0, [r7, #20]
 80056b6:	f001 f935 	bl	8006924 <vPortFree>
 80056ba:	e001      	b.n	80056c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	2300      	movs	r3, #0
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	9302      	str	r3, [sp, #8]
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f80f 	bl	8005708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ea:	69f8      	ldr	r0, [r7, #28]
 80056ec:	f000 f8a2 	bl	8005834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e002      	b.n	80056fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056f6:	f04f 33ff 	mov.w	r3, #4294967295
 80056fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056fc:	69bb      	ldr	r3, [r7, #24]
	}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005720:	3b01      	subs	r3, #1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <prvInitialiseNewTask+0x48>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	617b      	str	r3, [r7, #20]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e012      	b.n	800577c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	7819      	ldrb	r1, [r3, #0]
 800575e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	3334      	adds	r3, #52	; 0x34
 8005766:	460a      	mov	r2, r1
 8005768:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d9e9      	bls.n	8005756 <prvInitialiseNewTask+0x4e>
 8005782:	e000      	b.n	8005786 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005784:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2b06      	cmp	r3, #6
 8005792:	d901      	bls.n	8005798 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005794:	2306      	movs	r3, #6
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2200      	movs	r2, #0
 80057a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff f854 	bl	800485c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	3318      	adds	r3, #24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff f84f 	bl	800485c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	f1c3 0207 	rsb	r2, r3, #7
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	334c      	adds	r3, #76	; 0x4c
 80057e8:	224c      	movs	r2, #76	; 0x4c
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f002 f813 	bl	8007818 <memset>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <prvInitialiseNewTask+0x120>)
 80057f6:	651a      	str	r2, [r3, #80]	; 0x50
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <prvInitialiseNewTask+0x124>)
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <prvInitialiseNewTask+0x128>)
 8005802:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	69b8      	ldr	r0, [r7, #24]
 800580a:	f000 fdd7 	bl	80063bc <pxPortInitialiseStack>
 800580e:	4602      	mov	r2, r0
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005820:	bf00      	nop
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20002b08 	.word	0x20002b08
 800582c:	20002b70 	.word	0x20002b70
 8005830:	20002bd8 	.word	0x20002bd8

08005834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800583c:	f000 feae 	bl	800659c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <prvAddNewTaskToReadyList+0xb8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	4a29      	ldr	r2, [pc, #164]	; (80058ec <prvAddNewTaskToReadyList+0xb8>)
 8005848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800584a:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <prvAddNewTaskToReadyList+0xbc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005852:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <prvAddNewTaskToReadyList+0xbc>)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005858:	4b24      	ldr	r3, [pc, #144]	; (80058ec <prvAddNewTaskToReadyList+0xb8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d110      	bne.n	8005882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005860:	f000 fbdc 	bl	800601c <prvInitialiseTaskLists>
 8005864:	e00d      	b.n	8005882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005866:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <prvAddNewTaskToReadyList+0xc0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <prvAddNewTaskToReadyList+0xbc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d802      	bhi.n	8005882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <prvAddNewTaskToReadyList+0xbc>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <prvAddNewTaskToReadyList+0xc4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <prvAddNewTaskToReadyList+0xc4>)
 800588a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	409a      	lsls	r2, r3
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <prvAddNewTaskToReadyList+0xc8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	4a18      	ldr	r2, [pc, #96]	; (80058fc <prvAddNewTaskToReadyList+0xc8>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <prvAddNewTaskToReadyList+0xcc>)
 80058ac:	441a      	add	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7fe ffdd 	bl	8004874 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058ba:	f000 fe9f 	bl	80065fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <prvAddNewTaskToReadyList+0xc0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <prvAddNewTaskToReadyList+0xbc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d207      	bcs.n	80058e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <prvAddNewTaskToReadyList+0xd0>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200006bc 	.word	0x200006bc
 80058f0:	200005bc 	.word	0x200005bc
 80058f4:	200006c8 	.word	0x200006c8
 80058f8:	200006d8 	.word	0x200006d8
 80058fc:	200006c4 	.word	0x200006c4
 8005900:	200005c0 	.word	0x200005c0
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <vTaskDelay+0x60>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <vTaskDelay+0x30>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005938:	f000 f884 	bl	8005a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800593c:	2100      	movs	r1, #0
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fcd6 	bl	80062f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005944:	f000 f88c 	bl	8005a60 <xTaskResumeAll>
 8005948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <vTaskDelay+0x64>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	200006e4 	.word	0x200006e4
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800597e:	463a      	mov	r2, r7
 8005980:	1d39      	adds	r1, r7, #4
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4618      	mov	r0, r3
 8005988:	f7fc f960 	bl	8001c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	9202      	str	r2, [sp, #8]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	2300      	movs	r3, #0
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2300      	movs	r3, #0
 800599c:	460a      	mov	r2, r1
 800599e:	4921      	ldr	r1, [pc, #132]	; (8005a24 <vTaskStartScheduler+0xb4>)
 80059a0:	4821      	ldr	r0, [pc, #132]	; (8005a28 <vTaskStartScheduler+0xb8>)
 80059a2:	f7ff fe0f 	bl	80055c4 <xTaskCreateStatic>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <vTaskStartScheduler+0xbc>)
 80059aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059ac:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <vTaskStartScheduler+0xbc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e001      	b.n	80059be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d11b      	bne.n	80059fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	613b      	str	r3, [r7, #16]
}
 80059d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <vTaskStartScheduler+0xc0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	334c      	adds	r3, #76	; 0x4c
 80059de:	4a15      	ldr	r2, [pc, #84]	; (8005a34 <vTaskStartScheduler+0xc4>)
 80059e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <vTaskStartScheduler+0xc8>)
 80059e4:	f04f 32ff 	mov.w	r2, #4294967295
 80059e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <vTaskStartScheduler+0xcc>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <vTaskStartScheduler+0xd0>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059f6:	f000 fd5f 	bl	80064b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059fa:	e00e      	b.n	8005a1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d10a      	bne.n	8005a1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <vTaskStartScheduler+0xa8>
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	0800a7b4 	.word	0x0800a7b4
 8005a28:	08005fed 	.word	0x08005fed
 8005a2c:	200006e0 	.word	0x200006e0
 8005a30:	200005bc 	.word	0x200005bc
 8005a34:	20000068 	.word	0x20000068
 8005a38:	200006dc 	.word	0x200006dc
 8005a3c:	200006c8 	.word	0x200006c8
 8005a40:	200006c0 	.word	0x200006c0

08005a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a48:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <vTaskSuspendAll+0x18>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	4a03      	ldr	r2, [pc, #12]	; (8005a5c <vTaskSuspendAll+0x18>)
 8005a50:	6013      	str	r3, [r2, #0]
}
 8005a52:	bf00      	nop
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	200006e4 	.word	0x200006e4

08005a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a6e:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <xTaskResumeAll+0x114>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <xTaskResumeAll+0x2c>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	603b      	str	r3, [r7, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a8c:	f000 fd86 	bl	800659c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <xTaskResumeAll+0x114>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	4a37      	ldr	r2, [pc, #220]	; (8005b74 <xTaskResumeAll+0x114>)
 8005a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a9a:	4b36      	ldr	r3, [pc, #216]	; (8005b74 <xTaskResumeAll+0x114>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d161      	bne.n	8005b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aa2:	4b35      	ldr	r3, [pc, #212]	; (8005b78 <xTaskResumeAll+0x118>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d05d      	beq.n	8005b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aaa:	e02e      	b.n	8005b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005aac:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <xTaskResumeAll+0x11c>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe ff36 	bl	800492a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe ff31 	bl	800492a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <xTaskResumeAll+0x120>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <xTaskResumeAll+0x120>)
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a27      	ldr	r2, [pc, #156]	; (8005b84 <xTaskResumeAll+0x124>)
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe febf 	bl	8004874 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <xTaskResumeAll+0x128>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <xTaskResumeAll+0x12c>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b0a:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <xTaskResumeAll+0x11c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1cc      	bne.n	8005aac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b18:	f000 fb22 	bl	8006160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <xTaskResumeAll+0x130>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b28:	f000 f836 	bl	8005b98 <xTaskIncrementTick>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005b32:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <xTaskResumeAll+0x12c>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f1      	bne.n	8005b28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <xTaskResumeAll+0x130>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <xTaskResumeAll+0x12c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <xTaskResumeAll+0x134>)
 8005b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b66:	f000 fd49 	bl	80065fc <vPortExitCritical>

	return xAlreadyYielded;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	200006e4 	.word	0x200006e4
 8005b78:	200006bc 	.word	0x200006bc
 8005b7c:	2000067c 	.word	0x2000067c
 8005b80:	200006c4 	.word	0x200006c4
 8005b84:	200005c0 	.word	0x200005c0
 8005b88:	200005bc 	.word	0x200005bc
 8005b8c:	200006d0 	.word	0x200006d0
 8005b90:	200006cc 	.word	0x200006cc
 8005b94:	e000ed04 	.word	0xe000ed04

08005b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba2:	4b51      	ldr	r3, [pc, #324]	; (8005ce8 <xTaskIncrementTick+0x150>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 808d 	bne.w	8005cc6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bac:	4b4f      	ldr	r3, [pc, #316]	; (8005cec <xTaskIncrementTick+0x154>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb4:	4a4d      	ldr	r2, [pc, #308]	; (8005cec <xTaskIncrementTick+0x154>)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d120      	bne.n	8005c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bc0:	4b4b      	ldr	r3, [pc, #300]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	603b      	str	r3, [r7, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xTaskIncrementTick+0x46>
 8005be0:	4b43      	ldr	r3, [pc, #268]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <xTaskIncrementTick+0x15c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a41      	ldr	r2, [pc, #260]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4a41      	ldr	r2, [pc, #260]	; (8005cf4 <xTaskIncrementTick+0x15c>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <xTaskIncrementTick+0x160>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a3f      	ldr	r2, [pc, #252]	; (8005cf8 <xTaskIncrementTick+0x160>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	f000 faaf 	bl	8006160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <xTaskIncrementTick+0x164>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d34d      	bcc.n	8005ca8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0c:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <xTaskIncrementTick+0x82>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xTaskIncrementTick+0x84>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <xTaskIncrementTick+0x164>)
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	601a      	str	r2, [r3, #0]
					break;
 8005c28:	e03e      	b.n	8005ca8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c2a:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <xTaskIncrementTick+0x158>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d203      	bcs.n	8005c4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c42:	4a2e      	ldr	r2, [pc, #184]	; (8005cfc <xTaskIncrementTick+0x164>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]
						break;
 8005c48:	e02e      	b.n	8005ca8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe fe6b 	bl	800492a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fe62 	bl	800492a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <xTaskIncrementTick+0x168>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <xTaskIncrementTick+0x168>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <xTaskIncrementTick+0x16c>)
 8005c86:	441a      	add	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f7fe fdf0 	bl	8004874 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <xTaskIncrementTick+0x170>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3b4      	bcc.n	8005c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca6:	e7b1      	b.n	8005c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <xTaskIncrementTick+0x170>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	4915      	ldr	r1, [pc, #84]	; (8005d04 <xTaskIncrementTick+0x16c>)
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d907      	bls.n	8005cd0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e004      	b.n	8005cd0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <xTaskIncrementTick+0x174>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	4a0f      	ldr	r2, [pc, #60]	; (8005d0c <xTaskIncrementTick+0x174>)
 8005cce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTaskIncrementTick+0x178>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cdc:	697b      	ldr	r3, [r7, #20]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200006e4 	.word	0x200006e4
 8005cec:	200006c0 	.word	0x200006c0
 8005cf0:	20000674 	.word	0x20000674
 8005cf4:	20000678 	.word	0x20000678
 8005cf8:	200006d4 	.word	0x200006d4
 8005cfc:	200006dc 	.word	0x200006dc
 8005d00:	200006c4 	.word	0x200006c4
 8005d04:	200005c0 	.word	0x200005c0
 8005d08:	200005bc 	.word	0x200005bc
 8005d0c:	200006cc 	.word	0x200006cc
 8005d10:	200006d0 	.word	0x200006d0

08005d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d1a:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <vTaskSwitchContext+0xac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d22:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <vTaskSwitchContext+0xb0>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d28:	e044      	b.n	8005db4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005d2a:	4b26      	ldr	r3, [pc, #152]	; (8005dc4 <vTaskSwitchContext+0xb0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d30:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <vTaskSwitchContext+0xb4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	fab3 f383 	clz	r3, r3
 8005d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
 8005d40:	f1c3 031f 	rsb	r3, r3, #31
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	4921      	ldr	r1, [pc, #132]	; (8005dcc <vTaskSwitchContext+0xb8>)
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	607b      	str	r3, [r7, #4]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vTaskSwitchContext+0x5a>
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <vTaskSwitchContext+0xb8>)
 8005d7c:	4413      	add	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3308      	adds	r3, #8
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d104      	bne.n	8005da0 <vTaskSwitchContext+0x8c>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <vTaskSwitchContext+0xbc>)
 8005da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <vTaskSwitchContext+0xbc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	334c      	adds	r3, #76	; 0x4c
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <vTaskSwitchContext+0xc0>)
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	200006e4 	.word	0x200006e4
 8005dc4:	200006d0 	.word	0x200006d0
 8005dc8:	200006c4 	.word	0x200006c4
 8005dcc:	200005c0 	.word	0x200005c0
 8005dd0:	200005bc 	.word	0x200005bc
 8005dd4:	20000068 	.word	0x20000068

08005dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <vTaskPlaceOnEventList+0x44>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3318      	adds	r3, #24
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fe fd57 	bl	80048ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6838      	ldr	r0, [r7, #0]
 8005e10:	f000 fa6e 	bl	80062f0 <prvAddCurrentTaskToDelayedList>
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	200005bc 	.word	0x200005bc

08005e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60fb      	str	r3, [r7, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fd6a 	bl	800492a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <xTaskRemoveFromEventList+0xac>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11c      	bne.n	8005e98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	3304      	adds	r3, #4
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fd61 	bl	800492a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <xTaskRemoveFromEventList+0xb0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <xTaskRemoveFromEventList+0xb0>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <xTaskRemoveFromEventList+0xb4>)
 8005e88:	441a      	add	r2, r3
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fe fcef 	bl	8004874 <vListInsertEnd>
 8005e96:	e005      	b.n	8005ea4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	480e      	ldr	r0, [pc, #56]	; (8005ed8 <xTaskRemoveFromEventList+0xb8>)
 8005ea0:	f7fe fce8 	bl	8004874 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <xTaskRemoveFromEventList+0xbc>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d905      	bls.n	8005ebe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <xTaskRemoveFromEventList+0xc0>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e001      	b.n	8005ec2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ec2:	697b      	ldr	r3, [r7, #20]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200006e4 	.word	0x200006e4
 8005ed0:	200006c4 	.word	0x200006c4
 8005ed4:	200005c0 	.word	0x200005c0
 8005ed8:	2000067c 	.word	0x2000067c
 8005edc:	200005bc 	.word	0x200005bc
 8005ee0:	200006d0 	.word	0x200006d0

08005ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <vTaskInternalSetTimeOutState+0x24>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <vTaskInternalSetTimeOutState+0x28>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	200006d4 	.word	0x200006d4
 8005f0c:	200006c0 	.word	0x200006c0

08005f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	613b      	str	r3, [r7, #16]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60fb      	str	r3, [r7, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005f52:	f000 fb23 	bl	800659c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f56:	4b1d      	ldr	r3, [pc, #116]	; (8005fcc <xTaskCheckForTimeOut+0xbc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d102      	bne.n	8005f76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	e023      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <xTaskCheckForTimeOut+0xc0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d007      	beq.n	8005f92 <xTaskCheckForTimeOut+0x82>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e015      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d20b      	bcs.n	8005fb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ff9b 	bl	8005ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	e004      	b.n	8005fbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f000 fb1d 	bl	80065fc <vPortExitCritical>

	return xReturn;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200006c0 	.word	0x200006c0
 8005fd0:	200006d4 	.word	0x200006d4

08005fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <vTaskMissedYield+0x14>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	200006d0 	.word	0x200006d0

08005fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ff4:	f000 f852 	bl	800609c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <prvIdleTask+0x28>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d9f9      	bls.n	8005ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <prvIdleTask+0x2c>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006010:	e7f0      	b.n	8005ff4 <prvIdleTask+0x8>
 8006012:	bf00      	nop
 8006014:	200005c0 	.word	0x200005c0
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006022:	2300      	movs	r3, #0
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	e00c      	b.n	8006042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4a12      	ldr	r2, [pc, #72]	; (800607c <prvInitialiseTaskLists+0x60>)
 8006034:	4413      	add	r3, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fbf1 	bl	800481e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b06      	cmp	r3, #6
 8006046:	d9ef      	bls.n	8006028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006048:	480d      	ldr	r0, [pc, #52]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800604a:	f7fe fbe8 	bl	800481e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800604e:	480d      	ldr	r0, [pc, #52]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006050:	f7fe fbe5 	bl	800481e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006054:	480c      	ldr	r0, [pc, #48]	; (8006088 <prvInitialiseTaskLists+0x6c>)
 8006056:	f7fe fbe2 	bl	800481e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <prvInitialiseTaskLists+0x70>)
 800605c:	f7fe fbdf 	bl	800481e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <prvInitialiseTaskLists+0x74>)
 8006062:	f7fe fbdc 	bl	800481e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <prvInitialiseTaskLists+0x78>)
 8006068:	4a05      	ldr	r2, [pc, #20]	; (8006080 <prvInitialiseTaskLists+0x64>)
 800606a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvInitialiseTaskLists+0x7c>)
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <prvInitialiseTaskLists+0x68>)
 8006070:	601a      	str	r2, [r3, #0]
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200005c0 	.word	0x200005c0
 8006080:	2000064c 	.word	0x2000064c
 8006084:	20000660 	.word	0x20000660
 8006088:	2000067c 	.word	0x2000067c
 800608c:	20000690 	.word	0x20000690
 8006090:	200006a8 	.word	0x200006a8
 8006094:	20000674 	.word	0x20000674
 8006098:	20000678 	.word	0x20000678

0800609c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060a2:	e019      	b.n	80060d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060a4:	f000 fa7a 	bl	800659c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <prvCheckTasksWaitingTermination+0x50>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fc38 	bl	800492a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3b01      	subs	r3, #1
 80060c0:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <prvCheckTasksWaitingTermination+0x54>)
 80060c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ce:	f000 fa95 	bl	80065fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f810 	bl	80060f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <prvCheckTasksWaitingTermination+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e1      	bne.n	80060a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000690 	.word	0x20000690
 80060f0:	200006bc 	.word	0x200006bc
 80060f4:	200006a4 	.word	0x200006a4

080060f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	334c      	adds	r3, #76	; 0x4c
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fba3 	bl	8007850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fc03 	bl	8006924 <vPortFree>
				vPortFree( pxTCB );
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fc00 	bl	8006924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006124:	e018      	b.n	8006158 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800612c:	2b01      	cmp	r3, #1
 800612e:	d103      	bne.n	8006138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fbf7 	bl	8006924 <vPortFree>
	}
 8006136:	e00f      	b.n	8006158 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800613e:	2b02      	cmp	r3, #2
 8006140:	d00a      	beq.n	8006158 <prvDeleteTCB+0x60>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <prvDeleteTCB+0x5e>
	}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <prvResetNextTaskUnblockTime+0x40>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <prvResetNextTaskUnblockTime+0x14>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <prvResetNextTaskUnblockTime+0x16>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <prvResetNextTaskUnblockTime+0x44>)
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006182:	e008      	b.n	8006196 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvResetNextTaskUnblockTime+0x40>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <prvResetNextTaskUnblockTime+0x44>)
 8006194:	6013      	str	r3, [r2, #0]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr
 80061a0:	20000674 	.word	0x20000674
 80061a4:	200006dc 	.word	0x200006dc

080061a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061ae:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <xTaskGetSchedulerState+0x34>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061b6:	2301      	movs	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	e008      	b.n	80061ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <xTaskGetSchedulerState+0x38>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061c4:	2302      	movs	r3, #2
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	e001      	b.n	80061ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061ca:	2300      	movs	r3, #0
 80061cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ce:	687b      	ldr	r3, [r7, #4]
	}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	200006c8 	.word	0x200006c8
 80061e0:	200006e4 	.word	0x200006e4

080061e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06e      	beq.n	80062d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061fa:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <xTaskPriorityDisinherit+0x100>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	429a      	cmp	r2, r3
 8006202:	d00a      	beq.n	800621a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	429a      	cmp	r2, r3
 800624c:	d044      	beq.n	80062d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006252:	2b00      	cmp	r3, #0
 8006254:	d140      	bne.n	80062d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3304      	adds	r3, #4
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fb65 	bl	800492a <uxListRemove>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d115      	bne.n	8006292 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626a:	491f      	ldr	r1, [pc, #124]	; (80062e8 <xTaskPriorityDisinherit+0x104>)
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xTaskPriorityDisinherit+0xae>
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2201      	movs	r2, #1
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43da      	mvns	r2, r3
 8006288:	4b18      	ldr	r3, [pc, #96]	; (80062ec <xTaskPriorityDisinherit+0x108>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4013      	ands	r3, r2
 800628e:	4a17      	ldr	r2, [pc, #92]	; (80062ec <xTaskPriorityDisinherit+0x108>)
 8006290:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	f1c3 0207 	rsb	r2, r3, #7
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	2201      	movs	r2, #1
 80062ac:	409a      	lsls	r2, r3
 80062ae:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <xTaskPriorityDisinherit+0x108>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <xTaskPriorityDisinherit+0x108>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <xTaskPriorityDisinherit+0x104>)
 80062c6:	441a      	add	r2, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fe fad0 	bl	8004874 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062d8:	697b      	ldr	r3, [r7, #20]
	}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	200005bc 	.word	0x200005bc
 80062e8:	200005c0 	.word	0x200005c0
 80062ec:	200006c4 	.word	0x200006c4

080062f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062fa:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006300:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3304      	adds	r3, #4
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fb0f 	bl	800492a <uxListRemove>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10b      	bne.n	800632a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006312:	4b24      	ldr	r3, [pc, #144]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2201      	movs	r2, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43da      	mvns	r2, r3
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4013      	ands	r3, r2
 8006326:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006328:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d10a      	bne.n	8006348 <prvAddCurrentTaskToDelayedList+0x58>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006338:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	481a      	ldr	r0, [pc, #104]	; (80063ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006342:	f7fe fa97 	bl	8004874 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006346:	e026      	b.n	8006396 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	429a      	cmp	r2, r3
 800635e:	d209      	bcs.n	8006374 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe faa4 	bl	80048ba <vListInsert>
}
 8006372:	e010      	b.n	8006396 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006374:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe fa9a 	bl	80048ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	d202      	bcs.n	8006396 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006390:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6013      	str	r3, [r2, #0]
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	200006c0 	.word	0x200006c0
 80063a4:	200005bc 	.word	0x200005bc
 80063a8:	200006c4 	.word	0x200006c4
 80063ac:	200006a8 	.word	0x200006a8
 80063b0:	20000678 	.word	0x20000678
 80063b4:	20000674 	.word	0x20000674
 80063b8:	200006dc 	.word	0x200006dc

080063bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3b04      	subs	r3, #4
 80063cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b04      	subs	r3, #4
 80063da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063ec:	4a08      	ldr	r2, [pc, #32]	; (8006410 <pxPortInitialiseStack+0x54>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b14      	subs	r3, #20
 80063f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b20      	subs	r3, #32
 8006402:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	08006415 	.word	0x08006415

08006414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvTaskExitError+0x54>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d00a      	beq.n	800643e <prvTaskExitError+0x2a>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	60fb      	str	r3, [r7, #12]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <prvTaskExitError+0x28>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60bb      	str	r3, [r7, #8]
}
 8006450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006452:	bf00      	nop
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0fc      	beq.n	8006454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	2000000c 	.word	0x2000000c
 800646c:	00000000 	.word	0x00000000

08006470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <pxCurrentTCBConst2>)
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	6808      	ldr	r0, [r1, #0]
 8006476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800647a:	f380 8809 	msr	PSP, r0
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f380 8811 	msr	BASEPRI, r0
 800648a:	f04e 0e0d 	orr.w	lr, lr, #13
 800648e:	4770      	bx	lr

08006490 <pxCurrentTCBConst2>:
 8006490:	200005bc 	.word	0x200005bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop

08006498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006498:	4806      	ldr	r0, [pc, #24]	; (80064b4 <prvPortStartFirstTask+0x1c>)
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	6800      	ldr	r0, [r0, #0]
 800649e:	f380 8808 	msr	MSP, r0
 80064a2:	b662      	cpsie	i
 80064a4:	b661      	cpsie	f
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	df00      	svc	0
 80064b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064b2:	bf00      	nop
 80064b4:	e000ed08 	.word	0xe000ed08

080064b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064be:	4b32      	ldr	r3, [pc, #200]	; (8006588 <xPortStartScheduler+0xd0>)
 80064c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22ff      	movs	r2, #255	; 0xff
 80064ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	4b2a      	ldr	r3, [pc, #168]	; (800658c <xPortStartScheduler+0xd4>)
 80064e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064e6:	4b2a      	ldr	r3, [pc, #168]	; (8006590 <xPortStartScheduler+0xd8>)
 80064e8:	2207      	movs	r2, #7
 80064ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ec:	e009      	b.n	8006502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80064ee:	4b28      	ldr	r3, [pc, #160]	; (8006590 <xPortStartScheduler+0xd8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	4a26      	ldr	r2, [pc, #152]	; (8006590 <xPortStartScheduler+0xd8>)
 80064f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d0ef      	beq.n	80064ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <xPortStartScheduler+0xd8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1c3 0307 	rsb	r3, r3, #7
 8006516:	2b04      	cmp	r3, #4
 8006518:	d00a      	beq.n	8006530 <xPortStartScheduler+0x78>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	60bb      	str	r3, [r7, #8]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <xPortStartScheduler+0xd8>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	4a16      	ldr	r2, [pc, #88]	; (8006590 <xPortStartScheduler+0xd8>)
 8006538:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <xPortStartScheduler+0xd8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <xPortStartScheduler+0xd8>)
 8006544:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800654e:	4b11      	ldr	r3, [pc, #68]	; (8006594 <xPortStartScheduler+0xdc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a10      	ldr	r2, [pc, #64]	; (8006594 <xPortStartScheduler+0xdc>)
 8006554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006558:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800655a:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <xPortStartScheduler+0xdc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a0d      	ldr	r2, [pc, #52]	; (8006594 <xPortStartScheduler+0xdc>)
 8006560:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006564:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006566:	f000 f8b9 	bl	80066dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <xPortStartScheduler+0xe0>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006570:	f7ff ff92 	bl	8006498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006574:	f7ff fbce 	bl	8005d14 <vTaskSwitchContext>
	prvTaskExitError();
 8006578:	f7ff ff4c 	bl	8006414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	e000e400 	.word	0xe000e400
 800658c:	200006e8 	.word	0x200006e8
 8006590:	200006ec 	.word	0x200006ec
 8006594:	e000ed20 	.word	0xe000ed20
 8006598:	2000000c 	.word	0x2000000c

0800659c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	607b      	str	r3, [r7, #4]
}
 80065b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <vPortEnterCritical+0x58>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a0d      	ldr	r2, [pc, #52]	; (80065f4 <vPortEnterCritical+0x58>)
 80065be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065c0:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <vPortEnterCritical+0x58>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10f      	bne.n	80065e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <vPortEnterCritical+0x5c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	603b      	str	r3, [r7, #0]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <vPortEnterCritical+0x4a>
	}
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	2000000c 	.word	0x2000000c
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <vPortExitCritical+0x4c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <vPortExitCritical+0x24>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	607b      	str	r3, [r7, #4]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <vPortExitCritical+0x4c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3b01      	subs	r3, #1
 8006626:	4a08      	ldr	r2, [pc, #32]	; (8006648 <vPortExitCritical+0x4c>)
 8006628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800662a:	4b07      	ldr	r3, [pc, #28]	; (8006648 <vPortExitCritical+0x4c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <vPortExitCritical+0x42>
 8006632:	2300      	movs	r3, #0
 8006634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	f383 8811 	msr	BASEPRI, r3
}
 800663c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	2000000c 	.word	0x2000000c
 800664c:	00000000 	.word	0x00000000

08006650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006650:	f3ef 8009 	mrs	r0, PSP
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <pxCurrentTCBConst>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006660:	6010      	str	r0, [r2, #0]
 8006662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800666a:	f380 8811 	msr	BASEPRI, r0
 800666e:	f7ff fb51 	bl	8005d14 <vTaskSwitchContext>
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	6808      	ldr	r0, [r1, #0]
 8006682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006686:	f380 8809 	msr	PSP, r0
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	4770      	bx	lr

08006690 <pxCurrentTCBConst>:
 8006690:	200005bc 	.word	0x200005bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	607b      	str	r3, [r7, #4]
}
 80066b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066b2:	f7ff fa71 	bl	8005b98 <xTaskIncrementTick>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <SysTick_Handler+0x40>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <vPortSetupTimerInterrupt+0x30>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <vPortSetupTimerInterrupt+0x34>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <vPortSetupTimerInterrupt+0x38>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a09      	ldr	r2, [pc, #36]	; (8006718 <vPortSetupTimerInterrupt+0x3c>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	4a08      	ldr	r2, [pc, #32]	; (800671c <vPortSetupTimerInterrupt+0x40>)
 80066fa:	3b01      	subs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fe:	4b03      	ldr	r3, [pc, #12]	; (800670c <vPortSetupTimerInterrupt+0x30>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	e000e010 	.word	0xe000e010
 8006710:	e000e018 	.word	0xe000e018
 8006714:	20000000 	.word	0x20000000
 8006718:	10624dd3 	.word	0x10624dd3
 800671c:	e000e014 	.word	0xe000e014

08006720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006726:	f3ef 8305 	mrs	r3, IPSR
 800672a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	d914      	bls.n	800675c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006732:	4a16      	ldr	r2, [pc, #88]	; (800678c <vPortValidateInterruptPriority+0x6c>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800673c:	4b14      	ldr	r3, [pc, #80]	; (8006790 <vPortValidateInterruptPriority+0x70>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	7afa      	ldrb	r2, [r7, #11]
 8006742:	429a      	cmp	r2, r3
 8006744:	d20a      	bcs.n	800675c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	607b      	str	r3, [r7, #4]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <vPortValidateInterruptPriority+0x74>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <vPortValidateInterruptPriority+0x78>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d90a      	bls.n	8006782 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	603b      	str	r3, [r7, #0]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <vPortValidateInterruptPriority+0x60>
	}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr
 800678c:	e000e3f0 	.word	0xe000e3f0
 8006790:	200006e8 	.word	0x200006e8
 8006794:	e000ed0c 	.word	0xe000ed0c
 8006798:	200006ec 	.word	0x200006ec

0800679c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067a8:	f7ff f94c 	bl	8005a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067ac:	4b58      	ldr	r3, [pc, #352]	; (8006910 <pvPortMalloc+0x174>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067b4:	f000 f910 	bl	80069d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067b8:	4b56      	ldr	r3, [pc, #344]	; (8006914 <pvPortMalloc+0x178>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4013      	ands	r3, r2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 808e 	bne.w	80068e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01d      	beq.n	8006808 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067cc:	2208      	movs	r2, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d014      	beq.n	8006808 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f023 0307 	bic.w	r3, r3, #7
 80067e4:	3308      	adds	r3, #8
 80067e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <pvPortMalloc+0x6c>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	617b      	str	r3, [r7, #20]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d069      	beq.n	80068e2 <pvPortMalloc+0x146>
 800680e:	4b42      	ldr	r3, [pc, #264]	; (8006918 <pvPortMalloc+0x17c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d864      	bhi.n	80068e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006818:	4b40      	ldr	r3, [pc, #256]	; (800691c <pvPortMalloc+0x180>)
 800681a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800681c:	4b3f      	ldr	r3, [pc, #252]	; (800691c <pvPortMalloc+0x180>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006822:	e004      	b.n	800682e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d903      	bls.n	8006840 <pvPortMalloc+0xa4>
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f1      	bne.n	8006824 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006840:	4b33      	ldr	r3, [pc, #204]	; (8006910 <pvPortMalloc+0x174>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	429a      	cmp	r2, r3
 8006848:	d04b      	beq.n	80068e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2208      	movs	r2, #8
 8006850:	4413      	add	r3, r2
 8006852:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad2      	subs	r2, r2, r3
 8006864:	2308      	movs	r3, #8
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	429a      	cmp	r2, r3
 800686a:	d91f      	bls.n	80068ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <pvPortMalloc+0xf8>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	613b      	str	r3, [r7, #16]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068a6:	69b8      	ldr	r0, [r7, #24]
 80068a8:	f000 f8f8 	bl	8006a9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <pvPortMalloc+0x17c>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <pvPortMalloc+0x17c>)
 80068b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <pvPortMalloc+0x17c>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b18      	ldr	r3, [pc, #96]	; (8006920 <pvPortMalloc+0x184>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d203      	bcs.n	80068ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <pvPortMalloc+0x17c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <pvPortMalloc+0x184>)
 80068cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <pvPortMalloc+0x178>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068e2:	f7ff f8bd 	bl	8005a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <pvPortMalloc+0x16a>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <pvPortMalloc+0x168>
	return pvReturn;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20002af8 	.word	0x20002af8
 8006914:	20002b04 	.word	0x20002b04
 8006918:	20002afc 	.word	0x20002afc
 800691c:	20002af0 	.word	0x20002af0
 8006920:	20002b00 	.word	0x20002b00

08006924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d048      	beq.n	80069c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006936:	2308      	movs	r3, #8
 8006938:	425b      	negs	r3, r3
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <vPortFree+0xac>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <vPortFree+0x44>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60fb      	str	r3, [r7, #12]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <vPortFree+0x62>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60bb      	str	r3, [r7, #8]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <vPortFree+0xac>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4013      	ands	r3, r2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d019      	beq.n	80069c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d115      	bne.n	80069c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <vPortFree+0xac>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069ac:	f7ff f84a 	bl	8005a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <vPortFree+0xb0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4413      	add	r3, r2
 80069ba:	4a06      	ldr	r2, [pc, #24]	; (80069d4 <vPortFree+0xb0>)
 80069bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f000 f86c 	bl	8006a9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80069c4:	f7ff f84c 	bl	8005a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20002b04 	.word	0x20002b04
 80069d4:	20002afc 	.word	0x20002afc

080069d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069de:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80069e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069e4:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <prvHeapInit+0xac>)
 80069e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00c      	beq.n	8006a0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3307      	adds	r3, #7
 80069f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <prvHeapInit+0xac>)
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <prvHeapInit+0xb0>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a16:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <prvHeapInit+0xb0>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a24:	2208      	movs	r2, #8
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <prvHeapInit+0xb4>)
 8006a38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <prvHeapInit+0xb4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <prvHeapInit+0xb4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <prvHeapInit+0xb4>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <prvHeapInit+0xb8>)
 8006a66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <prvHeapInit+0xbc>)
 8006a6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <prvHeapInit+0xc0>)
 8006a72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	200006f0 	.word	0x200006f0
 8006a88:	20002af0 	.word	0x20002af0
 8006a8c:	20002af8 	.word	0x20002af8
 8006a90:	20002b00 	.word	0x20002b00
 8006a94:	20002afc 	.word	0x20002afc
 8006a98:	20002b04 	.word	0x20002b04

08006a9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <prvInsertBlockIntoFreeList+0xa8>)
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e002      	b.n	8006ab0 <prvInsertBlockIntoFreeList+0x14>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d8f7      	bhi.n	8006aaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d108      	bne.n	8006ade <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	441a      	add	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	441a      	add	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d118      	bne.n	8006b24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvInsertBlockIntoFreeList+0xac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d00d      	beq.n	8006b1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e008      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <prvInsertBlockIntoFreeList+0xac>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e003      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d002      	beq.n	8006b3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	20002af0 	.word	0x20002af0
 8006b48:	20002af8 	.word	0x20002af8

08006b4c <__cvt>:
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b52:	461f      	mov	r7, r3
 8006b54:	bfbb      	ittet	lt
 8006b56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b5a:	461f      	movlt	r7, r3
 8006b5c:	2300      	movge	r3, #0
 8006b5e:	232d      	movlt	r3, #45	; 0x2d
 8006b60:	b088      	sub	sp, #32
 8006b62:	4614      	mov	r4, r2
 8006b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b68:	7013      	strb	r3, [r2, #0]
 8006b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b70:	f023 0820 	bic.w	r8, r3, #32
 8006b74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b78:	d005      	beq.n	8006b86 <__cvt+0x3a>
 8006b7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b7e:	d100      	bne.n	8006b82 <__cvt+0x36>
 8006b80:	3501      	adds	r5, #1
 8006b82:	2302      	movs	r3, #2
 8006b84:	e000      	b.n	8006b88 <__cvt+0x3c>
 8006b86:	2303      	movs	r3, #3
 8006b88:	aa07      	add	r2, sp, #28
 8006b8a:	9204      	str	r2, [sp, #16]
 8006b8c:	aa06      	add	r2, sp, #24
 8006b8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b92:	e9cd 3500 	strd	r3, r5, [sp]
 8006b96:	4622      	mov	r2, r4
 8006b98:	463b      	mov	r3, r7
 8006b9a:	f000 ffb9 	bl	8007b10 <_dtoa_r>
 8006b9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	d102      	bne.n	8006bac <__cvt+0x60>
 8006ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba8:	07db      	lsls	r3, r3, #31
 8006baa:	d522      	bpl.n	8006bf2 <__cvt+0xa6>
 8006bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bb0:	eb06 0905 	add.w	r9, r6, r5
 8006bb4:	d110      	bne.n	8006bd8 <__cvt+0x8c>
 8006bb6:	7833      	ldrb	r3, [r6, #0]
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d10a      	bne.n	8006bd2 <__cvt+0x86>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f7f9 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc8:	b918      	cbnz	r0, 8006bd2 <__cvt+0x86>
 8006bca:	f1c5 0501 	rsb	r5, r5, #1
 8006bce:	f8ca 5000 	str.w	r5, [sl]
 8006bd2:	f8da 3000 	ldr.w	r3, [sl]
 8006bd6:	4499      	add	r9, r3
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8006be4:	b108      	cbz	r0, 8006bea <__cvt+0x9e>
 8006be6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bea:	2230      	movs	r2, #48	; 0x30
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	454b      	cmp	r3, r9
 8006bf0:	d307      	bcc.n	8006c02 <__cvt+0xb6>
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	b008      	add	sp, #32
 8006bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	9107      	str	r1, [sp, #28]
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e7f0      	b.n	8006bec <__cvt+0xa0>

08006c0a <__exponent>:
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	f803 2b02 	strb.w	r2, [r3], #2
 8006c14:	bfb6      	itet	lt
 8006c16:	222d      	movlt	r2, #45	; 0x2d
 8006c18:	222b      	movge	r2, #43	; 0x2b
 8006c1a:	4249      	neglt	r1, r1
 8006c1c:	2909      	cmp	r1, #9
 8006c1e:	7042      	strb	r2, [r0, #1]
 8006c20:	dd2a      	ble.n	8006c78 <__exponent+0x6e>
 8006c22:	f10d 0207 	add.w	r2, sp, #7
 8006c26:	4617      	mov	r7, r2
 8006c28:	260a      	movs	r6, #10
 8006c2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c2e:	4694      	mov	ip, r2
 8006c30:	fb06 1415 	mls	r4, r6, r5, r1
 8006c34:	3430      	adds	r4, #48	; 0x30
 8006c36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	2c63      	cmp	r4, #99	; 0x63
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c44:	dcf1      	bgt.n	8006c2a <__exponent+0x20>
 8006c46:	3130      	adds	r1, #48	; 0x30
 8006c48:	f1ac 0402 	sub.w	r4, ip, #2
 8006c4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c50:	4622      	mov	r2, r4
 8006c52:	1c41      	adds	r1, r0, #1
 8006c54:	42ba      	cmp	r2, r7
 8006c56:	d30a      	bcc.n	8006c6e <__exponent+0x64>
 8006c58:	f10d 0209 	add.w	r2, sp, #9
 8006c5c:	eba2 020c 	sub.w	r2, r2, ip
 8006c60:	42bc      	cmp	r4, r7
 8006c62:	bf88      	it	hi
 8006c64:	2200      	movhi	r2, #0
 8006c66:	4413      	add	r3, r2
 8006c68:	1a18      	subs	r0, r3, r0
 8006c6a:	b003      	add	sp, #12
 8006c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c76:	e7ed      	b.n	8006c54 <__exponent+0x4a>
 8006c78:	2330      	movs	r3, #48	; 0x30
 8006c7a:	3130      	adds	r1, #48	; 0x30
 8006c7c:	7083      	strb	r3, [r0, #2]
 8006c7e:	70c1      	strb	r1, [r0, #3]
 8006c80:	1d03      	adds	r3, r0, #4
 8006c82:	e7f1      	b.n	8006c68 <__exponent+0x5e>

08006c84 <_printf_float>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	b091      	sub	sp, #68	; 0x44
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c90:	4616      	mov	r6, r2
 8006c92:	461f      	mov	r7, r3
 8006c94:	4605      	mov	r5, r0
 8006c96:	f000 fdc7 	bl	8007828 <_localeconv_r>
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	f7f9 fa56 	bl	8000150 <strlen>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cac:	900a      	str	r0, [sp, #40]	; 0x28
 8006cae:	3307      	adds	r3, #7
 8006cb0:	f023 0307 	bic.w	r3, r3, #7
 8006cb4:	f103 0208 	add.w	r2, r3, #8
 8006cb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8006cc0:	f8c8 2000 	str.w	r2, [r8]
 8006cc4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006cc8:	4652      	mov	r2, sl
 8006cca:	4643      	mov	r3, r8
 8006ccc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cd0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006cd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4b9c      	ldr	r3, [pc, #624]	; (8006f50 <_printf_float+0x2cc>)
 8006cde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ce0:	f7f9 fe94 	bl	8000a0c <__aeabi_dcmpun>
 8006ce4:	bb70      	cbnz	r0, 8006d44 <_printf_float+0xc0>
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	4650      	mov	r0, sl
 8006cec:	4b98      	ldr	r3, [pc, #608]	; (8006f50 <_printf_float+0x2cc>)
 8006cee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf0:	f7f9 fe6e 	bl	80009d0 <__aeabi_dcmple>
 8006cf4:	bb30      	cbnz	r0, 8006d44 <_printf_float+0xc0>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	f7f9 fe5d 	bl	80009bc <__aeabi_dcmplt>
 8006d02:	b110      	cbz	r0, 8006d0a <_printf_float+0x86>
 8006d04:	232d      	movs	r3, #45	; 0x2d
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0a:	4a92      	ldr	r2, [pc, #584]	; (8006f54 <_printf_float+0x2d0>)
 8006d0c:	4b92      	ldr	r3, [pc, #584]	; (8006f58 <_printf_float+0x2d4>)
 8006d0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d12:	bf94      	ite	ls
 8006d14:	4690      	movls	r8, r2
 8006d16:	4698      	movhi	r8, r3
 8006d18:	2303      	movs	r3, #3
 8006d1a:	f04f 0a00 	mov.w	sl, #0
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	f02b 0304 	bic.w	r3, fp, #4
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	4633      	mov	r3, r6
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	9700      	str	r7, [sp, #0]
 8006d2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d30:	f000 f9d6 	bl	80070e0 <_printf_common>
 8006d34:	3001      	adds	r0, #1
 8006d36:	f040 8090 	bne.w	8006e5a <_printf_float+0x1d6>
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	b011      	add	sp, #68	; 0x44
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	4652      	mov	r2, sl
 8006d46:	4643      	mov	r3, r8
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	f7f9 fe5e 	bl	8000a0c <__aeabi_dcmpun>
 8006d50:	b148      	cbz	r0, 8006d66 <_printf_float+0xe2>
 8006d52:	f1b8 0f00 	cmp.w	r8, #0
 8006d56:	bfb8      	it	lt
 8006d58:	232d      	movlt	r3, #45	; 0x2d
 8006d5a:	4a80      	ldr	r2, [pc, #512]	; (8006f5c <_printf_float+0x2d8>)
 8006d5c:	bfb8      	it	lt
 8006d5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d62:	4b7f      	ldr	r3, [pc, #508]	; (8006f60 <_printf_float+0x2dc>)
 8006d64:	e7d3      	b.n	8006d0e <_printf_float+0x8a>
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	d142      	bne.n	8006df6 <_printf_float+0x172>
 8006d70:	2306      	movs	r3, #6
 8006d72:	6063      	str	r3, [r4, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	9206      	str	r2, [sp, #24]
 8006d78:	aa0e      	add	r2, sp, #56	; 0x38
 8006d7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d7e:	aa0d      	add	r2, sp, #52	; 0x34
 8006d80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d84:	9203      	str	r2, [sp, #12]
 8006d86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	4652      	mov	r2, sl
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4628      	mov	r0, r5
 8006d98:	4643      	mov	r3, r8
 8006d9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d9c:	f7ff fed6 	bl	8006b4c <__cvt>
 8006da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da2:	4680      	mov	r8, r0
 8006da4:	2947      	cmp	r1, #71	; 0x47
 8006da6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006da8:	d108      	bne.n	8006dbc <_printf_float+0x138>
 8006daa:	1cc8      	adds	r0, r1, #3
 8006dac:	db02      	blt.n	8006db4 <_printf_float+0x130>
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	4299      	cmp	r1, r3
 8006db2:	dd40      	ble.n	8006e36 <_printf_float+0x1b2>
 8006db4:	f1a9 0902 	sub.w	r9, r9, #2
 8006db8:	fa5f f989 	uxtb.w	r9, r9
 8006dbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dc0:	d81f      	bhi.n	8006e02 <_printf_float+0x17e>
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	3901      	subs	r1, #1
 8006dc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dca:	910d      	str	r1, [sp, #52]	; 0x34
 8006dcc:	f7ff ff1d 	bl	8006c0a <__exponent>
 8006dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	1813      	adds	r3, r2, r0
 8006dd6:	2a01      	cmp	r2, #1
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	dc02      	bgt.n	8006de2 <_printf_float+0x15e>
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	07d2      	lsls	r2, r2, #31
 8006de0:	d501      	bpl.n	8006de6 <_printf_float+0x162>
 8006de2:	3301      	adds	r3, #1
 8006de4:	6123      	str	r3, [r4, #16]
 8006de6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d09b      	beq.n	8006d26 <_printf_float+0xa2>
 8006dee:	232d      	movs	r3, #45	; 0x2d
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e797      	b.n	8006d26 <_printf_float+0xa2>
 8006df6:	2947      	cmp	r1, #71	; 0x47
 8006df8:	d1bc      	bne.n	8006d74 <_printf_float+0xf0>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1ba      	bne.n	8006d74 <_printf_float+0xf0>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7b7      	b.n	8006d72 <_printf_float+0xee>
 8006e02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e06:	d118      	bne.n	8006e3a <_printf_float+0x1b6>
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	dd0b      	ble.n	8006e26 <_printf_float+0x1a2>
 8006e0e:	6121      	str	r1, [r4, #16]
 8006e10:	b913      	cbnz	r3, 8006e18 <_printf_float+0x194>
 8006e12:	6822      	ldr	r2, [r4, #0]
 8006e14:	07d0      	lsls	r0, r2, #31
 8006e16:	d502      	bpl.n	8006e1e <_printf_float+0x19a>
 8006e18:	3301      	adds	r3, #1
 8006e1a:	440b      	add	r3, r1
 8006e1c:	6123      	str	r3, [r4, #16]
 8006e1e:	f04f 0a00 	mov.w	sl, #0
 8006e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e24:	e7df      	b.n	8006de6 <_printf_float+0x162>
 8006e26:	b913      	cbnz	r3, 8006e2e <_printf_float+0x1aa>
 8006e28:	6822      	ldr	r2, [r4, #0]
 8006e2a:	07d2      	lsls	r2, r2, #31
 8006e2c:	d501      	bpl.n	8006e32 <_printf_float+0x1ae>
 8006e2e:	3302      	adds	r3, #2
 8006e30:	e7f4      	b.n	8006e1c <_printf_float+0x198>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7f2      	b.n	8006e1c <_printf_float+0x198>
 8006e36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	db05      	blt.n	8006e4c <_printf_float+0x1c8>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	6121      	str	r1, [r4, #16]
 8006e44:	07d8      	lsls	r0, r3, #31
 8006e46:	d5ea      	bpl.n	8006e1e <_printf_float+0x19a>
 8006e48:	1c4b      	adds	r3, r1, #1
 8006e4a:	e7e7      	b.n	8006e1c <_printf_float+0x198>
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	bfcc      	ite	gt
 8006e50:	2201      	movgt	r2, #1
 8006e52:	f1c1 0202 	rsble	r2, r1, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	e7e0      	b.n	8006e1c <_printf_float+0x198>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	055a      	lsls	r2, r3, #21
 8006e5e:	d407      	bmi.n	8006e70 <_printf_float+0x1ec>
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	4642      	mov	r2, r8
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d12b      	bne.n	8006ec6 <_printf_float+0x242>
 8006e6e:	e764      	b.n	8006d3a <_printf_float+0xb6>
 8006e70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e74:	f240 80dd 	bls.w	8007032 <_printf_float+0x3ae>
 8006e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f7f9 fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d033      	beq.n	8006ef0 <_printf_float+0x26c>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	4a35      	ldr	r2, [pc, #212]	; (8006f64 <_printf_float+0x2e0>)
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	f43f af51 	beq.w	8006d3a <_printf_float+0xb6>
 8006e98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	db02      	blt.n	8006ea6 <_printf_float+0x222>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	07d8      	lsls	r0, r3, #31
 8006ea4:	d50f      	bpl.n	8006ec6 <_printf_float+0x242>
 8006ea6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f af42 	beq.w	8006d3a <_printf_float+0xb6>
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	f104 091a 	add.w	r9, r4, #26
 8006ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4543      	cmp	r3, r8
 8006ec4:	dc09      	bgt.n	8006eda <_printf_float+0x256>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	079b      	lsls	r3, r3, #30
 8006eca:	f100 8104 	bmi.w	80070d6 <_printf_float+0x452>
 8006ece:	68e0      	ldr	r0, [r4, #12]
 8006ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ed2:	4298      	cmp	r0, r3
 8006ed4:	bfb8      	it	lt
 8006ed6:	4618      	movlt	r0, r3
 8006ed8:	e731      	b.n	8006d3e <_printf_float+0xba>
 8006eda:	2301      	movs	r3, #1
 8006edc:	464a      	mov	r2, r9
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f43f af28 	beq.w	8006d3a <_printf_float+0xb6>
 8006eea:	f108 0801 	add.w	r8, r8, #1
 8006eee:	e7e6      	b.n	8006ebe <_printf_float+0x23a>
 8006ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dc38      	bgt.n	8006f68 <_printf_float+0x2e4>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <_printf_float+0x2e0>)
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f af1a 	beq.w	8006d3a <_printf_float+0xb6>
 8006f06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	d102      	bne.n	8006f14 <_printf_float+0x290>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	07d9      	lsls	r1, r3, #31
 8006f12:	d5d8      	bpl.n	8006ec6 <_printf_float+0x242>
 8006f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f43f af0b 	beq.w	8006d3a <_printf_float+0xb6>
 8006f24:	f04f 0900 	mov.w	r9, #0
 8006f28:	f104 0a1a 	add.w	sl, r4, #26
 8006f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f2e:	425b      	negs	r3, r3
 8006f30:	454b      	cmp	r3, r9
 8006f32:	dc01      	bgt.n	8006f38 <_printf_float+0x2b4>
 8006f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f36:	e794      	b.n	8006e62 <_printf_float+0x1de>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f aef9 	beq.w	8006d3a <_printf_float+0xb6>
 8006f48:	f109 0901 	add.w	r9, r9, #1
 8006f4c:	e7ee      	b.n	8006f2c <_printf_float+0x2a8>
 8006f4e:	bf00      	nop
 8006f50:	7fefffff 	.word	0x7fefffff
 8006f54:	0800b06a 	.word	0x0800b06a
 8006f58:	0800b06e 	.word	0x0800b06e
 8006f5c:	0800b072 	.word	0x0800b072
 8006f60:	0800b076 	.word	0x0800b076
 8006f64:	0800b07a 	.word	0x0800b07a
 8006f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	bfa8      	it	ge
 8006f70:	461a      	movge	r2, r3
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	4691      	mov	r9, r2
 8006f76:	dc37      	bgt.n	8006fe8 <_printf_float+0x364>
 8006f78:	f04f 0b00 	mov.w	fp, #0
 8006f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f80:	f104 021a 	add.w	r2, r4, #26
 8006f84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f88:	ebaa 0309 	sub.w	r3, sl, r9
 8006f8c:	455b      	cmp	r3, fp
 8006f8e:	dc33      	bgt.n	8006ff8 <_printf_float+0x374>
 8006f90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f94:	429a      	cmp	r2, r3
 8006f96:	db3b      	blt.n	8007010 <_printf_float+0x38c>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07da      	lsls	r2, r3, #31
 8006f9c:	d438      	bmi.n	8007010 <_printf_float+0x38c>
 8006f9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006fa2:	eba2 0903 	sub.w	r9, r2, r3
 8006fa6:	eba2 020a 	sub.w	r2, r2, sl
 8006faa:	4591      	cmp	r9, r2
 8006fac:	bfa8      	it	ge
 8006fae:	4691      	movge	r9, r2
 8006fb0:	f1b9 0f00 	cmp.w	r9, #0
 8006fb4:	dc34      	bgt.n	8007020 <_printf_float+0x39c>
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fbe:	f104 0a1a 	add.w	sl, r4, #26
 8006fc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	eba3 0309 	sub.w	r3, r3, r9
 8006fcc:	4543      	cmp	r3, r8
 8006fce:	f77f af7a 	ble.w	8006ec6 <_printf_float+0x242>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f aeac 	beq.w	8006d3a <_printf_float+0xb6>
 8006fe2:	f108 0801 	add.w	r8, r8, #1
 8006fe6:	e7ec      	b.n	8006fc2 <_printf_float+0x33e>
 8006fe8:	4613      	mov	r3, r2
 8006fea:	4631      	mov	r1, r6
 8006fec:	4642      	mov	r2, r8
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d1c0      	bne.n	8006f78 <_printf_float+0x2f4>
 8006ff6:	e6a0      	b.n	8006d3a <_printf_float+0xb6>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f ae99 	beq.w	8006d3a <_printf_float+0xb6>
 8007008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800700a:	f10b 0b01 	add.w	fp, fp, #1
 800700e:	e7b9      	b.n	8006f84 <_printf_float+0x300>
 8007010:	4631      	mov	r1, r6
 8007012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	d1bf      	bne.n	8006f9e <_printf_float+0x31a>
 800701e:	e68c      	b.n	8006d3a <_printf_float+0xb6>
 8007020:	464b      	mov	r3, r9
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	eb08 020a 	add.w	r2, r8, sl
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	d1c2      	bne.n	8006fb6 <_printf_float+0x332>
 8007030:	e683      	b.n	8006d3a <_printf_float+0xb6>
 8007032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007034:	2a01      	cmp	r2, #1
 8007036:	dc01      	bgt.n	800703c <_printf_float+0x3b8>
 8007038:	07db      	lsls	r3, r3, #31
 800703a:	d539      	bpl.n	80070b0 <_printf_float+0x42c>
 800703c:	2301      	movs	r3, #1
 800703e:	4642      	mov	r2, r8
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	47b8      	blx	r7
 8007046:	3001      	adds	r0, #1
 8007048:	f43f ae77 	beq.w	8006d3a <_printf_float+0xb6>
 800704c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	f43f ae6f 	beq.w	8006d3a <_printf_float+0xb6>
 800705c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007068:	f7f9 fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800706c:	b9d8      	cbnz	r0, 80070a6 <_printf_float+0x422>
 800706e:	f109 33ff 	add.w	r3, r9, #4294967295
 8007072:	f108 0201 	add.w	r2, r8, #1
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	d10e      	bne.n	800709e <_printf_float+0x41a>
 8007080:	e65b      	b.n	8006d3a <_printf_float+0xb6>
 8007082:	2301      	movs	r3, #1
 8007084:	464a      	mov	r2, r9
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae54 	beq.w	8006d3a <_printf_float+0xb6>
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007098:	3b01      	subs	r3, #1
 800709a:	4543      	cmp	r3, r8
 800709c:	dcf1      	bgt.n	8007082 <_printf_float+0x3fe>
 800709e:	4653      	mov	r3, sl
 80070a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070a4:	e6de      	b.n	8006e64 <_printf_float+0x1e0>
 80070a6:	f04f 0800 	mov.w	r8, #0
 80070aa:	f104 091a 	add.w	r9, r4, #26
 80070ae:	e7f2      	b.n	8007096 <_printf_float+0x412>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4642      	mov	r2, r8
 80070b4:	e7df      	b.n	8007076 <_printf_float+0x3f2>
 80070b6:	2301      	movs	r3, #1
 80070b8:	464a      	mov	r2, r9
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	f43f ae3a 	beq.w	8006d3a <_printf_float+0xb6>
 80070c6:	f108 0801 	add.w	r8, r8, #1
 80070ca:	68e3      	ldr	r3, [r4, #12]
 80070cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070ce:	1a5b      	subs	r3, r3, r1
 80070d0:	4543      	cmp	r3, r8
 80070d2:	dcf0      	bgt.n	80070b6 <_printf_float+0x432>
 80070d4:	e6fb      	b.n	8006ece <_printf_float+0x24a>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	f104 0919 	add.w	r9, r4, #25
 80070de:	e7f4      	b.n	80070ca <_printf_float+0x446>

080070e0 <_printf_common>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	4616      	mov	r6, r2
 80070e6:	4699      	mov	r9, r3
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	4607      	mov	r7, r0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfb8      	it	lt
 80070f2:	4613      	movlt	r3, r2
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070fa:	460c      	mov	r4, r1
 80070fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007100:	b10a      	cbz	r2, 8007106 <_printf_common+0x26>
 8007102:	3301      	adds	r3, #1
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	0699      	lsls	r1, r3, #26
 800710a:	bf42      	ittt	mi
 800710c:	6833      	ldrmi	r3, [r6, #0]
 800710e:	3302      	addmi	r3, #2
 8007110:	6033      	strmi	r3, [r6, #0]
 8007112:	6825      	ldr	r5, [r4, #0]
 8007114:	f015 0506 	ands.w	r5, r5, #6
 8007118:	d106      	bne.n	8007128 <_printf_common+0x48>
 800711a:	f104 0a19 	add.w	sl, r4, #25
 800711e:	68e3      	ldr	r3, [r4, #12]
 8007120:	6832      	ldr	r2, [r6, #0]
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	42ab      	cmp	r3, r5
 8007126:	dc2b      	bgt.n	8007180 <_printf_common+0xa0>
 8007128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800712c:	1e13      	subs	r3, r2, #0
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	bf18      	it	ne
 8007132:	2301      	movne	r3, #1
 8007134:	0692      	lsls	r2, r2, #26
 8007136:	d430      	bmi.n	800719a <_printf_common+0xba>
 8007138:	4649      	mov	r1, r9
 800713a:	4638      	mov	r0, r7
 800713c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007140:	47c0      	blx	r8
 8007142:	3001      	adds	r0, #1
 8007144:	d023      	beq.n	800718e <_printf_common+0xae>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	6922      	ldr	r2, [r4, #16]
 800714a:	f003 0306 	and.w	r3, r3, #6
 800714e:	2b04      	cmp	r3, #4
 8007150:	bf14      	ite	ne
 8007152:	2500      	movne	r5, #0
 8007154:	6833      	ldreq	r3, [r6, #0]
 8007156:	f04f 0600 	mov.w	r6, #0
 800715a:	bf08      	it	eq
 800715c:	68e5      	ldreq	r5, [r4, #12]
 800715e:	f104 041a 	add.w	r4, r4, #26
 8007162:	bf08      	it	eq
 8007164:	1aed      	subeq	r5, r5, r3
 8007166:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800716a:	bf08      	it	eq
 800716c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007170:	4293      	cmp	r3, r2
 8007172:	bfc4      	itt	gt
 8007174:	1a9b      	subgt	r3, r3, r2
 8007176:	18ed      	addgt	r5, r5, r3
 8007178:	42b5      	cmp	r5, r6
 800717a:	d11a      	bne.n	80071b2 <_printf_common+0xd2>
 800717c:	2000      	movs	r0, #0
 800717e:	e008      	b.n	8007192 <_printf_common+0xb2>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4649      	mov	r1, r9
 8007186:	4638      	mov	r0, r7
 8007188:	47c0      	blx	r8
 800718a:	3001      	adds	r0, #1
 800718c:	d103      	bne.n	8007196 <_printf_common+0xb6>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007196:	3501      	adds	r5, #1
 8007198:	e7c1      	b.n	800711e <_printf_common+0x3e>
 800719a:	2030      	movs	r0, #48	; 0x30
 800719c:	18e1      	adds	r1, r4, r3
 800719e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a8:	4422      	add	r2, r4
 80071aa:	3302      	adds	r3, #2
 80071ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071b0:	e7c2      	b.n	8007138 <_printf_common+0x58>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4622      	mov	r2, r4
 80071b6:	4649      	mov	r1, r9
 80071b8:	4638      	mov	r0, r7
 80071ba:	47c0      	blx	r8
 80071bc:	3001      	adds	r0, #1
 80071be:	d0e6      	beq.n	800718e <_printf_common+0xae>
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7d9      	b.n	8007178 <_printf_common+0x98>

080071c4 <_printf_i>:
 80071c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	7e0f      	ldrb	r7, [r1, #24]
 80071ca:	4691      	mov	r9, r2
 80071cc:	2f78      	cmp	r7, #120	; 0x78
 80071ce:	4680      	mov	r8, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	469a      	mov	sl, r3
 80071d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071da:	d807      	bhi.n	80071ec <_printf_i+0x28>
 80071dc:	2f62      	cmp	r7, #98	; 0x62
 80071de:	d80a      	bhi.n	80071f6 <_printf_i+0x32>
 80071e0:	2f00      	cmp	r7, #0
 80071e2:	f000 80d5 	beq.w	8007390 <_printf_i+0x1cc>
 80071e6:	2f58      	cmp	r7, #88	; 0x58
 80071e8:	f000 80c1 	beq.w	800736e <_printf_i+0x1aa>
 80071ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071f4:	e03a      	b.n	800726c <_printf_i+0xa8>
 80071f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071fa:	2b15      	cmp	r3, #21
 80071fc:	d8f6      	bhi.n	80071ec <_printf_i+0x28>
 80071fe:	a101      	add	r1, pc, #4	; (adr r1, 8007204 <_printf_i+0x40>)
 8007200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007204:	0800725d 	.word	0x0800725d
 8007208:	08007271 	.word	0x08007271
 800720c:	080071ed 	.word	0x080071ed
 8007210:	080071ed 	.word	0x080071ed
 8007214:	080071ed 	.word	0x080071ed
 8007218:	080071ed 	.word	0x080071ed
 800721c:	08007271 	.word	0x08007271
 8007220:	080071ed 	.word	0x080071ed
 8007224:	080071ed 	.word	0x080071ed
 8007228:	080071ed 	.word	0x080071ed
 800722c:	080071ed 	.word	0x080071ed
 8007230:	08007377 	.word	0x08007377
 8007234:	0800729d 	.word	0x0800729d
 8007238:	08007331 	.word	0x08007331
 800723c:	080071ed 	.word	0x080071ed
 8007240:	080071ed 	.word	0x080071ed
 8007244:	08007399 	.word	0x08007399
 8007248:	080071ed 	.word	0x080071ed
 800724c:	0800729d 	.word	0x0800729d
 8007250:	080071ed 	.word	0x080071ed
 8007254:	080071ed 	.word	0x080071ed
 8007258:	08007339 	.word	0x08007339
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	602a      	str	r2, [r5, #0]
 8007264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800726c:	2301      	movs	r3, #1
 800726e:	e0a0      	b.n	80073b2 <_printf_i+0x1ee>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	0607      	lsls	r7, r0, #24
 8007276:	f103 0104 	add.w	r1, r3, #4
 800727a:	6029      	str	r1, [r5, #0]
 800727c:	d501      	bpl.n	8007282 <_printf_i+0xbe>
 800727e:	681e      	ldr	r6, [r3, #0]
 8007280:	e003      	b.n	800728a <_printf_i+0xc6>
 8007282:	0646      	lsls	r6, r0, #25
 8007284:	d5fb      	bpl.n	800727e <_printf_i+0xba>
 8007286:	f9b3 6000 	ldrsh.w	r6, [r3]
 800728a:	2e00      	cmp	r6, #0
 800728c:	da03      	bge.n	8007296 <_printf_i+0xd2>
 800728e:	232d      	movs	r3, #45	; 0x2d
 8007290:	4276      	negs	r6, r6
 8007292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007296:	230a      	movs	r3, #10
 8007298:	4859      	ldr	r0, [pc, #356]	; (8007400 <_printf_i+0x23c>)
 800729a:	e012      	b.n	80072c2 <_printf_i+0xfe>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	6820      	ldr	r0, [r4, #0]
 80072a0:	1d19      	adds	r1, r3, #4
 80072a2:	6029      	str	r1, [r5, #0]
 80072a4:	0605      	lsls	r5, r0, #24
 80072a6:	d501      	bpl.n	80072ac <_printf_i+0xe8>
 80072a8:	681e      	ldr	r6, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <_printf_i+0xee>
 80072ac:	0641      	lsls	r1, r0, #25
 80072ae:	d5fb      	bpl.n	80072a8 <_printf_i+0xe4>
 80072b0:	881e      	ldrh	r6, [r3, #0]
 80072b2:	2f6f      	cmp	r7, #111	; 0x6f
 80072b4:	bf0c      	ite	eq
 80072b6:	2308      	moveq	r3, #8
 80072b8:	230a      	movne	r3, #10
 80072ba:	4851      	ldr	r0, [pc, #324]	; (8007400 <_printf_i+0x23c>)
 80072bc:	2100      	movs	r1, #0
 80072be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c2:	6865      	ldr	r5, [r4, #4]
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	bfa8      	it	ge
 80072c8:	6821      	ldrge	r1, [r4, #0]
 80072ca:	60a5      	str	r5, [r4, #8]
 80072cc:	bfa4      	itt	ge
 80072ce:	f021 0104 	bicge.w	r1, r1, #4
 80072d2:	6021      	strge	r1, [r4, #0]
 80072d4:	b90e      	cbnz	r6, 80072da <_printf_i+0x116>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	d04b      	beq.n	8007372 <_printf_i+0x1ae>
 80072da:	4615      	mov	r5, r2
 80072dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80072e0:	fb03 6711 	mls	r7, r3, r1, r6
 80072e4:	5dc7      	ldrb	r7, [r0, r7]
 80072e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072ea:	4637      	mov	r7, r6
 80072ec:	42bb      	cmp	r3, r7
 80072ee:	460e      	mov	r6, r1
 80072f0:	d9f4      	bls.n	80072dc <_printf_i+0x118>
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d10b      	bne.n	800730e <_printf_i+0x14a>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	07de      	lsls	r6, r3, #31
 80072fa:	d508      	bpl.n	800730e <_printf_i+0x14a>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6861      	ldr	r1, [r4, #4]
 8007300:	4299      	cmp	r1, r3
 8007302:	bfde      	ittt	le
 8007304:	2330      	movle	r3, #48	; 0x30
 8007306:	f805 3c01 	strble.w	r3, [r5, #-1]
 800730a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800730e:	1b52      	subs	r2, r2, r5
 8007310:	6122      	str	r2, [r4, #16]
 8007312:	464b      	mov	r3, r9
 8007314:	4621      	mov	r1, r4
 8007316:	4640      	mov	r0, r8
 8007318:	f8cd a000 	str.w	sl, [sp]
 800731c:	aa03      	add	r2, sp, #12
 800731e:	f7ff fedf 	bl	80070e0 <_printf_common>
 8007322:	3001      	adds	r0, #1
 8007324:	d14a      	bne.n	80073bc <_printf_i+0x1f8>
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	b004      	add	sp, #16
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	f043 0320 	orr.w	r3, r3, #32
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	2778      	movs	r7, #120	; 0x78
 800733a:	4832      	ldr	r0, [pc, #200]	; (8007404 <_printf_i+0x240>)
 800733c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	6829      	ldr	r1, [r5, #0]
 8007344:	061f      	lsls	r7, r3, #24
 8007346:	f851 6b04 	ldr.w	r6, [r1], #4
 800734a:	d402      	bmi.n	8007352 <_printf_i+0x18e>
 800734c:	065f      	lsls	r7, r3, #25
 800734e:	bf48      	it	mi
 8007350:	b2b6      	uxthmi	r6, r6
 8007352:	07df      	lsls	r7, r3, #31
 8007354:	bf48      	it	mi
 8007356:	f043 0320 	orrmi.w	r3, r3, #32
 800735a:	6029      	str	r1, [r5, #0]
 800735c:	bf48      	it	mi
 800735e:	6023      	strmi	r3, [r4, #0]
 8007360:	b91e      	cbnz	r6, 800736a <_printf_i+0x1a6>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f023 0320 	bic.w	r3, r3, #32
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	2310      	movs	r3, #16
 800736c:	e7a6      	b.n	80072bc <_printf_i+0xf8>
 800736e:	4824      	ldr	r0, [pc, #144]	; (8007400 <_printf_i+0x23c>)
 8007370:	e7e4      	b.n	800733c <_printf_i+0x178>
 8007372:	4615      	mov	r5, r2
 8007374:	e7bd      	b.n	80072f2 <_printf_i+0x12e>
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	6826      	ldr	r6, [r4, #0]
 800737a:	1d18      	adds	r0, r3, #4
 800737c:	6961      	ldr	r1, [r4, #20]
 800737e:	6028      	str	r0, [r5, #0]
 8007380:	0635      	lsls	r5, r6, #24
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	d501      	bpl.n	800738a <_printf_i+0x1c6>
 8007386:	6019      	str	r1, [r3, #0]
 8007388:	e002      	b.n	8007390 <_printf_i+0x1cc>
 800738a:	0670      	lsls	r0, r6, #25
 800738c:	d5fb      	bpl.n	8007386 <_printf_i+0x1c2>
 800738e:	8019      	strh	r1, [r3, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	4615      	mov	r5, r2
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	e7bc      	b.n	8007312 <_printf_i+0x14e>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	2100      	movs	r1, #0
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	602a      	str	r2, [r5, #0]
 80073a0:	681d      	ldr	r5, [r3, #0]
 80073a2:	6862      	ldr	r2, [r4, #4]
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 fb0c 	bl	80079c2 <memchr>
 80073aa:	b108      	cbz	r0, 80073b0 <_printf_i+0x1ec>
 80073ac:	1b40      	subs	r0, r0, r5
 80073ae:	6060      	str	r0, [r4, #4]
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	2300      	movs	r3, #0
 80073b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ba:	e7aa      	b.n	8007312 <_printf_i+0x14e>
 80073bc:	462a      	mov	r2, r5
 80073be:	4649      	mov	r1, r9
 80073c0:	4640      	mov	r0, r8
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	47d0      	blx	sl
 80073c6:	3001      	adds	r0, #1
 80073c8:	d0ad      	beq.n	8007326 <_printf_i+0x162>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	079b      	lsls	r3, r3, #30
 80073ce:	d413      	bmi.n	80073f8 <_printf_i+0x234>
 80073d0:	68e0      	ldr	r0, [r4, #12]
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	4298      	cmp	r0, r3
 80073d6:	bfb8      	it	lt
 80073d8:	4618      	movlt	r0, r3
 80073da:	e7a6      	b.n	800732a <_printf_i+0x166>
 80073dc:	2301      	movs	r3, #1
 80073de:	4632      	mov	r2, r6
 80073e0:	4649      	mov	r1, r9
 80073e2:	4640      	mov	r0, r8
 80073e4:	47d0      	blx	sl
 80073e6:	3001      	adds	r0, #1
 80073e8:	d09d      	beq.n	8007326 <_printf_i+0x162>
 80073ea:	3501      	adds	r5, #1
 80073ec:	68e3      	ldr	r3, [r4, #12]
 80073ee:	9903      	ldr	r1, [sp, #12]
 80073f0:	1a5b      	subs	r3, r3, r1
 80073f2:	42ab      	cmp	r3, r5
 80073f4:	dcf2      	bgt.n	80073dc <_printf_i+0x218>
 80073f6:	e7eb      	b.n	80073d0 <_printf_i+0x20c>
 80073f8:	2500      	movs	r5, #0
 80073fa:	f104 0619 	add.w	r6, r4, #25
 80073fe:	e7f5      	b.n	80073ec <_printf_i+0x228>
 8007400:	0800b07c 	.word	0x0800b07c
 8007404:	0800b08d 	.word	0x0800b08d

08007408 <std>:
 8007408:	2300      	movs	r3, #0
 800740a:	b510      	push	{r4, lr}
 800740c:	4604      	mov	r4, r0
 800740e:	e9c0 3300 	strd	r3, r3, [r0]
 8007412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007416:	6083      	str	r3, [r0, #8]
 8007418:	8181      	strh	r1, [r0, #12]
 800741a:	6643      	str	r3, [r0, #100]	; 0x64
 800741c:	81c2      	strh	r2, [r0, #14]
 800741e:	6183      	str	r3, [r0, #24]
 8007420:	4619      	mov	r1, r3
 8007422:	2208      	movs	r2, #8
 8007424:	305c      	adds	r0, #92	; 0x5c
 8007426:	f000 f9f7 	bl	8007818 <memset>
 800742a:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <std+0x58>)
 800742c:	6224      	str	r4, [r4, #32]
 800742e:	6263      	str	r3, [r4, #36]	; 0x24
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <std+0x5c>)
 8007432:	62a3      	str	r3, [r4, #40]	; 0x28
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <std+0x60>)
 8007436:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <std+0x64>)
 800743a:	6323      	str	r3, [r4, #48]	; 0x30
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <std+0x68>)
 800743e:	429c      	cmp	r4, r3
 8007440:	d006      	beq.n	8007450 <std+0x48>
 8007442:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007446:	4294      	cmp	r4, r2
 8007448:	d002      	beq.n	8007450 <std+0x48>
 800744a:	33d0      	adds	r3, #208	; 0xd0
 800744c:	429c      	cmp	r4, r3
 800744e:	d105      	bne.n	800745c <std+0x54>
 8007450:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f000 bab0 	b.w	80079bc <__retarget_lock_init_recursive>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	08007669 	.word	0x08007669
 8007464:	0800768b 	.word	0x0800768b
 8007468:	080076c3 	.word	0x080076c3
 800746c:	080076e7 	.word	0x080076e7
 8007470:	20002b08 	.word	0x20002b08

08007474 <stdio_exit_handler>:
 8007474:	4a02      	ldr	r2, [pc, #8]	; (8007480 <stdio_exit_handler+0xc>)
 8007476:	4903      	ldr	r1, [pc, #12]	; (8007484 <stdio_exit_handler+0x10>)
 8007478:	4803      	ldr	r0, [pc, #12]	; (8007488 <stdio_exit_handler+0x14>)
 800747a:	f000 b869 	b.w	8007550 <_fwalk_sglue>
 800747e:	bf00      	nop
 8007480:	20000010 	.word	0x20000010
 8007484:	08009349 	.word	0x08009349
 8007488:	2000001c 	.word	0x2000001c

0800748c <cleanup_stdio>:
 800748c:	6841      	ldr	r1, [r0, #4]
 800748e:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <cleanup_stdio+0x34>)
 8007490:	b510      	push	{r4, lr}
 8007492:	4299      	cmp	r1, r3
 8007494:	4604      	mov	r4, r0
 8007496:	d001      	beq.n	800749c <cleanup_stdio+0x10>
 8007498:	f001 ff56 	bl	8009348 <_fflush_r>
 800749c:	68a1      	ldr	r1, [r4, #8]
 800749e:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <cleanup_stdio+0x38>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <cleanup_stdio+0x1e>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f001 ff4f 	bl	8009348 <_fflush_r>
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <cleanup_stdio+0x3c>)
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d004      	beq.n	80074bc <cleanup_stdio+0x30>
 80074b2:	4620      	mov	r0, r4
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b8:	f001 bf46 	b.w	8009348 <_fflush_r>
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	20002b08 	.word	0x20002b08
 80074c4:	20002b70 	.word	0x20002b70
 80074c8:	20002bd8 	.word	0x20002bd8

080074cc <global_stdio_init.part.0>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <global_stdio_init.part.0+0x30>)
 80074d0:	4c0b      	ldr	r4, [pc, #44]	; (8007500 <global_stdio_init.part.0+0x34>)
 80074d2:	4a0c      	ldr	r2, [pc, #48]	; (8007504 <global_stdio_init.part.0+0x38>)
 80074d4:	4620      	mov	r0, r4
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	2104      	movs	r1, #4
 80074da:	2200      	movs	r2, #0
 80074dc:	f7ff ff94 	bl	8007408 <std>
 80074e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074e4:	2201      	movs	r2, #1
 80074e6:	2109      	movs	r1, #9
 80074e8:	f7ff ff8e 	bl	8007408 <std>
 80074ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074f0:	2202      	movs	r2, #2
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff bf86 	b.w	8007408 <std>
 80074fc:	20002c40 	.word	0x20002c40
 8007500:	20002b08 	.word	0x20002b08
 8007504:	08007475 	.word	0x08007475

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 ba58 	b.w	80079be <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	20002c49 	.word	0x20002c49

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 ba53 	b.w	80079c0 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	20002c49 	.word	0x20002c49

08007520 <__sinit>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4604      	mov	r4, r0
 8007524:	f7ff fff0 	bl	8007508 <__sfp_lock_acquire>
 8007528:	6a23      	ldr	r3, [r4, #32]
 800752a:	b11b      	cbz	r3, 8007534 <__sinit+0x14>
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	f7ff bff0 	b.w	8007514 <__sfp_lock_release>
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <__sinit+0x28>)
 8007536:	6223      	str	r3, [r4, #32]
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <__sinit+0x2c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f5      	bne.n	800752c <__sinit+0xc>
 8007540:	f7ff ffc4 	bl	80074cc <global_stdio_init.part.0>
 8007544:	e7f2      	b.n	800752c <__sinit+0xc>
 8007546:	bf00      	nop
 8007548:	0800748d 	.word	0x0800748d
 800754c:	20002c40 	.word	0x20002c40

08007550 <_fwalk_sglue>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4607      	mov	r7, r0
 8007556:	4688      	mov	r8, r1
 8007558:	4614      	mov	r4, r2
 800755a:	2600      	movs	r6, #0
 800755c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007560:	f1b9 0901 	subs.w	r9, r9, #1
 8007564:	d505      	bpl.n	8007572 <_fwalk_sglue+0x22>
 8007566:	6824      	ldr	r4, [r4, #0]
 8007568:	2c00      	cmp	r4, #0
 800756a:	d1f7      	bne.n	800755c <_fwalk_sglue+0xc>
 800756c:	4630      	mov	r0, r6
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d907      	bls.n	8007588 <_fwalk_sglue+0x38>
 8007578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800757c:	3301      	adds	r3, #1
 800757e:	d003      	beq.n	8007588 <_fwalk_sglue+0x38>
 8007580:	4629      	mov	r1, r5
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	4306      	orrs	r6, r0
 8007588:	3568      	adds	r5, #104	; 0x68
 800758a:	e7e9      	b.n	8007560 <_fwalk_sglue+0x10>

0800758c <iprintf>:
 800758c:	b40f      	push	{r0, r1, r2, r3}
 800758e:	b507      	push	{r0, r1, r2, lr}
 8007590:	4906      	ldr	r1, [pc, #24]	; (80075ac <iprintf+0x20>)
 8007592:	ab04      	add	r3, sp, #16
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	f853 2b04 	ldr.w	r2, [r3], #4
 800759a:	6881      	ldr	r1, [r0, #8]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f001 fd37 	bl	8009010 <_vfiprintf_r>
 80075a2:	b003      	add	sp, #12
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr
 80075ac:	20000068 	.word	0x20000068

080075b0 <_puts_r>:
 80075b0:	6a03      	ldr	r3, [r0, #32]
 80075b2:	b570      	push	{r4, r5, r6, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	460e      	mov	r6, r1
 80075b8:	6884      	ldr	r4, [r0, #8]
 80075ba:	b90b      	cbnz	r3, 80075c0 <_puts_r+0x10>
 80075bc:	f7ff ffb0 	bl	8007520 <__sinit>
 80075c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d405      	bmi.n	80075d2 <_puts_r+0x22>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	0598      	lsls	r0, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_puts_r+0x22>
 80075cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ce:	f000 f9f6 	bl	80079be <__retarget_lock_acquire_recursive>
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	0719      	lsls	r1, r3, #28
 80075d6:	d513      	bpl.n	8007600 <_puts_r+0x50>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	b18b      	cbz	r3, 8007600 <_puts_r+0x50>
 80075dc:	3e01      	subs	r6, #1
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075e4:	3b01      	subs	r3, #1
 80075e6:	60a3      	str	r3, [r4, #8]
 80075e8:	b9e9      	cbnz	r1, 8007626 <_puts_r+0x76>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da2e      	bge.n	800764c <_puts_r+0x9c>
 80075ee:	4622      	mov	r2, r4
 80075f0:	210a      	movs	r1, #10
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f87b 	bl	80076ee <__swbuf_r>
 80075f8:	3001      	adds	r0, #1
 80075fa:	d007      	beq.n	800760c <_puts_r+0x5c>
 80075fc:	250a      	movs	r5, #10
 80075fe:	e007      	b.n	8007610 <_puts_r+0x60>
 8007600:	4621      	mov	r1, r4
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f8b0 	bl	8007768 <__swsetup_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	d0e7      	beq.n	80075dc <_puts_r+0x2c>
 800760c:	f04f 35ff 	mov.w	r5, #4294967295
 8007610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007612:	07da      	lsls	r2, r3, #31
 8007614:	d405      	bmi.n	8007622 <_puts_r+0x72>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	059b      	lsls	r3, r3, #22
 800761a:	d402      	bmi.n	8007622 <_puts_r+0x72>
 800761c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800761e:	f000 f9cf 	bl	80079c0 <__retarget_lock_release_recursive>
 8007622:	4628      	mov	r0, r5
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	2b00      	cmp	r3, #0
 8007628:	da04      	bge.n	8007634 <_puts_r+0x84>
 800762a:	69a2      	ldr	r2, [r4, #24]
 800762c:	429a      	cmp	r2, r3
 800762e:	dc06      	bgt.n	800763e <_puts_r+0x8e>
 8007630:	290a      	cmp	r1, #10
 8007632:	d004      	beq.n	800763e <_puts_r+0x8e>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	6022      	str	r2, [r4, #0]
 800763a:	7019      	strb	r1, [r3, #0]
 800763c:	e7cf      	b.n	80075de <_puts_r+0x2e>
 800763e:	4622      	mov	r2, r4
 8007640:	4628      	mov	r0, r5
 8007642:	f000 f854 	bl	80076ee <__swbuf_r>
 8007646:	3001      	adds	r0, #1
 8007648:	d1c9      	bne.n	80075de <_puts_r+0x2e>
 800764a:	e7df      	b.n	800760c <_puts_r+0x5c>
 800764c:	250a      	movs	r5, #10
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	6022      	str	r2, [r4, #0]
 8007654:	701d      	strb	r5, [r3, #0]
 8007656:	e7db      	b.n	8007610 <_puts_r+0x60>

08007658 <puts>:
 8007658:	4b02      	ldr	r3, [pc, #8]	; (8007664 <puts+0xc>)
 800765a:	4601      	mov	r1, r0
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	f7ff bfa7 	b.w	80075b0 <_puts_r>
 8007662:	bf00      	nop
 8007664:	20000068 	.word	0x20000068

08007668 <__sread>:
 8007668:	b510      	push	{r4, lr}
 800766a:	460c      	mov	r4, r1
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	f000 f956 	bl	8007920 <_read_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	bfab      	itete	ge
 8007678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800767a:	89a3      	ldrhlt	r3, [r4, #12]
 800767c:	181b      	addge	r3, r3, r0
 800767e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007682:	bfac      	ite	ge
 8007684:	6563      	strge	r3, [r4, #84]	; 0x54
 8007686:	81a3      	strhlt	r3, [r4, #12]
 8007688:	bd10      	pop	{r4, pc}

0800768a <__swrite>:
 800768a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	461f      	mov	r7, r3
 8007690:	898b      	ldrh	r3, [r1, #12]
 8007692:	4605      	mov	r5, r0
 8007694:	05db      	lsls	r3, r3, #23
 8007696:	460c      	mov	r4, r1
 8007698:	4616      	mov	r6, r2
 800769a:	d505      	bpl.n	80076a8 <__swrite+0x1e>
 800769c:	2302      	movs	r3, #2
 800769e:	2200      	movs	r2, #0
 80076a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a4:	f000 f92a 	bl	80078fc <_lseek_r>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	4632      	mov	r2, r6
 80076ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	4628      	mov	r0, r5
 80076b4:	463b      	mov	r3, r7
 80076b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	f000 b941 	b.w	8007944 <_write_r>

080076c2 <__sseek>:
 80076c2:	b510      	push	{r4, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ca:	f000 f917 	bl	80078fc <_lseek_r>
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	bf15      	itete	ne
 80076d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076de:	81a3      	strheq	r3, [r4, #12]
 80076e0:	bf18      	it	ne
 80076e2:	81a3      	strhne	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__sclose>:
 80076e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ea:	f000 b8a1 	b.w	8007830 <_close_r>

080076ee <__swbuf_r>:
 80076ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f0:	460e      	mov	r6, r1
 80076f2:	4614      	mov	r4, r2
 80076f4:	4605      	mov	r5, r0
 80076f6:	b118      	cbz	r0, 8007700 <__swbuf_r+0x12>
 80076f8:	6a03      	ldr	r3, [r0, #32]
 80076fa:	b90b      	cbnz	r3, 8007700 <__swbuf_r+0x12>
 80076fc:	f7ff ff10 	bl	8007520 <__sinit>
 8007700:	69a3      	ldr	r3, [r4, #24]
 8007702:	60a3      	str	r3, [r4, #8]
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	071a      	lsls	r2, r3, #28
 8007708:	d525      	bpl.n	8007756 <__swbuf_r+0x68>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	b31b      	cbz	r3, 8007756 <__swbuf_r+0x68>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6922      	ldr	r2, [r4, #16]
 8007712:	b2f6      	uxtb	r6, r6
 8007714:	1a98      	subs	r0, r3, r2
 8007716:	6963      	ldr	r3, [r4, #20]
 8007718:	4637      	mov	r7, r6
 800771a:	4283      	cmp	r3, r0
 800771c:	dc04      	bgt.n	8007728 <__swbuf_r+0x3a>
 800771e:	4621      	mov	r1, r4
 8007720:	4628      	mov	r0, r5
 8007722:	f001 fe11 	bl	8009348 <_fflush_r>
 8007726:	b9e0      	cbnz	r0, 8007762 <__swbuf_r+0x74>
 8007728:	68a3      	ldr	r3, [r4, #8]
 800772a:	3b01      	subs	r3, #1
 800772c:	60a3      	str	r3, [r4, #8]
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	701e      	strb	r6, [r3, #0]
 8007736:	6962      	ldr	r2, [r4, #20]
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	429a      	cmp	r2, r3
 800773c:	d004      	beq.n	8007748 <__swbuf_r+0x5a>
 800773e:	89a3      	ldrh	r3, [r4, #12]
 8007740:	07db      	lsls	r3, r3, #31
 8007742:	d506      	bpl.n	8007752 <__swbuf_r+0x64>
 8007744:	2e0a      	cmp	r6, #10
 8007746:	d104      	bne.n	8007752 <__swbuf_r+0x64>
 8007748:	4621      	mov	r1, r4
 800774a:	4628      	mov	r0, r5
 800774c:	f001 fdfc 	bl	8009348 <_fflush_r>
 8007750:	b938      	cbnz	r0, 8007762 <__swbuf_r+0x74>
 8007752:	4638      	mov	r0, r7
 8007754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f000 f805 	bl	8007768 <__swsetup_r>
 800775e:	2800      	cmp	r0, #0
 8007760:	d0d5      	beq.n	800770e <__swbuf_r+0x20>
 8007762:	f04f 37ff 	mov.w	r7, #4294967295
 8007766:	e7f4      	b.n	8007752 <__swbuf_r+0x64>

08007768 <__swsetup_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <__swsetup_r+0xac>)
 800776c:	4605      	mov	r5, r0
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	460c      	mov	r4, r1
 8007772:	b118      	cbz	r0, 800777c <__swsetup_r+0x14>
 8007774:	6a03      	ldr	r3, [r0, #32]
 8007776:	b90b      	cbnz	r3, 800777c <__swsetup_r+0x14>
 8007778:	f7ff fed2 	bl	8007520 <__sinit>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007782:	0718      	lsls	r0, r3, #28
 8007784:	d422      	bmi.n	80077cc <__swsetup_r+0x64>
 8007786:	06d9      	lsls	r1, r3, #27
 8007788:	d407      	bmi.n	800779a <__swsetup_r+0x32>
 800778a:	2309      	movs	r3, #9
 800778c:	602b      	str	r3, [r5, #0]
 800778e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	e034      	b.n	8007804 <__swsetup_r+0x9c>
 800779a:	0758      	lsls	r0, r3, #29
 800779c:	d512      	bpl.n	80077c4 <__swsetup_r+0x5c>
 800779e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a0:	b141      	cbz	r1, 80077b4 <__swsetup_r+0x4c>
 80077a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d002      	beq.n	80077b0 <__swsetup_r+0x48>
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 ff94 	bl	80086d8 <_free_r>
 80077b0:	2300      	movs	r3, #0
 80077b2:	6363      	str	r3, [r4, #52]	; 0x34
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	2300      	movs	r3, #0
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	f043 0308 	orr.w	r3, r3, #8
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	b94b      	cbnz	r3, 80077e4 <__swsetup_r+0x7c>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077da:	d003      	beq.n	80077e4 <__swsetup_r+0x7c>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f001 fdff 	bl	80093e2 <__smakebuf_r>
 80077e4:	89a0      	ldrh	r0, [r4, #12]
 80077e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ea:	f010 0301 	ands.w	r3, r0, #1
 80077ee:	d00a      	beq.n	8007806 <__swsetup_r+0x9e>
 80077f0:	2300      	movs	r3, #0
 80077f2:	60a3      	str	r3, [r4, #8]
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	425b      	negs	r3, r3
 80077f8:	61a3      	str	r3, [r4, #24]
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	b943      	cbnz	r3, 8007810 <__swsetup_r+0xa8>
 80077fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007802:	d1c4      	bne.n	800778e <__swsetup_r+0x26>
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	0781      	lsls	r1, r0, #30
 8007808:	bf58      	it	pl
 800780a:	6963      	ldrpl	r3, [r4, #20]
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	e7f4      	b.n	80077fa <__swsetup_r+0x92>
 8007810:	2000      	movs	r0, #0
 8007812:	e7f7      	b.n	8007804 <__swsetup_r+0x9c>
 8007814:	20000068 	.word	0x20000068

08007818 <memset>:
 8007818:	4603      	mov	r3, r0
 800781a:	4402      	add	r2, r0
 800781c:	4293      	cmp	r3, r2
 800781e:	d100      	bne.n	8007822 <memset+0xa>
 8007820:	4770      	bx	lr
 8007822:	f803 1b01 	strb.w	r1, [r3], #1
 8007826:	e7f9      	b.n	800781c <memset+0x4>

08007828 <_localeconv_r>:
 8007828:	4800      	ldr	r0, [pc, #0]	; (800782c <_localeconv_r+0x4>)
 800782a:	4770      	bx	lr
 800782c:	2000015c 	.word	0x2000015c

08007830 <_close_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	2300      	movs	r3, #0
 8007834:	4d05      	ldr	r5, [pc, #20]	; (800784c <_close_r+0x1c>)
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7fb fdfa 	bl	8003434 <_close>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_close_r+0x1a>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_close_r+0x1a>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20002c44 	.word	0x20002c44

08007850 <_reclaim_reent>:
 8007850:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <_reclaim_reent+0xa8>)
 8007852:	b570      	push	{r4, r5, r6, lr}
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4604      	mov	r4, r0
 8007858:	4283      	cmp	r3, r0
 800785a:	d04b      	beq.n	80078f4 <_reclaim_reent+0xa4>
 800785c:	69c3      	ldr	r3, [r0, #28]
 800785e:	b143      	cbz	r3, 8007872 <_reclaim_reent+0x22>
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d144      	bne.n	80078f0 <_reclaim_reent+0xa0>
 8007866:	69e3      	ldr	r3, [r4, #28]
 8007868:	6819      	ldr	r1, [r3, #0]
 800786a:	b111      	cbz	r1, 8007872 <_reclaim_reent+0x22>
 800786c:	4620      	mov	r0, r4
 800786e:	f000 ff33 	bl	80086d8 <_free_r>
 8007872:	6961      	ldr	r1, [r4, #20]
 8007874:	b111      	cbz	r1, 800787c <_reclaim_reent+0x2c>
 8007876:	4620      	mov	r0, r4
 8007878:	f000 ff2e 	bl	80086d8 <_free_r>
 800787c:	69e1      	ldr	r1, [r4, #28]
 800787e:	b111      	cbz	r1, 8007886 <_reclaim_reent+0x36>
 8007880:	4620      	mov	r0, r4
 8007882:	f000 ff29 	bl	80086d8 <_free_r>
 8007886:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007888:	b111      	cbz	r1, 8007890 <_reclaim_reent+0x40>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 ff24 	bl	80086d8 <_free_r>
 8007890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007892:	b111      	cbz	r1, 800789a <_reclaim_reent+0x4a>
 8007894:	4620      	mov	r0, r4
 8007896:	f000 ff1f 	bl	80086d8 <_free_r>
 800789a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800789c:	b111      	cbz	r1, 80078a4 <_reclaim_reent+0x54>
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 ff1a 	bl	80086d8 <_free_r>
 80078a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80078a6:	b111      	cbz	r1, 80078ae <_reclaim_reent+0x5e>
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 ff15 	bl	80086d8 <_free_r>
 80078ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80078b0:	b111      	cbz	r1, 80078b8 <_reclaim_reent+0x68>
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 ff10 	bl	80086d8 <_free_r>
 80078b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80078ba:	b111      	cbz	r1, 80078c2 <_reclaim_reent+0x72>
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 ff0b 	bl	80086d8 <_free_r>
 80078c2:	6a23      	ldr	r3, [r4, #32]
 80078c4:	b1b3      	cbz	r3, 80078f4 <_reclaim_reent+0xa4>
 80078c6:	4620      	mov	r0, r4
 80078c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078cc:	4718      	bx	r3
 80078ce:	5949      	ldr	r1, [r1, r5]
 80078d0:	b941      	cbnz	r1, 80078e4 <_reclaim_reent+0x94>
 80078d2:	3504      	adds	r5, #4
 80078d4:	69e3      	ldr	r3, [r4, #28]
 80078d6:	2d80      	cmp	r5, #128	; 0x80
 80078d8:	68d9      	ldr	r1, [r3, #12]
 80078da:	d1f8      	bne.n	80078ce <_reclaim_reent+0x7e>
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 fefb 	bl	80086d8 <_free_r>
 80078e2:	e7c0      	b.n	8007866 <_reclaim_reent+0x16>
 80078e4:	680e      	ldr	r6, [r1, #0]
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fef6 	bl	80086d8 <_free_r>
 80078ec:	4631      	mov	r1, r6
 80078ee:	e7ef      	b.n	80078d0 <_reclaim_reent+0x80>
 80078f0:	2500      	movs	r5, #0
 80078f2:	e7ef      	b.n	80078d4 <_reclaim_reent+0x84>
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
 80078f6:	bf00      	nop
 80078f8:	20000068 	.word	0x20000068

080078fc <_lseek_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	2200      	movs	r2, #0
 8007906:	4d05      	ldr	r5, [pc, #20]	; (800791c <_lseek_r+0x20>)
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f7fb fdb6 	bl	800347c <_lseek>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_lseek_r+0x1e>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_lseek_r+0x1e>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	20002c44 	.word	0x20002c44

08007920 <_read_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	2200      	movs	r2, #0
 800792a:	4d05      	ldr	r5, [pc, #20]	; (8007940 <_read_r+0x20>)
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7fb fd63 	bl	80033fa <_read>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_read_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_read_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20002c44 	.word	0x20002c44

08007944 <_write_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	2200      	movs	r2, #0
 800794e:	4d05      	ldr	r5, [pc, #20]	; (8007964 <_write_r+0x20>)
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7fb fa48 	bl	8002de8 <_write>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_write_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_write_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20002c44 	.word	0x20002c44

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000068 	.word	0x20000068

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	2600      	movs	r6, #0
 8007978:	4d0c      	ldr	r5, [pc, #48]	; (80079ac <__libc_init_array+0x38>)
 800797a:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797c:	1b64      	subs	r4, r4, r5
 800797e:	10a4      	asrs	r4, r4, #2
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	f002 fdfa 	bl	800a57c <_init>
 8007988:	2600      	movs	r6, #0
 800798a:	4d0a      	ldr	r5, [pc, #40]	; (80079b4 <__libc_init_array+0x40>)
 800798c:	4c0a      	ldr	r4, [pc, #40]	; (80079b8 <__libc_init_array+0x44>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	0800b410 	.word	0x0800b410
 80079b0:	0800b410 	.word	0x0800b410
 80079b4:	0800b410 	.word	0x0800b410
 80079b8:	0800b414 	.word	0x0800b414

080079bc <__retarget_lock_init_recursive>:
 80079bc:	4770      	bx	lr

080079be <__retarget_lock_acquire_recursive>:
 80079be:	4770      	bx	lr

080079c0 <__retarget_lock_release_recursive>:
 80079c0:	4770      	bx	lr

080079c2 <memchr>:
 80079c2:	4603      	mov	r3, r0
 80079c4:	b510      	push	{r4, lr}
 80079c6:	b2c9      	uxtb	r1, r1
 80079c8:	4402      	add	r2, r0
 80079ca:	4293      	cmp	r3, r2
 80079cc:	4618      	mov	r0, r3
 80079ce:	d101      	bne.n	80079d4 <memchr+0x12>
 80079d0:	2000      	movs	r0, #0
 80079d2:	e003      	b.n	80079dc <memchr+0x1a>
 80079d4:	7804      	ldrb	r4, [r0, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	428c      	cmp	r4, r1
 80079da:	d1f6      	bne.n	80079ca <memchr+0x8>
 80079dc:	bd10      	pop	{r4, pc}

080079de <memcpy>:
 80079de:	440a      	add	r2, r1
 80079e0:	4291      	cmp	r1, r2
 80079e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80079e6:	d100      	bne.n	80079ea <memcpy+0xc>
 80079e8:	4770      	bx	lr
 80079ea:	b510      	push	{r4, lr}
 80079ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f0:	4291      	cmp	r1, r2
 80079f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f6:	d1f9      	bne.n	80079ec <memcpy+0xe>
 80079f8:	bd10      	pop	{r4, pc}

080079fa <quorem>:
 80079fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fe:	6903      	ldr	r3, [r0, #16]
 8007a00:	690c      	ldr	r4, [r1, #16]
 8007a02:	4607      	mov	r7, r0
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	db7f      	blt.n	8007b08 <quorem+0x10e>
 8007a08:	3c01      	subs	r4, #1
 8007a0a:	f100 0514 	add.w	r5, r0, #20
 8007a0e:	f101 0814 	add.w	r8, r1, #20
 8007a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a20:	3301      	adds	r3, #1
 8007a22:	429a      	cmp	r2, r3
 8007a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a30:	d331      	bcc.n	8007a96 <quorem+0x9c>
 8007a32:	f04f 0e00 	mov.w	lr, #0
 8007a36:	4640      	mov	r0, r8
 8007a38:	46ac      	mov	ip, r5
 8007a3a:	46f2      	mov	sl, lr
 8007a3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a40:	b293      	uxth	r3, r2
 8007a42:	fb06 e303 	mla	r3, r6, r3, lr
 8007a46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a4a:	0c1a      	lsrs	r2, r3, #16
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	fb06 220e 	mla	r2, r6, lr, r2
 8007a52:	ebaa 0303 	sub.w	r3, sl, r3
 8007a56:	f8dc a000 	ldr.w	sl, [ip]
 8007a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a5e:	fa1f fa8a 	uxth.w	sl, sl
 8007a62:	4453      	add	r3, sl
 8007a64:	f8dc a000 	ldr.w	sl, [ip]
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a78:	4581      	cmp	r9, r0
 8007a7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a82:	d2db      	bcs.n	8007a3c <quorem+0x42>
 8007a84:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a88:	b92b      	cbnz	r3, 8007a96 <quorem+0x9c>
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	3b04      	subs	r3, #4
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	d32d      	bcc.n	8007af0 <quorem+0xf6>
 8007a94:	613c      	str	r4, [r7, #16]
 8007a96:	4638      	mov	r0, r7
 8007a98:	f001 f994 	bl	8008dc4 <__mcmp>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	db23      	blt.n	8007ae8 <quorem+0xee>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aaa:	f8d1 c000 	ldr.w	ip, [r1]
 8007aae:	b293      	uxth	r3, r2
 8007ab0:	1ac3      	subs	r3, r0, r3
 8007ab2:	0c12      	lsrs	r2, r2, #16
 8007ab4:	fa1f f08c 	uxth.w	r0, ip
 8007ab8:	4403      	add	r3, r0
 8007aba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007abe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ac8:	45c1      	cmp	r9, r8
 8007aca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ace:	f841 3b04 	str.w	r3, [r1], #4
 8007ad2:	d2e8      	bcs.n	8007aa6 <quorem+0xac>
 8007ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007adc:	b922      	cbnz	r2, 8007ae8 <quorem+0xee>
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	d30a      	bcc.n	8007afc <quorem+0x102>
 8007ae6:	613c      	str	r4, [r7, #16]
 8007ae8:	4630      	mov	r0, r6
 8007aea:	b003      	add	sp, #12
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	3b04      	subs	r3, #4
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	d1cd      	bne.n	8007a94 <quorem+0x9a>
 8007af8:	3c01      	subs	r4, #1
 8007afa:	e7c8      	b.n	8007a8e <quorem+0x94>
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	3b04      	subs	r3, #4
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d1f0      	bne.n	8007ae6 <quorem+0xec>
 8007b04:	3c01      	subs	r4, #1
 8007b06:	e7eb      	b.n	8007ae0 <quorem+0xe6>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e7ee      	b.n	8007aea <quorem+0xf0>
 8007b0c:	0000      	movs	r0, r0
	...

08007b10 <_dtoa_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4616      	mov	r6, r2
 8007b16:	461f      	mov	r7, r3
 8007b18:	69c4      	ldr	r4, [r0, #28]
 8007b1a:	b099      	sub	sp, #100	; 0x64
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007b26:	b974      	cbnz	r4, 8007b46 <_dtoa_r+0x36>
 8007b28:	2010      	movs	r0, #16
 8007b2a:	f000 fe1d 	bl	8008768 <malloc>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	61e8      	str	r0, [r5, #28]
 8007b32:	b920      	cbnz	r0, 8007b3e <_dtoa_r+0x2e>
 8007b34:	21ef      	movs	r1, #239	; 0xef
 8007b36:	4bac      	ldr	r3, [pc, #688]	; (8007de8 <_dtoa_r+0x2d8>)
 8007b38:	48ac      	ldr	r0, [pc, #688]	; (8007dec <_dtoa_r+0x2dc>)
 8007b3a:	f001 fcc1 	bl	80094c0 <__assert_func>
 8007b3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b42:	6004      	str	r4, [r0, #0]
 8007b44:	60c4      	str	r4, [r0, #12]
 8007b46:	69eb      	ldr	r3, [r5, #28]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	b151      	cbz	r1, 8007b62 <_dtoa_r+0x52>
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4093      	lsls	r3, r2
 8007b52:	604a      	str	r2, [r1, #4]
 8007b54:	608b      	str	r3, [r1, #8]
 8007b56:	4628      	mov	r0, r5
 8007b58:	f000 fefa 	bl	8008950 <_Bfree>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	69eb      	ldr	r3, [r5, #28]
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	1e3b      	subs	r3, r7, #0
 8007b64:	bfaf      	iteee	ge
 8007b66:	2300      	movge	r3, #0
 8007b68:	2201      	movlt	r2, #1
 8007b6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b6e:	9305      	strlt	r3, [sp, #20]
 8007b70:	bfa8      	it	ge
 8007b72:	f8c8 3000 	strge.w	r3, [r8]
 8007b76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b7a:	4b9d      	ldr	r3, [pc, #628]	; (8007df0 <_dtoa_r+0x2e0>)
 8007b7c:	bfb8      	it	lt
 8007b7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b82:	ea33 0309 	bics.w	r3, r3, r9
 8007b86:	d119      	bne.n	8007bbc <_dtoa_r+0xac>
 8007b88:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b94:	4333      	orrs	r3, r6
 8007b96:	f000 8589 	beq.w	80086ac <_dtoa_r+0xb9c>
 8007b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b9c:	b953      	cbnz	r3, 8007bb4 <_dtoa_r+0xa4>
 8007b9e:	4b95      	ldr	r3, [pc, #596]	; (8007df4 <_dtoa_r+0x2e4>)
 8007ba0:	e023      	b.n	8007bea <_dtoa_r+0xda>
 8007ba2:	4b95      	ldr	r3, [pc, #596]	; (8007df8 <_dtoa_r+0x2e8>)
 8007ba4:	9303      	str	r3, [sp, #12]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	9803      	ldr	r0, [sp, #12]
 8007bae:	b019      	add	sp, #100	; 0x64
 8007bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb4:	4b8f      	ldr	r3, [pc, #572]	; (8007df4 <_dtoa_r+0x2e4>)
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	3303      	adds	r3, #3
 8007bba:	e7f5      	b.n	8007ba8 <_dtoa_r+0x98>
 8007bbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f7f8 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	b160      	cbz	r0, 8007bee <_dtoa_r+0xde>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8562 	beq.w	80086a6 <_dtoa_r+0xb96>
 8007be2:	4b86      	ldr	r3, [pc, #536]	; (8007dfc <_dtoa_r+0x2ec>)
 8007be4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	e7de      	b.n	8007bac <_dtoa_r+0x9c>
 8007bee:	ab16      	add	r3, sp, #88	; 0x58
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	ab17      	add	r3, sp, #92	; 0x5c
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bfc:	f001 f98a 	bl	8008f14 <__d2b>
 8007c00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c04:	4682      	mov	sl, r0
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d07e      	beq.n	8007d08 <_dtoa_r+0x1f8>
 8007c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c18:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c20:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007c24:	4619      	mov	r1, r3
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b75      	ldr	r3, [pc, #468]	; (8007e00 <_dtoa_r+0x2f0>)
 8007c2a:	f7f8 fa9d 	bl	8000168 <__aeabi_dsub>
 8007c2e:	a368      	add	r3, pc, #416	; (adr r3, 8007dd0 <_dtoa_r+0x2c0>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fc50 	bl	80004d8 <__aeabi_dmul>
 8007c38:	a367      	add	r3, pc, #412	; (adr r3, 8007dd8 <_dtoa_r+0x2c8>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fa95 	bl	800016c <__adddf3>
 8007c42:	4606      	mov	r6, r0
 8007c44:	4620      	mov	r0, r4
 8007c46:	460f      	mov	r7, r1
 8007c48:	f7f8 fbdc 	bl	8000404 <__aeabi_i2d>
 8007c4c:	a364      	add	r3, pc, #400	; (adr r3, 8007de0 <_dtoa_r+0x2d0>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 fc41 	bl	80004d8 <__aeabi_dmul>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fa85 	bl	800016c <__adddf3>
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f7f8 fee7 	bl	8000a38 <__aeabi_d2iz>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4683      	mov	fp, r0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fea2 	bl	80009bc <__aeabi_dcmplt>
 8007c78:	b148      	cbz	r0, 8007c8e <_dtoa_r+0x17e>
 8007c7a:	4658      	mov	r0, fp
 8007c7c:	f7f8 fbc2 	bl	8000404 <__aeabi_i2d>
 8007c80:	4632      	mov	r2, r6
 8007c82:	463b      	mov	r3, r7
 8007c84:	f7f8 fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8007c88:	b908      	cbnz	r0, 8007c8e <_dtoa_r+0x17e>
 8007c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c8e:	f1bb 0f16 	cmp.w	fp, #22
 8007c92:	d857      	bhi.n	8007d44 <_dtoa_r+0x234>
 8007c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c98:	4b5a      	ldr	r3, [pc, #360]	; (8007e04 <_dtoa_r+0x2f4>)
 8007c9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fe8b 	bl	80009bc <__aeabi_dcmplt>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d04e      	beq.n	8007d48 <_dtoa_r+0x238>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cb4:	1b1b      	subs	r3, r3, r4
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	bf46      	itte	mi
 8007cba:	f1c3 0901 	rsbmi	r9, r3, #1
 8007cbe:	2300      	movmi	r3, #0
 8007cc0:	f04f 0900 	movpl.w	r9, #0
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	bf48      	it	mi
 8007cc8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007cca:	f1bb 0f00 	cmp.w	fp, #0
 8007cce:	db3d      	blt.n	8007d4c <_dtoa_r+0x23c>
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007cd6:	445b      	add	r3, fp
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	2300      	movs	r3, #0
 8007cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007cde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ce0:	2b09      	cmp	r3, #9
 8007ce2:	d867      	bhi.n	8007db4 <_dtoa_r+0x2a4>
 8007ce4:	2b05      	cmp	r3, #5
 8007ce6:	bfc4      	itt	gt
 8007ce8:	3b04      	subgt	r3, #4
 8007cea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cee:	bfc8      	it	gt
 8007cf0:	2400      	movgt	r4, #0
 8007cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8007cf6:	bfd8      	it	le
 8007cf8:	2401      	movle	r4, #1
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	f200 8086 	bhi.w	8007e0c <_dtoa_r+0x2fc>
 8007d00:	e8df f003 	tbb	[pc, r3]
 8007d04:	5637392c 	.word	0x5637392c
 8007d08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007d0c:	441c      	add	r4, r3
 8007d0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	bfc1      	itttt	gt
 8007d16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d1a:	fa09 f903 	lslgt.w	r9, r9, r3
 8007d1e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007d22:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d26:	bfd6      	itet	le
 8007d28:	f1c3 0320 	rsble	r3, r3, #32
 8007d2c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007d30:	fa06 f003 	lslle.w	r0, r6, r3
 8007d34:	f7f8 fb56 	bl	80003e4 <__aeabi_ui2d>
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d3e:	3c01      	subs	r4, #1
 8007d40:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d42:	e76f      	b.n	8007c24 <_dtoa_r+0x114>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7b3      	b.n	8007cb0 <_dtoa_r+0x1a0>
 8007d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d4a:	e7b2      	b.n	8007cb2 <_dtoa_r+0x1a2>
 8007d4c:	f1cb 0300 	rsb	r3, fp, #0
 8007d50:	930a      	str	r3, [sp, #40]	; 0x28
 8007d52:	2300      	movs	r3, #0
 8007d54:	eba9 090b 	sub.w	r9, r9, fp
 8007d58:	930e      	str	r3, [sp, #56]	; 0x38
 8007d5a:	e7c0      	b.n	8007cde <_dtoa_r+0x1ce>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc55      	bgt.n	8007e12 <_dtoa_r+0x302>
 8007d66:	2301      	movs	r3, #1
 8007d68:	461a      	mov	r2, r3
 8007d6a:	9306      	str	r3, [sp, #24]
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d70:	e00b      	b.n	8007d8a <_dtoa_r+0x27a>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e7f3      	b.n	8007d5e <_dtoa_r+0x24e>
 8007d76:	2300      	movs	r3, #0
 8007d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d7c:	445b      	add	r3, fp
 8007d7e:	9306      	str	r3, [sp, #24]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	9308      	str	r3, [sp, #32]
 8007d86:	bfb8      	it	lt
 8007d88:	2301      	movlt	r3, #1
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	2204      	movs	r2, #4
 8007d8e:	69e8      	ldr	r0, [r5, #28]
 8007d90:	f102 0614 	add.w	r6, r2, #20
 8007d94:	429e      	cmp	r6, r3
 8007d96:	d940      	bls.n	8007e1a <_dtoa_r+0x30a>
 8007d98:	6041      	str	r1, [r0, #4]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f000 fd98 	bl	80088d0 <_Balloc>
 8007da0:	9003      	str	r0, [sp, #12]
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d13c      	bne.n	8007e20 <_dtoa_r+0x310>
 8007da6:	4602      	mov	r2, r0
 8007da8:	f240 11af 	movw	r1, #431	; 0x1af
 8007dac:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <_dtoa_r+0x2f8>)
 8007dae:	e6c3      	b.n	8007b38 <_dtoa_r+0x28>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7e1      	b.n	8007d78 <_dtoa_r+0x268>
 8007db4:	2401      	movs	r4, #1
 8007db6:	2300      	movs	r3, #0
 8007db8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007dba:	9322      	str	r3, [sp, #136]	; 0x88
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	9306      	str	r3, [sp, #24]
 8007dc4:	9308      	str	r3, [sp, #32]
 8007dc6:	2312      	movs	r3, #18
 8007dc8:	e7d1      	b.n	8007d6e <_dtoa_r+0x25e>
 8007dca:	bf00      	nop
 8007dcc:	f3af 8000 	nop.w
 8007dd0:	636f4361 	.word	0x636f4361
 8007dd4:	3fd287a7 	.word	0x3fd287a7
 8007dd8:	8b60c8b3 	.word	0x8b60c8b3
 8007ddc:	3fc68a28 	.word	0x3fc68a28
 8007de0:	509f79fb 	.word	0x509f79fb
 8007de4:	3fd34413 	.word	0x3fd34413
 8007de8:	0800b0ab 	.word	0x0800b0ab
 8007dec:	0800b0c2 	.word	0x0800b0c2
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800b0a7 	.word	0x0800b0a7
 8007df8:	0800b09e 	.word	0x0800b09e
 8007dfc:	0800b07b 	.word	0x0800b07b
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	0800b1b0 	.word	0x0800b1b0
 8007e08:	0800b11a 	.word	0x0800b11a
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e10:	e7d4      	b.n	8007dbc <_dtoa_r+0x2ac>
 8007e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	9308      	str	r3, [sp, #32]
 8007e18:	e7b7      	b.n	8007d8a <_dtoa_r+0x27a>
 8007e1a:	3101      	adds	r1, #1
 8007e1c:	0052      	lsls	r2, r2, #1
 8007e1e:	e7b7      	b.n	8007d90 <_dtoa_r+0x280>
 8007e20:	69eb      	ldr	r3, [r5, #28]
 8007e22:	9a03      	ldr	r2, [sp, #12]
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	9b08      	ldr	r3, [sp, #32]
 8007e28:	2b0e      	cmp	r3, #14
 8007e2a:	f200 80a8 	bhi.w	8007f7e <_dtoa_r+0x46e>
 8007e2e:	2c00      	cmp	r4, #0
 8007e30:	f000 80a5 	beq.w	8007f7e <_dtoa_r+0x46e>
 8007e34:	f1bb 0f00 	cmp.w	fp, #0
 8007e38:	dd34      	ble.n	8007ea4 <_dtoa_r+0x394>
 8007e3a:	4b9a      	ldr	r3, [pc, #616]	; (80080a4 <_dtoa_r+0x594>)
 8007e3c:	f00b 020f 	and.w	r2, fp, #15
 8007e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e50:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007e54:	d016      	beq.n	8007e84 <_dtoa_r+0x374>
 8007e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e5a:	4b93      	ldr	r3, [pc, #588]	; (80080a8 <_dtoa_r+0x598>)
 8007e5c:	2703      	movs	r7, #3
 8007e5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e62:	f7f8 fc63 	bl	800072c <__aeabi_ddiv>
 8007e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e6a:	f004 040f 	and.w	r4, r4, #15
 8007e6e:	4e8e      	ldr	r6, [pc, #568]	; (80080a8 <_dtoa_r+0x598>)
 8007e70:	b954      	cbnz	r4, 8007e88 <_dtoa_r+0x378>
 8007e72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e7a:	f7f8 fc57 	bl	800072c <__aeabi_ddiv>
 8007e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e82:	e029      	b.n	8007ed8 <_dtoa_r+0x3c8>
 8007e84:	2702      	movs	r7, #2
 8007e86:	e7f2      	b.n	8007e6e <_dtoa_r+0x35e>
 8007e88:	07e1      	lsls	r1, r4, #31
 8007e8a:	d508      	bpl.n	8007e9e <_dtoa_r+0x38e>
 8007e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e94:	f7f8 fb20 	bl	80004d8 <__aeabi_dmul>
 8007e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e9c:	3701      	adds	r7, #1
 8007e9e:	1064      	asrs	r4, r4, #1
 8007ea0:	3608      	adds	r6, #8
 8007ea2:	e7e5      	b.n	8007e70 <_dtoa_r+0x360>
 8007ea4:	f000 80a5 	beq.w	8007ff2 <_dtoa_r+0x4e2>
 8007ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eac:	f1cb 0400 	rsb	r4, fp, #0
 8007eb0:	4b7c      	ldr	r3, [pc, #496]	; (80080a4 <_dtoa_r+0x594>)
 8007eb2:	f004 020f 	and.w	r2, r4, #15
 8007eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fb0b 	bl	80004d8 <__aeabi_dmul>
 8007ec2:	2702      	movs	r7, #2
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eca:	4e77      	ldr	r6, [pc, #476]	; (80080a8 <_dtoa_r+0x598>)
 8007ecc:	1124      	asrs	r4, r4, #4
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	f040 8084 	bne.w	8007fdc <_dtoa_r+0x4cc>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1d2      	bne.n	8007e7e <_dtoa_r+0x36e>
 8007ed8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007edc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8087 	beq.w	8007ff6 <_dtoa_r+0x4e6>
 8007ee8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eec:	2200      	movs	r2, #0
 8007eee:	4b6f      	ldr	r3, [pc, #444]	; (80080ac <_dtoa_r+0x59c>)
 8007ef0:	f7f8 fd64 	bl	80009bc <__aeabi_dcmplt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d07e      	beq.n	8007ff6 <_dtoa_r+0x4e6>
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d07b      	beq.n	8007ff6 <_dtoa_r+0x4e6>
 8007efe:	9b06      	ldr	r3, [sp, #24]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd38      	ble.n	8007f76 <_dtoa_r+0x466>
 8007f04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4b69      	ldr	r3, [pc, #420]	; (80080b0 <_dtoa_r+0x5a0>)
 8007f0c:	f7f8 fae4 	bl	80004d8 <__aeabi_dmul>
 8007f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f14:	9c06      	ldr	r4, [sp, #24]
 8007f16:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7f8 fa71 	bl	8000404 <__aeabi_i2d>
 8007f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f26:	f7f8 fad7 	bl	80004d8 <__aeabi_dmul>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	4b61      	ldr	r3, [pc, #388]	; (80080b4 <_dtoa_r+0x5a4>)
 8007f2e:	f7f8 f91d 	bl	800016c <__adddf3>
 8007f32:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f3a:	9611      	str	r6, [sp, #68]	; 0x44
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	d15d      	bne.n	8007ffc <_dtoa_r+0x4ec>
 8007f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f44:	2200      	movs	r2, #0
 8007f46:	4b5c      	ldr	r3, [pc, #368]	; (80080b8 <_dtoa_r+0x5a8>)
 8007f48:	f7f8 f90e 	bl	8000168 <__aeabi_dsub>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f54:	4633      	mov	r3, r6
 8007f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f58:	f7f8 fd4e 	bl	80009f8 <__aeabi_dcmpgt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f040 8295 	bne.w	800848c <_dtoa_r+0x97c>
 8007f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f6c:	f7f8 fd26 	bl	80009bc <__aeabi_dcmplt>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f040 8289 	bne.w	8008488 <_dtoa_r+0x978>
 8007f76:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f2c0 8151 	blt.w	8008228 <_dtoa_r+0x718>
 8007f86:	f1bb 0f0e 	cmp.w	fp, #14
 8007f8a:	f300 814d 	bgt.w	8008228 <_dtoa_r+0x718>
 8007f8e:	4b45      	ldr	r3, [pc, #276]	; (80080a4 <_dtoa_r+0x594>)
 8007f90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f98:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f280 80da 	bge.w	8008158 <_dtoa_r+0x648>
 8007fa4:	9b08      	ldr	r3, [sp, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f300 80d6 	bgt.w	8008158 <_dtoa_r+0x648>
 8007fac:	f040 826b 	bne.w	8008486 <_dtoa_r+0x976>
 8007fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4b40      	ldr	r3, [pc, #256]	; (80080b8 <_dtoa_r+0x5a8>)
 8007fb8:	f7f8 fa8e 	bl	80004d8 <__aeabi_dmul>
 8007fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc0:	f7f8 fd10 	bl	80009e4 <__aeabi_dcmpge>
 8007fc4:	9c08      	ldr	r4, [sp, #32]
 8007fc6:	4626      	mov	r6, r4
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f040 8241 	bne.w	8008450 <_dtoa_r+0x940>
 8007fce:	2331      	movs	r3, #49	; 0x31
 8007fd0:	9f03      	ldr	r7, [sp, #12]
 8007fd2:	f10b 0b01 	add.w	fp, fp, #1
 8007fd6:	f807 3b01 	strb.w	r3, [r7], #1
 8007fda:	e23d      	b.n	8008458 <_dtoa_r+0x948>
 8007fdc:	07e2      	lsls	r2, r4, #31
 8007fde:	d505      	bpl.n	8007fec <_dtoa_r+0x4dc>
 8007fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fe4:	f7f8 fa78 	bl	80004d8 <__aeabi_dmul>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	3701      	adds	r7, #1
 8007fec:	1064      	asrs	r4, r4, #1
 8007fee:	3608      	adds	r6, #8
 8007ff0:	e76d      	b.n	8007ece <_dtoa_r+0x3be>
 8007ff2:	2702      	movs	r7, #2
 8007ff4:	e770      	b.n	8007ed8 <_dtoa_r+0x3c8>
 8007ff6:	46d8      	mov	r8, fp
 8007ff8:	9c08      	ldr	r4, [sp, #32]
 8007ffa:	e78f      	b.n	8007f1c <_dtoa_r+0x40c>
 8007ffc:	9903      	ldr	r1, [sp, #12]
 8007ffe:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <_dtoa_r+0x594>)
 8008000:	4421      	add	r1, r4
 8008002:	9112      	str	r1, [sp, #72]	; 0x48
 8008004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008006:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800800a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800800e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008012:	2900      	cmp	r1, #0
 8008014:	d054      	beq.n	80080c0 <_dtoa_r+0x5b0>
 8008016:	2000      	movs	r0, #0
 8008018:	4928      	ldr	r1, [pc, #160]	; (80080bc <_dtoa_r+0x5ac>)
 800801a:	f7f8 fb87 	bl	800072c <__aeabi_ddiv>
 800801e:	463b      	mov	r3, r7
 8008020:	4632      	mov	r2, r6
 8008022:	f7f8 f8a1 	bl	8000168 <__aeabi_dsub>
 8008026:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800802a:	9f03      	ldr	r7, [sp, #12]
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	f7f8 fd02 	bl	8000a38 <__aeabi_d2iz>
 8008034:	4604      	mov	r4, r0
 8008036:	f7f8 f9e5 	bl	8000404 <__aeabi_i2d>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008042:	f7f8 f891 	bl	8000168 <__aeabi_dsub>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	3430      	adds	r4, #48	; 0x30
 800804c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008050:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008054:	f807 4b01 	strb.w	r4, [r7], #1
 8008058:	f7f8 fcb0 	bl	80009bc <__aeabi_dcmplt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d173      	bne.n	8008148 <_dtoa_r+0x638>
 8008060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008064:	2000      	movs	r0, #0
 8008066:	4911      	ldr	r1, [pc, #68]	; (80080ac <_dtoa_r+0x59c>)
 8008068:	f7f8 f87e 	bl	8000168 <__aeabi_dsub>
 800806c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008070:	f7f8 fca4 	bl	80009bc <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f040 80b6 	bne.w	80081e6 <_dtoa_r+0x6d6>
 800807a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800807c:	429f      	cmp	r7, r3
 800807e:	f43f af7a 	beq.w	8007f76 <_dtoa_r+0x466>
 8008082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008086:	2200      	movs	r2, #0
 8008088:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <_dtoa_r+0x5a0>)
 800808a:	f7f8 fa25 	bl	80004d8 <__aeabi_dmul>
 800808e:	2200      	movs	r2, #0
 8008090:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008098:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <_dtoa_r+0x5a0>)
 800809a:	f7f8 fa1d 	bl	80004d8 <__aeabi_dmul>
 800809e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080a2:	e7c3      	b.n	800802c <_dtoa_r+0x51c>
 80080a4:	0800b1b0 	.word	0x0800b1b0
 80080a8:	0800b188 	.word	0x0800b188
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	40240000 	.word	0x40240000
 80080b4:	401c0000 	.word	0x401c0000
 80080b8:	40140000 	.word	0x40140000
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fa08 	bl	80004d8 <__aeabi_dmul>
 80080c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080ce:	9c03      	ldr	r4, [sp, #12]
 80080d0:	9314      	str	r3, [sp, #80]	; 0x50
 80080d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080d6:	f7f8 fcaf 	bl	8000a38 <__aeabi_d2iz>
 80080da:	9015      	str	r0, [sp, #84]	; 0x54
 80080dc:	f7f8 f992 	bl	8000404 <__aeabi_i2d>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e8:	f7f8 f83e 	bl	8000168 <__aeabi_dsub>
 80080ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ee:	4606      	mov	r6, r0
 80080f0:	3330      	adds	r3, #48	; 0x30
 80080f2:	f804 3b01 	strb.w	r3, [r4], #1
 80080f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080f8:	460f      	mov	r7, r1
 80080fa:	429c      	cmp	r4, r3
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	d124      	bne.n	800814c <_dtoa_r+0x63c>
 8008102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008106:	4baf      	ldr	r3, [pc, #700]	; (80083c4 <_dtoa_r+0x8b4>)
 8008108:	f7f8 f830 	bl	800016c <__adddf3>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fc70 	bl	80009f8 <__aeabi_dcmpgt>
 8008118:	2800      	cmp	r0, #0
 800811a:	d163      	bne.n	80081e4 <_dtoa_r+0x6d4>
 800811c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008120:	2000      	movs	r0, #0
 8008122:	49a8      	ldr	r1, [pc, #672]	; (80083c4 <_dtoa_r+0x8b4>)
 8008124:	f7f8 f820 	bl	8000168 <__aeabi_dsub>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fc44 	bl	80009bc <__aeabi_dcmplt>
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f af1e 	beq.w	8007f76 <_dtoa_r+0x466>
 800813a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800813c:	1e7b      	subs	r3, r7, #1
 800813e:	9314      	str	r3, [sp, #80]	; 0x50
 8008140:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	d0f8      	beq.n	800813a <_dtoa_r+0x62a>
 8008148:	46c3      	mov	fp, r8
 800814a:	e03b      	b.n	80081c4 <_dtoa_r+0x6b4>
 800814c:	4b9e      	ldr	r3, [pc, #632]	; (80083c8 <_dtoa_r+0x8b8>)
 800814e:	f7f8 f9c3 	bl	80004d8 <__aeabi_dmul>
 8008152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008156:	e7bc      	b.n	80080d2 <_dtoa_r+0x5c2>
 8008158:	9f03      	ldr	r7, [sp, #12]
 800815a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800815e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 fae1 	bl	800072c <__aeabi_ddiv>
 800816a:	f7f8 fc65 	bl	8000a38 <__aeabi_d2iz>
 800816e:	4604      	mov	r4, r0
 8008170:	f7f8 f948 	bl	8000404 <__aeabi_i2d>
 8008174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008178:	f7f8 f9ae 	bl	80004d8 <__aeabi_dmul>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4640      	mov	r0, r8
 8008182:	4649      	mov	r1, r9
 8008184:	f7f7 fff0 	bl	8000168 <__aeabi_dsub>
 8008188:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800818c:	f807 6b01 	strb.w	r6, [r7], #1
 8008190:	9e03      	ldr	r6, [sp, #12]
 8008192:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008196:	1bbe      	subs	r6, r7, r6
 8008198:	45b4      	cmp	ip, r6
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	d136      	bne.n	800820e <_dtoa_r+0x6fe>
 80081a0:	f7f7 ffe4 	bl	800016c <__adddf3>
 80081a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081a8:	4680      	mov	r8, r0
 80081aa:	4689      	mov	r9, r1
 80081ac:	f7f8 fc24 	bl	80009f8 <__aeabi_dcmpgt>
 80081b0:	bb58      	cbnz	r0, 800820a <_dtoa_r+0x6fa>
 80081b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 80081be:	b108      	cbz	r0, 80081c4 <_dtoa_r+0x6b4>
 80081c0:	07e3      	lsls	r3, r4, #31
 80081c2:	d422      	bmi.n	800820a <_dtoa_r+0x6fa>
 80081c4:	4651      	mov	r1, sl
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fbc2 	bl	8008950 <_Bfree>
 80081cc:	2300      	movs	r3, #0
 80081ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081d0:	703b      	strb	r3, [r7, #0]
 80081d2:	f10b 0301 	add.w	r3, fp, #1
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f43f ace6 	beq.w	8007bac <_dtoa_r+0x9c>
 80081e0:	601f      	str	r7, [r3, #0]
 80081e2:	e4e3      	b.n	8007bac <_dtoa_r+0x9c>
 80081e4:	4627      	mov	r7, r4
 80081e6:	463b      	mov	r3, r7
 80081e8:	461f      	mov	r7, r3
 80081ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081ee:	2a39      	cmp	r2, #57	; 0x39
 80081f0:	d107      	bne.n	8008202 <_dtoa_r+0x6f2>
 80081f2:	9a03      	ldr	r2, [sp, #12]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d1f7      	bne.n	80081e8 <_dtoa_r+0x6d8>
 80081f8:	2230      	movs	r2, #48	; 0x30
 80081fa:	9903      	ldr	r1, [sp, #12]
 80081fc:	f108 0801 	add.w	r8, r8, #1
 8008200:	700a      	strb	r2, [r1, #0]
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	3201      	adds	r2, #1
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	e79e      	b.n	8008148 <_dtoa_r+0x638>
 800820a:	46d8      	mov	r8, fp
 800820c:	e7eb      	b.n	80081e6 <_dtoa_r+0x6d6>
 800820e:	2200      	movs	r2, #0
 8008210:	4b6d      	ldr	r3, [pc, #436]	; (80083c8 <_dtoa_r+0x8b8>)
 8008212:	f7f8 f961 	bl	80004d8 <__aeabi_dmul>
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	4680      	mov	r8, r0
 800821c:	4689      	mov	r9, r1
 800821e:	f7f8 fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d09b      	beq.n	800815e <_dtoa_r+0x64e>
 8008226:	e7cd      	b.n	80081c4 <_dtoa_r+0x6b4>
 8008228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800822a:	2a00      	cmp	r2, #0
 800822c:	f000 80c4 	beq.w	80083b8 <_dtoa_r+0x8a8>
 8008230:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008232:	2a01      	cmp	r2, #1
 8008234:	f300 80a8 	bgt.w	8008388 <_dtoa_r+0x878>
 8008238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80a0 	beq.w	8008380 <_dtoa_r+0x870>
 8008240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008244:	464f      	mov	r7, r9
 8008246:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800824a:	2101      	movs	r1, #1
 800824c:	441a      	add	r2, r3
 800824e:	4628      	mov	r0, r5
 8008250:	4499      	add	r9, r3
 8008252:	9209      	str	r2, [sp, #36]	; 0x24
 8008254:	f000 fc32 	bl	8008abc <__i2b>
 8008258:	4606      	mov	r6, r0
 800825a:	b15f      	cbz	r7, 8008274 <_dtoa_r+0x764>
 800825c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	dd08      	ble.n	8008274 <_dtoa_r+0x764>
 8008262:	42bb      	cmp	r3, r7
 8008264:	bfa8      	it	ge
 8008266:	463b      	movge	r3, r7
 8008268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826a:	eba9 0903 	sub.w	r9, r9, r3
 800826e:	1aff      	subs	r7, r7, r3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	9309      	str	r3, [sp, #36]	; 0x24
 8008274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008276:	b1f3      	cbz	r3, 80082b6 <_dtoa_r+0x7a6>
 8008278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80a0 	beq.w	80083c0 <_dtoa_r+0x8b0>
 8008280:	2c00      	cmp	r4, #0
 8008282:	dd10      	ble.n	80082a6 <_dtoa_r+0x796>
 8008284:	4631      	mov	r1, r6
 8008286:	4622      	mov	r2, r4
 8008288:	4628      	mov	r0, r5
 800828a:	f000 fcd5 	bl	8008c38 <__pow5mult>
 800828e:	4652      	mov	r2, sl
 8008290:	4601      	mov	r1, r0
 8008292:	4606      	mov	r6, r0
 8008294:	4628      	mov	r0, r5
 8008296:	f000 fc27 	bl	8008ae8 <__multiply>
 800829a:	4680      	mov	r8, r0
 800829c:	4651      	mov	r1, sl
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 fb56 	bl	8008950 <_Bfree>
 80082a4:	46c2      	mov	sl, r8
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	1b1a      	subs	r2, r3, r4
 80082aa:	d004      	beq.n	80082b6 <_dtoa_r+0x7a6>
 80082ac:	4651      	mov	r1, sl
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fcc2 	bl	8008c38 <__pow5mult>
 80082b4:	4682      	mov	sl, r0
 80082b6:	2101      	movs	r1, #1
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fbff 	bl	8008abc <__i2b>
 80082be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c0:	4604      	mov	r4, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f340 8082 	ble.w	80083cc <_dtoa_r+0x8bc>
 80082c8:	461a      	mov	r2, r3
 80082ca:	4601      	mov	r1, r0
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 fcb3 	bl	8008c38 <__pow5mult>
 80082d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082d4:	4604      	mov	r4, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	dd7b      	ble.n	80083d2 <_dtoa_r+0x8c2>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082e4:	6918      	ldr	r0, [r3, #16]
 80082e6:	f000 fb9b 	bl	8008a20 <__hi0bits>
 80082ea:	f1c0 0020 	rsb	r0, r0, #32
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	4418      	add	r0, r3
 80082f2:	f010 001f 	ands.w	r0, r0, #31
 80082f6:	f000 8092 	beq.w	800841e <_dtoa_r+0x90e>
 80082fa:	f1c0 0320 	rsb	r3, r0, #32
 80082fe:	2b04      	cmp	r3, #4
 8008300:	f340 8085 	ble.w	800840e <_dtoa_r+0x8fe>
 8008304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008306:	f1c0 001c 	rsb	r0, r0, #28
 800830a:	4403      	add	r3, r0
 800830c:	4481      	add	r9, r0
 800830e:	4407      	add	r7, r0
 8008310:	9309      	str	r3, [sp, #36]	; 0x24
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	dd05      	ble.n	8008324 <_dtoa_r+0x814>
 8008318:	4651      	mov	r1, sl
 800831a:	464a      	mov	r2, r9
 800831c:	4628      	mov	r0, r5
 800831e:	f000 fce5 	bl	8008cec <__lshift>
 8008322:	4682      	mov	sl, r0
 8008324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	dd05      	ble.n	8008336 <_dtoa_r+0x826>
 800832a:	4621      	mov	r1, r4
 800832c:	461a      	mov	r2, r3
 800832e:	4628      	mov	r0, r5
 8008330:	f000 fcdc 	bl	8008cec <__lshift>
 8008334:	4604      	mov	r4, r0
 8008336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d072      	beq.n	8008422 <_dtoa_r+0x912>
 800833c:	4621      	mov	r1, r4
 800833e:	4650      	mov	r0, sl
 8008340:	f000 fd40 	bl	8008dc4 <__mcmp>
 8008344:	2800      	cmp	r0, #0
 8008346:	da6c      	bge.n	8008422 <_dtoa_r+0x912>
 8008348:	2300      	movs	r3, #0
 800834a:	4651      	mov	r1, sl
 800834c:	220a      	movs	r2, #10
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fb20 	bl	8008994 <__multadd>
 8008354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008356:	4682      	mov	sl, r0
 8008358:	f10b 3bff 	add.w	fp, fp, #4294967295
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 81ac 	beq.w	80086ba <_dtoa_r+0xbaa>
 8008362:	2300      	movs	r3, #0
 8008364:	4631      	mov	r1, r6
 8008366:	220a      	movs	r2, #10
 8008368:	4628      	mov	r0, r5
 800836a:	f000 fb13 	bl	8008994 <__multadd>
 800836e:	9b06      	ldr	r3, [sp, #24]
 8008370:	4606      	mov	r6, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	f300 8093 	bgt.w	800849e <_dtoa_r+0x98e>
 8008378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800837a:	2b02      	cmp	r3, #2
 800837c:	dc59      	bgt.n	8008432 <_dtoa_r+0x922>
 800837e:	e08e      	b.n	800849e <_dtoa_r+0x98e>
 8008380:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008382:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008386:	e75d      	b.n	8008244 <_dtoa_r+0x734>
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	1e5c      	subs	r4, r3, #1
 800838c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838e:	42a3      	cmp	r3, r4
 8008390:	bfbf      	itttt	lt
 8008392:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008394:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008396:	1ae3      	sublt	r3, r4, r3
 8008398:	18d2      	addlt	r2, r2, r3
 800839a:	bfa8      	it	ge
 800839c:	1b1c      	subge	r4, r3, r4
 800839e:	9b08      	ldr	r3, [sp, #32]
 80083a0:	bfbe      	ittt	lt
 80083a2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80083a4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80083a6:	2400      	movlt	r4, #0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfb5      	itete	lt
 80083ac:	eba9 0703 	sublt.w	r7, r9, r3
 80083b0:	464f      	movge	r7, r9
 80083b2:	2300      	movlt	r3, #0
 80083b4:	9b08      	ldrge	r3, [sp, #32]
 80083b6:	e747      	b.n	8008248 <_dtoa_r+0x738>
 80083b8:	464f      	mov	r7, r9
 80083ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80083be:	e74c      	b.n	800825a <_dtoa_r+0x74a>
 80083c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c2:	e773      	b.n	80082ac <_dtoa_r+0x79c>
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	40240000 	.word	0x40240000
 80083cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	dc18      	bgt.n	8008404 <_dtoa_r+0x8f4>
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	b9b3      	cbnz	r3, 8008404 <_dtoa_r+0x8f4>
 80083d6:	9b05      	ldr	r3, [sp, #20]
 80083d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083dc:	b993      	cbnz	r3, 8008404 <_dtoa_r+0x8f4>
 80083de:	9b05      	ldr	r3, [sp, #20]
 80083e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	0d1b      	lsrs	r3, r3, #20
 80083e6:	051b      	lsls	r3, r3, #20
 80083e8:	b17b      	cbz	r3, 800840a <_dtoa_r+0x8fa>
 80083ea:	f04f 0801 	mov.w	r8, #1
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	f109 0901 	add.w	r9, r9, #1
 80083f4:	3301      	adds	r3, #1
 80083f6:	9309      	str	r3, [sp, #36]	; 0x24
 80083f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f af6f 	bne.w	80082de <_dtoa_r+0x7ce>
 8008400:	2001      	movs	r0, #1
 8008402:	e774      	b.n	80082ee <_dtoa_r+0x7de>
 8008404:	f04f 0800 	mov.w	r8, #0
 8008408:	e7f6      	b.n	80083f8 <_dtoa_r+0x8e8>
 800840a:	4698      	mov	r8, r3
 800840c:	e7f4      	b.n	80083f8 <_dtoa_r+0x8e8>
 800840e:	d080      	beq.n	8008312 <_dtoa_r+0x802>
 8008410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008412:	331c      	adds	r3, #28
 8008414:	441a      	add	r2, r3
 8008416:	4499      	add	r9, r3
 8008418:	441f      	add	r7, r3
 800841a:	9209      	str	r2, [sp, #36]	; 0x24
 800841c:	e779      	b.n	8008312 <_dtoa_r+0x802>
 800841e:	4603      	mov	r3, r0
 8008420:	e7f6      	b.n	8008410 <_dtoa_r+0x900>
 8008422:	9b08      	ldr	r3, [sp, #32]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dc34      	bgt.n	8008492 <_dtoa_r+0x982>
 8008428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800842a:	2b02      	cmp	r3, #2
 800842c:	dd31      	ble.n	8008492 <_dtoa_r+0x982>
 800842e:	9b08      	ldr	r3, [sp, #32]
 8008430:	9306      	str	r3, [sp, #24]
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	b963      	cbnz	r3, 8008450 <_dtoa_r+0x940>
 8008436:	4621      	mov	r1, r4
 8008438:	2205      	movs	r2, #5
 800843a:	4628      	mov	r0, r5
 800843c:	f000 faaa 	bl	8008994 <__multadd>
 8008440:	4601      	mov	r1, r0
 8008442:	4604      	mov	r4, r0
 8008444:	4650      	mov	r0, sl
 8008446:	f000 fcbd 	bl	8008dc4 <__mcmp>
 800844a:	2800      	cmp	r0, #0
 800844c:	f73f adbf 	bgt.w	8007fce <_dtoa_r+0x4be>
 8008450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008452:	9f03      	ldr	r7, [sp, #12]
 8008454:	ea6f 0b03 	mvn.w	fp, r3
 8008458:	f04f 0800 	mov.w	r8, #0
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 fa76 	bl	8008950 <_Bfree>
 8008464:	2e00      	cmp	r6, #0
 8008466:	f43f aead 	beq.w	80081c4 <_dtoa_r+0x6b4>
 800846a:	f1b8 0f00 	cmp.w	r8, #0
 800846e:	d005      	beq.n	800847c <_dtoa_r+0x96c>
 8008470:	45b0      	cmp	r8, r6
 8008472:	d003      	beq.n	800847c <_dtoa_r+0x96c>
 8008474:	4641      	mov	r1, r8
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fa6a 	bl	8008950 <_Bfree>
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	f000 fa66 	bl	8008950 <_Bfree>
 8008484:	e69e      	b.n	80081c4 <_dtoa_r+0x6b4>
 8008486:	2400      	movs	r4, #0
 8008488:	4626      	mov	r6, r4
 800848a:	e7e1      	b.n	8008450 <_dtoa_r+0x940>
 800848c:	46c3      	mov	fp, r8
 800848e:	4626      	mov	r6, r4
 8008490:	e59d      	b.n	8007fce <_dtoa_r+0x4be>
 8008492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80c8 	beq.w	800862a <_dtoa_r+0xb1a>
 800849a:	9b08      	ldr	r3, [sp, #32]
 800849c:	9306      	str	r3, [sp, #24]
 800849e:	2f00      	cmp	r7, #0
 80084a0:	dd05      	ble.n	80084ae <_dtoa_r+0x99e>
 80084a2:	4631      	mov	r1, r6
 80084a4:	463a      	mov	r2, r7
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 fc20 	bl	8008cec <__lshift>
 80084ac:	4606      	mov	r6, r0
 80084ae:	f1b8 0f00 	cmp.w	r8, #0
 80084b2:	d05b      	beq.n	800856c <_dtoa_r+0xa5c>
 80084b4:	4628      	mov	r0, r5
 80084b6:	6871      	ldr	r1, [r6, #4]
 80084b8:	f000 fa0a 	bl	80088d0 <_Balloc>
 80084bc:	4607      	mov	r7, r0
 80084be:	b928      	cbnz	r0, 80084cc <_dtoa_r+0x9bc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80084c6:	4b81      	ldr	r3, [pc, #516]	; (80086cc <_dtoa_r+0xbbc>)
 80084c8:	f7ff bb36 	b.w	8007b38 <_dtoa_r+0x28>
 80084cc:	6932      	ldr	r2, [r6, #16]
 80084ce:	f106 010c 	add.w	r1, r6, #12
 80084d2:	3202      	adds	r2, #2
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	300c      	adds	r0, #12
 80084d8:	f7ff fa81 	bl	80079de <memcpy>
 80084dc:	2201      	movs	r2, #1
 80084de:	4639      	mov	r1, r7
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 fc03 	bl	8008cec <__lshift>
 80084e6:	46b0      	mov	r8, r6
 80084e8:	4606      	mov	r6, r0
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	9a03      	ldr	r2, [sp, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	4413      	add	r3, r2
 80084f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f8:	9b04      	ldr	r3, [sp, #16]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008500:	9b08      	ldr	r3, [sp, #32]
 8008502:	4621      	mov	r1, r4
 8008504:	3b01      	subs	r3, #1
 8008506:	4650      	mov	r0, sl
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	f7ff fa76 	bl	80079fa <quorem>
 800850e:	4641      	mov	r1, r8
 8008510:	9006      	str	r0, [sp, #24]
 8008512:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008516:	4650      	mov	r0, sl
 8008518:	f000 fc54 	bl	8008dc4 <__mcmp>
 800851c:	4632      	mov	r2, r6
 800851e:	9009      	str	r0, [sp, #36]	; 0x24
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 fc6a 	bl	8008dfc <__mdiff>
 8008528:	68c2      	ldr	r2, [r0, #12]
 800852a:	4607      	mov	r7, r0
 800852c:	bb02      	cbnz	r2, 8008570 <_dtoa_r+0xa60>
 800852e:	4601      	mov	r1, r0
 8008530:	4650      	mov	r0, sl
 8008532:	f000 fc47 	bl	8008dc4 <__mcmp>
 8008536:	4602      	mov	r2, r0
 8008538:	4639      	mov	r1, r7
 800853a:	4628      	mov	r0, r5
 800853c:	920c      	str	r2, [sp, #48]	; 0x30
 800853e:	f000 fa07 	bl	8008950 <_Bfree>
 8008542:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008546:	9f08      	ldr	r7, [sp, #32]
 8008548:	ea43 0102 	orr.w	r1, r3, r2
 800854c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854e:	4319      	orrs	r1, r3
 8008550:	d110      	bne.n	8008574 <_dtoa_r+0xa64>
 8008552:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008556:	d029      	beq.n	80085ac <_dtoa_r+0xa9c>
 8008558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	dd02      	ble.n	8008564 <_dtoa_r+0xa54>
 800855e:	9b06      	ldr	r3, [sp, #24]
 8008560:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008564:	9b04      	ldr	r3, [sp, #16]
 8008566:	f883 9000 	strb.w	r9, [r3]
 800856a:	e777      	b.n	800845c <_dtoa_r+0x94c>
 800856c:	4630      	mov	r0, r6
 800856e:	e7ba      	b.n	80084e6 <_dtoa_r+0x9d6>
 8008570:	2201      	movs	r2, #1
 8008572:	e7e1      	b.n	8008538 <_dtoa_r+0xa28>
 8008574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	db04      	blt.n	8008584 <_dtoa_r+0xa74>
 800857a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800857c:	430b      	orrs	r3, r1
 800857e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008580:	430b      	orrs	r3, r1
 8008582:	d120      	bne.n	80085c6 <_dtoa_r+0xab6>
 8008584:	2a00      	cmp	r2, #0
 8008586:	dded      	ble.n	8008564 <_dtoa_r+0xa54>
 8008588:	4651      	mov	r1, sl
 800858a:	2201      	movs	r2, #1
 800858c:	4628      	mov	r0, r5
 800858e:	f000 fbad 	bl	8008cec <__lshift>
 8008592:	4621      	mov	r1, r4
 8008594:	4682      	mov	sl, r0
 8008596:	f000 fc15 	bl	8008dc4 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	dc03      	bgt.n	80085a6 <_dtoa_r+0xa96>
 800859e:	d1e1      	bne.n	8008564 <_dtoa_r+0xa54>
 80085a0:	f019 0f01 	tst.w	r9, #1
 80085a4:	d0de      	beq.n	8008564 <_dtoa_r+0xa54>
 80085a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085aa:	d1d8      	bne.n	800855e <_dtoa_r+0xa4e>
 80085ac:	2339      	movs	r3, #57	; 0x39
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	7013      	strb	r3, [r2, #0]
 80085b2:	463b      	mov	r3, r7
 80085b4:	461f      	mov	r7, r3
 80085b6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	2a39      	cmp	r2, #57	; 0x39
 80085be:	d06b      	beq.n	8008698 <_dtoa_r+0xb88>
 80085c0:	3201      	adds	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e74a      	b.n	800845c <_dtoa_r+0x94c>
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	dd07      	ble.n	80085da <_dtoa_r+0xaca>
 80085ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085ce:	d0ed      	beq.n	80085ac <_dtoa_r+0xa9c>
 80085d0:	9a04      	ldr	r2, [sp, #16]
 80085d2:	f109 0301 	add.w	r3, r9, #1
 80085d6:	7013      	strb	r3, [r2, #0]
 80085d8:	e740      	b.n	800845c <_dtoa_r+0x94c>
 80085da:	9b08      	ldr	r3, [sp, #32]
 80085dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085de:	f803 9c01 	strb.w	r9, [r3, #-1]
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d042      	beq.n	800866c <_dtoa_r+0xb5c>
 80085e6:	4651      	mov	r1, sl
 80085e8:	2300      	movs	r3, #0
 80085ea:	220a      	movs	r2, #10
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 f9d1 	bl	8008994 <__multadd>
 80085f2:	45b0      	cmp	r8, r6
 80085f4:	4682      	mov	sl, r0
 80085f6:	f04f 0300 	mov.w	r3, #0
 80085fa:	f04f 020a 	mov.w	r2, #10
 80085fe:	4641      	mov	r1, r8
 8008600:	4628      	mov	r0, r5
 8008602:	d107      	bne.n	8008614 <_dtoa_r+0xb04>
 8008604:	f000 f9c6 	bl	8008994 <__multadd>
 8008608:	4680      	mov	r8, r0
 800860a:	4606      	mov	r6, r0
 800860c:	9b08      	ldr	r3, [sp, #32]
 800860e:	3301      	adds	r3, #1
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	e775      	b.n	8008500 <_dtoa_r+0x9f0>
 8008614:	f000 f9be 	bl	8008994 <__multadd>
 8008618:	4631      	mov	r1, r6
 800861a:	4680      	mov	r8, r0
 800861c:	2300      	movs	r3, #0
 800861e:	220a      	movs	r2, #10
 8008620:	4628      	mov	r0, r5
 8008622:	f000 f9b7 	bl	8008994 <__multadd>
 8008626:	4606      	mov	r6, r0
 8008628:	e7f0      	b.n	800860c <_dtoa_r+0xafc>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	9306      	str	r3, [sp, #24]
 800862e:	9f03      	ldr	r7, [sp, #12]
 8008630:	4621      	mov	r1, r4
 8008632:	4650      	mov	r0, sl
 8008634:	f7ff f9e1 	bl	80079fa <quorem>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800863e:	f807 9b01 	strb.w	r9, [r7], #1
 8008642:	1afa      	subs	r2, r7, r3
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	4293      	cmp	r3, r2
 8008648:	dd07      	ble.n	800865a <_dtoa_r+0xb4a>
 800864a:	4651      	mov	r1, sl
 800864c:	2300      	movs	r3, #0
 800864e:	220a      	movs	r2, #10
 8008650:	4628      	mov	r0, r5
 8008652:	f000 f99f 	bl	8008994 <__multadd>
 8008656:	4682      	mov	sl, r0
 8008658:	e7ea      	b.n	8008630 <_dtoa_r+0xb20>
 800865a:	9b06      	ldr	r3, [sp, #24]
 800865c:	f04f 0800 	mov.w	r8, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfcc      	ite	gt
 8008664:	461f      	movgt	r7, r3
 8008666:	2701      	movle	r7, #1
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	441f      	add	r7, r3
 800866c:	4651      	mov	r1, sl
 800866e:	2201      	movs	r2, #1
 8008670:	4628      	mov	r0, r5
 8008672:	f000 fb3b 	bl	8008cec <__lshift>
 8008676:	4621      	mov	r1, r4
 8008678:	4682      	mov	sl, r0
 800867a:	f000 fba3 	bl	8008dc4 <__mcmp>
 800867e:	2800      	cmp	r0, #0
 8008680:	dc97      	bgt.n	80085b2 <_dtoa_r+0xaa2>
 8008682:	d102      	bne.n	800868a <_dtoa_r+0xb7a>
 8008684:	f019 0f01 	tst.w	r9, #1
 8008688:	d193      	bne.n	80085b2 <_dtoa_r+0xaa2>
 800868a:	463b      	mov	r3, r7
 800868c:	461f      	mov	r7, r3
 800868e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008692:	2a30      	cmp	r2, #48	; 0x30
 8008694:	d0fa      	beq.n	800868c <_dtoa_r+0xb7c>
 8008696:	e6e1      	b.n	800845c <_dtoa_r+0x94c>
 8008698:	9a03      	ldr	r2, [sp, #12]
 800869a:	429a      	cmp	r2, r3
 800869c:	d18a      	bne.n	80085b4 <_dtoa_r+0xaa4>
 800869e:	2331      	movs	r3, #49	; 0x31
 80086a0:	f10b 0b01 	add.w	fp, fp, #1
 80086a4:	e797      	b.n	80085d6 <_dtoa_r+0xac6>
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <_dtoa_r+0xbc0>)
 80086a8:	f7ff ba9f 	b.w	8007bea <_dtoa_r+0xda>
 80086ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f47f aa77 	bne.w	8007ba2 <_dtoa_r+0x92>
 80086b4:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <_dtoa_r+0xbc4>)
 80086b6:	f7ff ba98 	b.w	8007bea <_dtoa_r+0xda>
 80086ba:	9b06      	ldr	r3, [sp, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dcb6      	bgt.n	800862e <_dtoa_r+0xb1e>
 80086c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	f73f aeb5 	bgt.w	8008432 <_dtoa_r+0x922>
 80086c8:	e7b1      	b.n	800862e <_dtoa_r+0xb1e>
 80086ca:	bf00      	nop
 80086cc:	0800b11a 	.word	0x0800b11a
 80086d0:	0800b07a 	.word	0x0800b07a
 80086d4:	0800b09e 	.word	0x0800b09e

080086d8 <_free_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4605      	mov	r5, r0
 80086dc:	2900      	cmp	r1, #0
 80086de:	d040      	beq.n	8008762 <_free_r+0x8a>
 80086e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e4:	1f0c      	subs	r4, r1, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfb8      	it	lt
 80086ea:	18e4      	addlt	r4, r4, r3
 80086ec:	f000 f8e4 	bl	80088b8 <__malloc_lock>
 80086f0:	4a1c      	ldr	r2, [pc, #112]	; (8008764 <_free_r+0x8c>)
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	b933      	cbnz	r3, 8008704 <_free_r+0x2c>
 80086f6:	6063      	str	r3, [r4, #4]
 80086f8:	6014      	str	r4, [r2, #0]
 80086fa:	4628      	mov	r0, r5
 80086fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008700:	f000 b8e0 	b.w	80088c4 <__malloc_unlock>
 8008704:	42a3      	cmp	r3, r4
 8008706:	d908      	bls.n	800871a <_free_r+0x42>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	1821      	adds	r1, r4, r0
 800870c:	428b      	cmp	r3, r1
 800870e:	bf01      	itttt	eq
 8008710:	6819      	ldreq	r1, [r3, #0]
 8008712:	685b      	ldreq	r3, [r3, #4]
 8008714:	1809      	addeq	r1, r1, r0
 8008716:	6021      	streq	r1, [r4, #0]
 8008718:	e7ed      	b.n	80086f6 <_free_r+0x1e>
 800871a:	461a      	mov	r2, r3
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	b10b      	cbz	r3, 8008724 <_free_r+0x4c>
 8008720:	42a3      	cmp	r3, r4
 8008722:	d9fa      	bls.n	800871a <_free_r+0x42>
 8008724:	6811      	ldr	r1, [r2, #0]
 8008726:	1850      	adds	r0, r2, r1
 8008728:	42a0      	cmp	r0, r4
 800872a:	d10b      	bne.n	8008744 <_free_r+0x6c>
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	4401      	add	r1, r0
 8008730:	1850      	adds	r0, r2, r1
 8008732:	4283      	cmp	r3, r0
 8008734:	6011      	str	r1, [r2, #0]
 8008736:	d1e0      	bne.n	80086fa <_free_r+0x22>
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	4408      	add	r0, r1
 800873e:	6010      	str	r0, [r2, #0]
 8008740:	6053      	str	r3, [r2, #4]
 8008742:	e7da      	b.n	80086fa <_free_r+0x22>
 8008744:	d902      	bls.n	800874c <_free_r+0x74>
 8008746:	230c      	movs	r3, #12
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	e7d6      	b.n	80086fa <_free_r+0x22>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	1821      	adds	r1, r4, r0
 8008750:	428b      	cmp	r3, r1
 8008752:	bf01      	itttt	eq
 8008754:	6819      	ldreq	r1, [r3, #0]
 8008756:	685b      	ldreq	r3, [r3, #4]
 8008758:	1809      	addeq	r1, r1, r0
 800875a:	6021      	streq	r1, [r4, #0]
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	6054      	str	r4, [r2, #4]
 8008760:	e7cb      	b.n	80086fa <_free_r+0x22>
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	20002c4c 	.word	0x20002c4c

08008768 <malloc>:
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <malloc+0xc>)
 800876a:	4601      	mov	r1, r0
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f000 b823 	b.w	80087b8 <_malloc_r>
 8008772:	bf00      	nop
 8008774:	20000068 	.word	0x20000068

08008778 <sbrk_aligned>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	4e0e      	ldr	r6, [pc, #56]	; (80087b4 <sbrk_aligned+0x3c>)
 800877c:	460c      	mov	r4, r1
 800877e:	6831      	ldr	r1, [r6, #0]
 8008780:	4605      	mov	r5, r0
 8008782:	b911      	cbnz	r1, 800878a <sbrk_aligned+0x12>
 8008784:	f000 fe8c 	bl	80094a0 <_sbrk_r>
 8008788:	6030      	str	r0, [r6, #0]
 800878a:	4621      	mov	r1, r4
 800878c:	4628      	mov	r0, r5
 800878e:	f000 fe87 	bl	80094a0 <_sbrk_r>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	d00a      	beq.n	80087ac <sbrk_aligned+0x34>
 8008796:	1cc4      	adds	r4, r0, #3
 8008798:	f024 0403 	bic.w	r4, r4, #3
 800879c:	42a0      	cmp	r0, r4
 800879e:	d007      	beq.n	80087b0 <sbrk_aligned+0x38>
 80087a0:	1a21      	subs	r1, r4, r0
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 fe7c 	bl	80094a0 <_sbrk_r>
 80087a8:	3001      	adds	r0, #1
 80087aa:	d101      	bne.n	80087b0 <sbrk_aligned+0x38>
 80087ac:	f04f 34ff 	mov.w	r4, #4294967295
 80087b0:	4620      	mov	r0, r4
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	20002c50 	.word	0x20002c50

080087b8 <_malloc_r>:
 80087b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	1ccd      	adds	r5, r1, #3
 80087be:	f025 0503 	bic.w	r5, r5, #3
 80087c2:	3508      	adds	r5, #8
 80087c4:	2d0c      	cmp	r5, #12
 80087c6:	bf38      	it	cc
 80087c8:	250c      	movcc	r5, #12
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	4607      	mov	r7, r0
 80087ce:	db01      	blt.n	80087d4 <_malloc_r+0x1c>
 80087d0:	42a9      	cmp	r1, r5
 80087d2:	d905      	bls.n	80087e0 <_malloc_r+0x28>
 80087d4:	230c      	movs	r3, #12
 80087d6:	2600      	movs	r6, #0
 80087d8:	603b      	str	r3, [r7, #0]
 80087da:	4630      	mov	r0, r6
 80087dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088b4 <_malloc_r+0xfc>
 80087e4:	f000 f868 	bl	80088b8 <__malloc_lock>
 80087e8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ec:	461c      	mov	r4, r3
 80087ee:	bb5c      	cbnz	r4, 8008848 <_malloc_r+0x90>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4638      	mov	r0, r7
 80087f4:	f7ff ffc0 	bl	8008778 <sbrk_aligned>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	4604      	mov	r4, r0
 80087fc:	d155      	bne.n	80088aa <_malloc_r+0xf2>
 80087fe:	f8d8 4000 	ldr.w	r4, [r8]
 8008802:	4626      	mov	r6, r4
 8008804:	2e00      	cmp	r6, #0
 8008806:	d145      	bne.n	8008894 <_malloc_r+0xdc>
 8008808:	2c00      	cmp	r4, #0
 800880a:	d048      	beq.n	800889e <_malloc_r+0xe6>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	4631      	mov	r1, r6
 8008810:	4638      	mov	r0, r7
 8008812:	eb04 0903 	add.w	r9, r4, r3
 8008816:	f000 fe43 	bl	80094a0 <_sbrk_r>
 800881a:	4581      	cmp	r9, r0
 800881c:	d13f      	bne.n	800889e <_malloc_r+0xe6>
 800881e:	6821      	ldr	r1, [r4, #0]
 8008820:	4638      	mov	r0, r7
 8008822:	1a6d      	subs	r5, r5, r1
 8008824:	4629      	mov	r1, r5
 8008826:	f7ff ffa7 	bl	8008778 <sbrk_aligned>
 800882a:	3001      	adds	r0, #1
 800882c:	d037      	beq.n	800889e <_malloc_r+0xe6>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	442b      	add	r3, r5
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	f8d8 3000 	ldr.w	r3, [r8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d038      	beq.n	80088ae <_malloc_r+0xf6>
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	42a2      	cmp	r2, r4
 8008840:	d12b      	bne.n	800889a <_malloc_r+0xe2>
 8008842:	2200      	movs	r2, #0
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	e00f      	b.n	8008868 <_malloc_r+0xb0>
 8008848:	6822      	ldr	r2, [r4, #0]
 800884a:	1b52      	subs	r2, r2, r5
 800884c:	d41f      	bmi.n	800888e <_malloc_r+0xd6>
 800884e:	2a0b      	cmp	r2, #11
 8008850:	d917      	bls.n	8008882 <_malloc_r+0xca>
 8008852:	1961      	adds	r1, r4, r5
 8008854:	42a3      	cmp	r3, r4
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	bf18      	it	ne
 800885a:	6059      	strne	r1, [r3, #4]
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	bf08      	it	eq
 8008860:	f8c8 1000 	streq.w	r1, [r8]
 8008864:	5162      	str	r2, [r4, r5]
 8008866:	604b      	str	r3, [r1, #4]
 8008868:	4638      	mov	r0, r7
 800886a:	f104 060b 	add.w	r6, r4, #11
 800886e:	f000 f829 	bl	80088c4 <__malloc_unlock>
 8008872:	f026 0607 	bic.w	r6, r6, #7
 8008876:	1d23      	adds	r3, r4, #4
 8008878:	1af2      	subs	r2, r6, r3
 800887a:	d0ae      	beq.n	80087da <_malloc_r+0x22>
 800887c:	1b9b      	subs	r3, r3, r6
 800887e:	50a3      	str	r3, [r4, r2]
 8008880:	e7ab      	b.n	80087da <_malloc_r+0x22>
 8008882:	42a3      	cmp	r3, r4
 8008884:	6862      	ldr	r2, [r4, #4]
 8008886:	d1dd      	bne.n	8008844 <_malloc_r+0x8c>
 8008888:	f8c8 2000 	str.w	r2, [r8]
 800888c:	e7ec      	b.n	8008868 <_malloc_r+0xb0>
 800888e:	4623      	mov	r3, r4
 8008890:	6864      	ldr	r4, [r4, #4]
 8008892:	e7ac      	b.n	80087ee <_malloc_r+0x36>
 8008894:	4634      	mov	r4, r6
 8008896:	6876      	ldr	r6, [r6, #4]
 8008898:	e7b4      	b.n	8008804 <_malloc_r+0x4c>
 800889a:	4613      	mov	r3, r2
 800889c:	e7cc      	b.n	8008838 <_malloc_r+0x80>
 800889e:	230c      	movs	r3, #12
 80088a0:	4638      	mov	r0, r7
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	f000 f80e 	bl	80088c4 <__malloc_unlock>
 80088a8:	e797      	b.n	80087da <_malloc_r+0x22>
 80088aa:	6025      	str	r5, [r4, #0]
 80088ac:	e7dc      	b.n	8008868 <_malloc_r+0xb0>
 80088ae:	605b      	str	r3, [r3, #4]
 80088b0:	deff      	udf	#255	; 0xff
 80088b2:	bf00      	nop
 80088b4:	20002c4c 	.word	0x20002c4c

080088b8 <__malloc_lock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_lock+0x8>)
 80088ba:	f7ff b880 	b.w	80079be <__retarget_lock_acquire_recursive>
 80088be:	bf00      	nop
 80088c0:	20002c48 	.word	0x20002c48

080088c4 <__malloc_unlock>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__malloc_unlock+0x8>)
 80088c6:	f7ff b87b 	b.w	80079c0 <__retarget_lock_release_recursive>
 80088ca:	bf00      	nop
 80088cc:	20002c48 	.word	0x20002c48

080088d0 <_Balloc>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	69c6      	ldr	r6, [r0, #28]
 80088d4:	4604      	mov	r4, r0
 80088d6:	460d      	mov	r5, r1
 80088d8:	b976      	cbnz	r6, 80088f8 <_Balloc+0x28>
 80088da:	2010      	movs	r0, #16
 80088dc:	f7ff ff44 	bl	8008768 <malloc>
 80088e0:	4602      	mov	r2, r0
 80088e2:	61e0      	str	r0, [r4, #28]
 80088e4:	b920      	cbnz	r0, 80088f0 <_Balloc+0x20>
 80088e6:	216b      	movs	r1, #107	; 0x6b
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <_Balloc+0x78>)
 80088ea:	4818      	ldr	r0, [pc, #96]	; (800894c <_Balloc+0x7c>)
 80088ec:	f000 fde8 	bl	80094c0 <__assert_func>
 80088f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f4:	6006      	str	r6, [r0, #0]
 80088f6:	60c6      	str	r6, [r0, #12]
 80088f8:	69e6      	ldr	r6, [r4, #28]
 80088fa:	68f3      	ldr	r3, [r6, #12]
 80088fc:	b183      	cbz	r3, 8008920 <_Balloc+0x50>
 80088fe:	69e3      	ldr	r3, [r4, #28]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008906:	b9b8      	cbnz	r0, 8008938 <_Balloc+0x68>
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f605 	lsl.w	r6, r1, r5
 800890e:	1d72      	adds	r2, r6, #5
 8008910:	4620      	mov	r0, r4
 8008912:	0092      	lsls	r2, r2, #2
 8008914:	f000 fdf2 	bl	80094fc <_calloc_r>
 8008918:	b160      	cbz	r0, 8008934 <_Balloc+0x64>
 800891a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800891e:	e00e      	b.n	800893e <_Balloc+0x6e>
 8008920:	2221      	movs	r2, #33	; 0x21
 8008922:	2104      	movs	r1, #4
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fde9 	bl	80094fc <_calloc_r>
 800892a:	69e3      	ldr	r3, [r4, #28]
 800892c:	60f0      	str	r0, [r6, #12]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e4      	bne.n	80088fe <_Balloc+0x2e>
 8008934:	2000      	movs	r0, #0
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	6802      	ldr	r2, [r0, #0]
 800893a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800893e:	2300      	movs	r3, #0
 8008940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008944:	e7f7      	b.n	8008936 <_Balloc+0x66>
 8008946:	bf00      	nop
 8008948:	0800b0ab 	.word	0x0800b0ab
 800894c:	0800b12b 	.word	0x0800b12b

08008950 <_Bfree>:
 8008950:	b570      	push	{r4, r5, r6, lr}
 8008952:	69c6      	ldr	r6, [r0, #28]
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b976      	cbnz	r6, 8008978 <_Bfree+0x28>
 800895a:	2010      	movs	r0, #16
 800895c:	f7ff ff04 	bl	8008768 <malloc>
 8008960:	4602      	mov	r2, r0
 8008962:	61e8      	str	r0, [r5, #28]
 8008964:	b920      	cbnz	r0, 8008970 <_Bfree+0x20>
 8008966:	218f      	movs	r1, #143	; 0x8f
 8008968:	4b08      	ldr	r3, [pc, #32]	; (800898c <_Bfree+0x3c>)
 800896a:	4809      	ldr	r0, [pc, #36]	; (8008990 <_Bfree+0x40>)
 800896c:	f000 fda8 	bl	80094c0 <__assert_func>
 8008970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008974:	6006      	str	r6, [r0, #0]
 8008976:	60c6      	str	r6, [r0, #12]
 8008978:	b13c      	cbz	r4, 800898a <_Bfree+0x3a>
 800897a:	69eb      	ldr	r3, [r5, #28]
 800897c:	6862      	ldr	r2, [r4, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008984:	6021      	str	r1, [r4, #0]
 8008986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	0800b0ab 	.word	0x0800b0ab
 8008990:	0800b12b 	.word	0x0800b12b

08008994 <__multadd>:
 8008994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	461e      	mov	r6, r3
 800899e:	2000      	movs	r0, #0
 80089a0:	690d      	ldr	r5, [r1, #16]
 80089a2:	f101 0c14 	add.w	ip, r1, #20
 80089a6:	f8dc 3000 	ldr.w	r3, [ip]
 80089aa:	3001      	adds	r0, #1
 80089ac:	b299      	uxth	r1, r3
 80089ae:	fb02 6101 	mla	r1, r2, r1, r6
 80089b2:	0c1e      	lsrs	r6, r3, #16
 80089b4:	0c0b      	lsrs	r3, r1, #16
 80089b6:	fb02 3306 	mla	r3, r2, r6, r3
 80089ba:	b289      	uxth	r1, r1
 80089bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089c0:	4285      	cmp	r5, r0
 80089c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089c6:	f84c 1b04 	str.w	r1, [ip], #4
 80089ca:	dcec      	bgt.n	80089a6 <__multadd+0x12>
 80089cc:	b30e      	cbz	r6, 8008a12 <__multadd+0x7e>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	dc19      	bgt.n	8008a08 <__multadd+0x74>
 80089d4:	6861      	ldr	r1, [r4, #4]
 80089d6:	4638      	mov	r0, r7
 80089d8:	3101      	adds	r1, #1
 80089da:	f7ff ff79 	bl	80088d0 <_Balloc>
 80089de:	4680      	mov	r8, r0
 80089e0:	b928      	cbnz	r0, 80089ee <__multadd+0x5a>
 80089e2:	4602      	mov	r2, r0
 80089e4:	21ba      	movs	r1, #186	; 0xba
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <__multadd+0x84>)
 80089e8:	480c      	ldr	r0, [pc, #48]	; (8008a1c <__multadd+0x88>)
 80089ea:	f000 fd69 	bl	80094c0 <__assert_func>
 80089ee:	6922      	ldr	r2, [r4, #16]
 80089f0:	f104 010c 	add.w	r1, r4, #12
 80089f4:	3202      	adds	r2, #2
 80089f6:	0092      	lsls	r2, r2, #2
 80089f8:	300c      	adds	r0, #12
 80089fa:	f7fe fff0 	bl	80079de <memcpy>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ffa5 	bl	8008950 <_Bfree>
 8008a06:	4644      	mov	r4, r8
 8008a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	615e      	str	r6, [r3, #20]
 8008a10:	6125      	str	r5, [r4, #16]
 8008a12:	4620      	mov	r0, r4
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	0800b11a 	.word	0x0800b11a
 8008a1c:	0800b12b 	.word	0x0800b12b

08008a20 <__hi0bits>:
 8008a20:	0c02      	lsrs	r2, r0, #16
 8008a22:	0412      	lsls	r2, r2, #16
 8008a24:	4603      	mov	r3, r0
 8008a26:	b9ca      	cbnz	r2, 8008a5c <__hi0bits+0x3c>
 8008a28:	0403      	lsls	r3, r0, #16
 8008a2a:	2010      	movs	r0, #16
 8008a2c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a30:	bf04      	itt	eq
 8008a32:	021b      	lsleq	r3, r3, #8
 8008a34:	3008      	addeq	r0, #8
 8008a36:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a3a:	bf04      	itt	eq
 8008a3c:	011b      	lsleq	r3, r3, #4
 8008a3e:	3004      	addeq	r0, #4
 8008a40:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a44:	bf04      	itt	eq
 8008a46:	009b      	lsleq	r3, r3, #2
 8008a48:	3002      	addeq	r0, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	db05      	blt.n	8008a5a <__hi0bits+0x3a>
 8008a4e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008a52:	f100 0001 	add.w	r0, r0, #1
 8008a56:	bf08      	it	eq
 8008a58:	2020      	moveq	r0, #32
 8008a5a:	4770      	bx	lr
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e7e5      	b.n	8008a2c <__hi0bits+0xc>

08008a60 <__lo0bits>:
 8008a60:	6803      	ldr	r3, [r0, #0]
 8008a62:	4602      	mov	r2, r0
 8008a64:	f013 0007 	ands.w	r0, r3, #7
 8008a68:	d00b      	beq.n	8008a82 <__lo0bits+0x22>
 8008a6a:	07d9      	lsls	r1, r3, #31
 8008a6c:	d421      	bmi.n	8008ab2 <__lo0bits+0x52>
 8008a6e:	0798      	lsls	r0, r3, #30
 8008a70:	bf49      	itett	mi
 8008a72:	085b      	lsrmi	r3, r3, #1
 8008a74:	089b      	lsrpl	r3, r3, #2
 8008a76:	2001      	movmi	r0, #1
 8008a78:	6013      	strmi	r3, [r2, #0]
 8008a7a:	bf5c      	itt	pl
 8008a7c:	2002      	movpl	r0, #2
 8008a7e:	6013      	strpl	r3, [r2, #0]
 8008a80:	4770      	bx	lr
 8008a82:	b299      	uxth	r1, r3
 8008a84:	b909      	cbnz	r1, 8008a8a <__lo0bits+0x2a>
 8008a86:	2010      	movs	r0, #16
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	b2d9      	uxtb	r1, r3
 8008a8c:	b909      	cbnz	r1, 8008a92 <__lo0bits+0x32>
 8008a8e:	3008      	adds	r0, #8
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	0719      	lsls	r1, r3, #28
 8008a94:	bf04      	itt	eq
 8008a96:	091b      	lsreq	r3, r3, #4
 8008a98:	3004      	addeq	r0, #4
 8008a9a:	0799      	lsls	r1, r3, #30
 8008a9c:	bf04      	itt	eq
 8008a9e:	089b      	lsreq	r3, r3, #2
 8008aa0:	3002      	addeq	r0, #2
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d403      	bmi.n	8008aae <__lo0bits+0x4e>
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	f100 0001 	add.w	r0, r0, #1
 8008aac:	d003      	beq.n	8008ab6 <__lo0bits+0x56>
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	4770      	bx	lr
 8008ab6:	2020      	movs	r0, #32
 8008ab8:	4770      	bx	lr
	...

08008abc <__i2b>:
 8008abc:	b510      	push	{r4, lr}
 8008abe:	460c      	mov	r4, r1
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	f7ff ff05 	bl	80088d0 <_Balloc>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	b928      	cbnz	r0, 8008ad6 <__i2b+0x1a>
 8008aca:	f240 1145 	movw	r1, #325	; 0x145
 8008ace:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <__i2b+0x24>)
 8008ad0:	4804      	ldr	r0, [pc, #16]	; (8008ae4 <__i2b+0x28>)
 8008ad2:	f000 fcf5 	bl	80094c0 <__assert_func>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	6144      	str	r4, [r0, #20]
 8008ada:	6103      	str	r3, [r0, #16]
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800b11a 	.word	0x0800b11a
 8008ae4:	0800b12b 	.word	0x0800b12b

08008ae8 <__multiply>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	4691      	mov	r9, r2
 8008aee:	690a      	ldr	r2, [r1, #16]
 8008af0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008af4:	460c      	mov	r4, r1
 8008af6:	429a      	cmp	r2, r3
 8008af8:	bfbe      	ittt	lt
 8008afa:	460b      	movlt	r3, r1
 8008afc:	464c      	movlt	r4, r9
 8008afe:	4699      	movlt	r9, r3
 8008b00:	6927      	ldr	r7, [r4, #16]
 8008b02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	6861      	ldr	r1, [r4, #4]
 8008b0a:	eb07 060a 	add.w	r6, r7, sl
 8008b0e:	42b3      	cmp	r3, r6
 8008b10:	b085      	sub	sp, #20
 8008b12:	bfb8      	it	lt
 8008b14:	3101      	addlt	r1, #1
 8008b16:	f7ff fedb 	bl	80088d0 <_Balloc>
 8008b1a:	b930      	cbnz	r0, 8008b2a <__multiply+0x42>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b22:	4b43      	ldr	r3, [pc, #268]	; (8008c30 <__multiply+0x148>)
 8008b24:	4843      	ldr	r0, [pc, #268]	; (8008c34 <__multiply+0x14c>)
 8008b26:	f000 fccb 	bl	80094c0 <__assert_func>
 8008b2a:	f100 0514 	add.w	r5, r0, #20
 8008b2e:	462b      	mov	r3, r5
 8008b30:	2200      	movs	r2, #0
 8008b32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b36:	4543      	cmp	r3, r8
 8008b38:	d321      	bcc.n	8008b7e <__multiply+0x96>
 8008b3a:	f104 0314 	add.w	r3, r4, #20
 8008b3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b42:	f109 0314 	add.w	r3, r9, #20
 8008b46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b4a:	9202      	str	r2, [sp, #8]
 8008b4c:	1b3a      	subs	r2, r7, r4
 8008b4e:	3a15      	subs	r2, #21
 8008b50:	f022 0203 	bic.w	r2, r2, #3
 8008b54:	3204      	adds	r2, #4
 8008b56:	f104 0115 	add.w	r1, r4, #21
 8008b5a:	428f      	cmp	r7, r1
 8008b5c:	bf38      	it	cc
 8008b5e:	2204      	movcc	r2, #4
 8008b60:	9201      	str	r2, [sp, #4]
 8008b62:	9a02      	ldr	r2, [sp, #8]
 8008b64:	9303      	str	r3, [sp, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d80c      	bhi.n	8008b84 <__multiply+0x9c>
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	dd03      	ble.n	8008b76 <__multiply+0x8e>
 8008b6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d05a      	beq.n	8008c2c <__multiply+0x144>
 8008b76:	6106      	str	r6, [r0, #16]
 8008b78:	b005      	add	sp, #20
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	f843 2b04 	str.w	r2, [r3], #4
 8008b82:	e7d8      	b.n	8008b36 <__multiply+0x4e>
 8008b84:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b88:	f1ba 0f00 	cmp.w	sl, #0
 8008b8c:	d023      	beq.n	8008bd6 <__multiply+0xee>
 8008b8e:	46a9      	mov	r9, r5
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	f104 0e14 	add.w	lr, r4, #20
 8008b98:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b9c:	f8d9 1000 	ldr.w	r1, [r9]
 8008ba0:	fa1f fb82 	uxth.w	fp, r2
 8008ba4:	b289      	uxth	r1, r1
 8008ba6:	fb0a 110b 	mla	r1, sl, fp, r1
 8008baa:	4461      	add	r1, ip
 8008bac:	f8d9 c000 	ldr.w	ip, [r9]
 8008bb0:	0c12      	lsrs	r2, r2, #16
 8008bb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008bb6:	fb0a c202 	mla	r2, sl, r2, ip
 8008bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bc4:	4577      	cmp	r7, lr
 8008bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bca:	f849 1b04 	str.w	r1, [r9], #4
 8008bce:	d8e3      	bhi.n	8008b98 <__multiply+0xb0>
 8008bd0:	9a01      	ldr	r2, [sp, #4]
 8008bd2:	f845 c002 	str.w	ip, [r5, r2]
 8008bd6:	9a03      	ldr	r2, [sp, #12]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bde:	f1b9 0f00 	cmp.w	r9, #0
 8008be2:	d021      	beq.n	8008c28 <__multiply+0x140>
 8008be4:	46ae      	mov	lr, r5
 8008be6:	f04f 0a00 	mov.w	sl, #0
 8008bea:	6829      	ldr	r1, [r5, #0]
 8008bec:	f104 0c14 	add.w	ip, r4, #20
 8008bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bf8:	b289      	uxth	r1, r1
 8008bfa:	fb09 220b 	mla	r2, r9, fp, r2
 8008bfe:	4452      	add	r2, sl
 8008c00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c04:	f84e 1b04 	str.w	r1, [lr], #4
 8008c08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c10:	f8be 1000 	ldrh.w	r1, [lr]
 8008c14:	4567      	cmp	r7, ip
 8008c16:	fb09 110a 	mla	r1, r9, sl, r1
 8008c1a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c22:	d8e5      	bhi.n	8008bf0 <__multiply+0x108>
 8008c24:	9a01      	ldr	r2, [sp, #4]
 8008c26:	50a9      	str	r1, [r5, r2]
 8008c28:	3504      	adds	r5, #4
 8008c2a:	e79a      	b.n	8008b62 <__multiply+0x7a>
 8008c2c:	3e01      	subs	r6, #1
 8008c2e:	e79c      	b.n	8008b6a <__multiply+0x82>
 8008c30:	0800b11a 	.word	0x0800b11a
 8008c34:	0800b12b 	.word	0x0800b12b

08008c38 <__pow5mult>:
 8008c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	f012 0203 	ands.w	r2, r2, #3
 8008c42:	4606      	mov	r6, r0
 8008c44:	460f      	mov	r7, r1
 8008c46:	d007      	beq.n	8008c58 <__pow5mult+0x20>
 8008c48:	4c25      	ldr	r4, [pc, #148]	; (8008ce0 <__pow5mult+0xa8>)
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c52:	f7ff fe9f 	bl	8008994 <__multadd>
 8008c56:	4607      	mov	r7, r0
 8008c58:	10ad      	asrs	r5, r5, #2
 8008c5a:	d03d      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008c5c:	69f4      	ldr	r4, [r6, #28]
 8008c5e:	b97c      	cbnz	r4, 8008c80 <__pow5mult+0x48>
 8008c60:	2010      	movs	r0, #16
 8008c62:	f7ff fd81 	bl	8008768 <malloc>
 8008c66:	4602      	mov	r2, r0
 8008c68:	61f0      	str	r0, [r6, #28]
 8008c6a:	b928      	cbnz	r0, 8008c78 <__pow5mult+0x40>
 8008c6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c70:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <__pow5mult+0xac>)
 8008c72:	481d      	ldr	r0, [pc, #116]	; (8008ce8 <__pow5mult+0xb0>)
 8008c74:	f000 fc24 	bl	80094c0 <__assert_func>
 8008c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c7c:	6004      	str	r4, [r0, #0]
 8008c7e:	60c4      	str	r4, [r0, #12]
 8008c80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c88:	b94c      	cbnz	r4, 8008c9e <__pow5mult+0x66>
 8008c8a:	f240 2171 	movw	r1, #625	; 0x271
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ff14 	bl	8008abc <__i2b>
 8008c94:	2300      	movs	r3, #0
 8008c96:	4604      	mov	r4, r0
 8008c98:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	07eb      	lsls	r3, r5, #31
 8008ca4:	d50a      	bpl.n	8008cbc <__pow5mult+0x84>
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ff1c 	bl	8008ae8 <__multiply>
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7ff fe4b 	bl	8008950 <_Bfree>
 8008cba:	4647      	mov	r7, r8
 8008cbc:	106d      	asrs	r5, r5, #1
 8008cbe:	d00b      	beq.n	8008cd8 <__pow5mult+0xa0>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	b938      	cbnz	r0, 8008cd4 <__pow5mult+0x9c>
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ff0d 	bl	8008ae8 <__multiply>
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	f8c0 9000 	str.w	r9, [r0]
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	e7e4      	b.n	8008ca2 <__pow5mult+0x6a>
 8008cd8:	4638      	mov	r0, r7
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	bf00      	nop
 8008ce0:	0800b278 	.word	0x0800b278
 8008ce4:	0800b0ab 	.word	0x0800b0ab
 8008ce8:	0800b12b 	.word	0x0800b12b

08008cec <__lshift>:
 8008cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	4691      	mov	r9, r2
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	6849      	ldr	r1, [r1, #4]
 8008cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d04:	f108 0601 	add.w	r6, r8, #1
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	db0b      	blt.n	8008d24 <__lshift+0x38>
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7ff fddf 	bl	80088d0 <_Balloc>
 8008d12:	4605      	mov	r5, r0
 8008d14:	b948      	cbnz	r0, 8008d2a <__lshift+0x3e>
 8008d16:	4602      	mov	r2, r0
 8008d18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d1c:	4b27      	ldr	r3, [pc, #156]	; (8008dbc <__lshift+0xd0>)
 8008d1e:	4828      	ldr	r0, [pc, #160]	; (8008dc0 <__lshift+0xd4>)
 8008d20:	f000 fbce 	bl	80094c0 <__assert_func>
 8008d24:	3101      	adds	r1, #1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	e7ee      	b.n	8008d08 <__lshift+0x1c>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f100 0114 	add.w	r1, r0, #20
 8008d30:	f100 0210 	add.w	r2, r0, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	4553      	cmp	r3, sl
 8008d38:	db33      	blt.n	8008da2 <__lshift+0xb6>
 8008d3a:	6920      	ldr	r0, [r4, #16]
 8008d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	f019 091f 	ands.w	r9, r9, #31
 8008d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d50:	d02b      	beq.n	8008daa <__lshift+0xbe>
 8008d52:	468a      	mov	sl, r1
 8008d54:	2200      	movs	r2, #0
 8008d56:	f1c9 0e20 	rsb	lr, r9, #32
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d60:	4310      	orrs	r0, r2
 8008d62:	f84a 0b04 	str.w	r0, [sl], #4
 8008d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d6a:	459c      	cmp	ip, r3
 8008d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d70:	d8f3      	bhi.n	8008d5a <__lshift+0x6e>
 8008d72:	ebac 0304 	sub.w	r3, ip, r4
 8008d76:	3b15      	subs	r3, #21
 8008d78:	f023 0303 	bic.w	r3, r3, #3
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	f104 0015 	add.w	r0, r4, #21
 8008d82:	4584      	cmp	ip, r0
 8008d84:	bf38      	it	cc
 8008d86:	2304      	movcc	r3, #4
 8008d88:	50ca      	str	r2, [r1, r3]
 8008d8a:	b10a      	cbz	r2, 8008d90 <__lshift+0xa4>
 8008d8c:	f108 0602 	add.w	r6, r8, #2
 8008d90:	3e01      	subs	r6, #1
 8008d92:	4638      	mov	r0, r7
 8008d94:	4621      	mov	r1, r4
 8008d96:	612e      	str	r6, [r5, #16]
 8008d98:	f7ff fdda 	bl	8008950 <_Bfree>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008da6:	3301      	adds	r3, #1
 8008da8:	e7c5      	b.n	8008d36 <__lshift+0x4a>
 8008daa:	3904      	subs	r1, #4
 8008dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db0:	459c      	cmp	ip, r3
 8008db2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db6:	d8f9      	bhi.n	8008dac <__lshift+0xc0>
 8008db8:	e7ea      	b.n	8008d90 <__lshift+0xa4>
 8008dba:	bf00      	nop
 8008dbc:	0800b11a 	.word	0x0800b11a
 8008dc0:	0800b12b 	.word	0x0800b12b

08008dc4 <__mcmp>:
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	690a      	ldr	r2, [r1, #16]
 8008dc8:	6900      	ldr	r0, [r0, #16]
 8008dca:	b530      	push	{r4, r5, lr}
 8008dcc:	1a80      	subs	r0, r0, r2
 8008dce:	d10d      	bne.n	8008dec <__mcmp+0x28>
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	3114      	adds	r1, #20
 8008dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008de4:	4295      	cmp	r5, r2
 8008de6:	d002      	beq.n	8008dee <__mcmp+0x2a>
 8008de8:	d304      	bcc.n	8008df4 <__mcmp+0x30>
 8008dea:	2001      	movs	r0, #1
 8008dec:	bd30      	pop	{r4, r5, pc}
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	d3f4      	bcc.n	8008ddc <__mcmp+0x18>
 8008df2:	e7fb      	b.n	8008dec <__mcmp+0x28>
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e7f8      	b.n	8008dec <__mcmp+0x28>
	...

08008dfc <__mdiff>:
 8008dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	460d      	mov	r5, r1
 8008e02:	4607      	mov	r7, r0
 8008e04:	4611      	mov	r1, r2
 8008e06:	4628      	mov	r0, r5
 8008e08:	4614      	mov	r4, r2
 8008e0a:	f7ff ffdb 	bl	8008dc4 <__mcmp>
 8008e0e:	1e06      	subs	r6, r0, #0
 8008e10:	d111      	bne.n	8008e36 <__mdiff+0x3a>
 8008e12:	4631      	mov	r1, r6
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff fd5b 	bl	80088d0 <_Balloc>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <__mdiff+0x2e>
 8008e1e:	f240 2137 	movw	r1, #567	; 0x237
 8008e22:	4b3a      	ldr	r3, [pc, #232]	; (8008f0c <__mdiff+0x110>)
 8008e24:	483a      	ldr	r0, [pc, #232]	; (8008f10 <__mdiff+0x114>)
 8008e26:	f000 fb4b 	bl	80094c0 <__assert_func>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e30:	4610      	mov	r0, r2
 8008e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	bfa4      	itt	ge
 8008e38:	4623      	movge	r3, r4
 8008e3a:	462c      	movge	r4, r5
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	6861      	ldr	r1, [r4, #4]
 8008e40:	bfa6      	itte	ge
 8008e42:	461d      	movge	r5, r3
 8008e44:	2600      	movge	r6, #0
 8008e46:	2601      	movlt	r6, #1
 8008e48:	f7ff fd42 	bl	80088d0 <_Balloc>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	b918      	cbnz	r0, 8008e58 <__mdiff+0x5c>
 8008e50:	f240 2145 	movw	r1, #581	; 0x245
 8008e54:	4b2d      	ldr	r3, [pc, #180]	; (8008f0c <__mdiff+0x110>)
 8008e56:	e7e5      	b.n	8008e24 <__mdiff+0x28>
 8008e58:	f102 0814 	add.w	r8, r2, #20
 8008e5c:	46c2      	mov	sl, r8
 8008e5e:	f04f 0c00 	mov.w	ip, #0
 8008e62:	6927      	ldr	r7, [r4, #16]
 8008e64:	60c6      	str	r6, [r0, #12]
 8008e66:	692e      	ldr	r6, [r5, #16]
 8008e68:	f104 0014 	add.w	r0, r4, #20
 8008e6c:	f105 0914 	add.w	r9, r5, #20
 8008e70:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e78:	3410      	adds	r4, #16
 8008e7a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008e7e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e82:	fa1f f18b 	uxth.w	r1, fp
 8008e86:	4461      	add	r1, ip
 8008e88:	fa1f fc83 	uxth.w	ip, r3
 8008e8c:	0c1b      	lsrs	r3, r3, #16
 8008e8e:	eba1 010c 	sub.w	r1, r1, ip
 8008e92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e96:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e9a:	b289      	uxth	r1, r1
 8008e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ea0:	454e      	cmp	r6, r9
 8008ea2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ea6:	f84a 1b04 	str.w	r1, [sl], #4
 8008eaa:	d8e6      	bhi.n	8008e7a <__mdiff+0x7e>
 8008eac:	1b73      	subs	r3, r6, r5
 8008eae:	3b15      	subs	r3, #21
 8008eb0:	f023 0303 	bic.w	r3, r3, #3
 8008eb4:	3515      	adds	r5, #21
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	42ae      	cmp	r6, r5
 8008eba:	bf38      	it	cc
 8008ebc:	2304      	movcc	r3, #4
 8008ebe:	4418      	add	r0, r3
 8008ec0:	4443      	add	r3, r8
 8008ec2:	461e      	mov	r6, r3
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	4575      	cmp	r5, lr
 8008ec8:	d30e      	bcc.n	8008ee8 <__mdiff+0xec>
 8008eca:	f10e 0103 	add.w	r1, lr, #3
 8008ece:	1a09      	subs	r1, r1, r0
 8008ed0:	f021 0103 	bic.w	r1, r1, #3
 8008ed4:	3803      	subs	r0, #3
 8008ed6:	4586      	cmp	lr, r0
 8008ed8:	bf38      	it	cc
 8008eda:	2100      	movcc	r1, #0
 8008edc:	440b      	add	r3, r1
 8008ede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ee2:	b189      	cbz	r1, 8008f08 <__mdiff+0x10c>
 8008ee4:	6117      	str	r7, [r2, #16]
 8008ee6:	e7a3      	b.n	8008e30 <__mdiff+0x34>
 8008ee8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008eec:	fa1f f188 	uxth.w	r1, r8
 8008ef0:	4461      	add	r1, ip
 8008ef2:	140c      	asrs	r4, r1, #16
 8008ef4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ef8:	b289      	uxth	r1, r1
 8008efa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008efe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008f02:	f846 1b04 	str.w	r1, [r6], #4
 8008f06:	e7de      	b.n	8008ec6 <__mdiff+0xca>
 8008f08:	3f01      	subs	r7, #1
 8008f0a:	e7e8      	b.n	8008ede <__mdiff+0xe2>
 8008f0c:	0800b11a 	.word	0x0800b11a
 8008f10:	0800b12b 	.word	0x0800b12b

08008f14 <__d2b>:
 8008f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f16:	2101      	movs	r1, #1
 8008f18:	4617      	mov	r7, r2
 8008f1a:	461c      	mov	r4, r3
 8008f1c:	9e08      	ldr	r6, [sp, #32]
 8008f1e:	f7ff fcd7 	bl	80088d0 <_Balloc>
 8008f22:	4605      	mov	r5, r0
 8008f24:	b930      	cbnz	r0, 8008f34 <__d2b+0x20>
 8008f26:	4602      	mov	r2, r0
 8008f28:	f240 310f 	movw	r1, #783	; 0x30f
 8008f2c:	4b22      	ldr	r3, [pc, #136]	; (8008fb8 <__d2b+0xa4>)
 8008f2e:	4823      	ldr	r0, [pc, #140]	; (8008fbc <__d2b+0xa8>)
 8008f30:	f000 fac6 	bl	80094c0 <__assert_func>
 8008f34:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008f38:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008f3c:	bb24      	cbnz	r4, 8008f88 <__d2b+0x74>
 8008f3e:	2f00      	cmp	r7, #0
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	d026      	beq.n	8008f92 <__d2b+0x7e>
 8008f44:	4668      	mov	r0, sp
 8008f46:	9700      	str	r7, [sp, #0]
 8008f48:	f7ff fd8a 	bl	8008a60 <__lo0bits>
 8008f4c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f50:	b1e8      	cbz	r0, 8008f8e <__d2b+0x7a>
 8008f52:	f1c0 0320 	rsb	r3, r0, #32
 8008f56:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	40c2      	lsrs	r2, r0
 8008f5e:	616b      	str	r3, [r5, #20]
 8008f60:	9201      	str	r2, [sp, #4]
 8008f62:	9b01      	ldr	r3, [sp, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf14      	ite	ne
 8008f68:	2102      	movne	r1, #2
 8008f6a:	2101      	moveq	r1, #1
 8008f6c:	61ab      	str	r3, [r5, #24]
 8008f6e:	6129      	str	r1, [r5, #16]
 8008f70:	b1bc      	cbz	r4, 8008fa2 <__d2b+0x8e>
 8008f72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f76:	4404      	add	r4, r0
 8008f78:	6034      	str	r4, [r6, #0]
 8008f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	6018      	str	r0, [r3, #0]
 8008f82:	4628      	mov	r0, r5
 8008f84:	b003      	add	sp, #12
 8008f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f8c:	e7d7      	b.n	8008f3e <__d2b+0x2a>
 8008f8e:	6169      	str	r1, [r5, #20]
 8008f90:	e7e7      	b.n	8008f62 <__d2b+0x4e>
 8008f92:	a801      	add	r0, sp, #4
 8008f94:	f7ff fd64 	bl	8008a60 <__lo0bits>
 8008f98:	9b01      	ldr	r3, [sp, #4]
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	616b      	str	r3, [r5, #20]
 8008f9e:	3020      	adds	r0, #32
 8008fa0:	e7e5      	b.n	8008f6e <__d2b+0x5a>
 8008fa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008fa6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008faa:	6030      	str	r0, [r6, #0]
 8008fac:	6918      	ldr	r0, [r3, #16]
 8008fae:	f7ff fd37 	bl	8008a20 <__hi0bits>
 8008fb2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008fb6:	e7e2      	b.n	8008f7e <__d2b+0x6a>
 8008fb8:	0800b11a 	.word	0x0800b11a
 8008fbc:	0800b12b 	.word	0x0800b12b

08008fc0 <__sfputc_r>:
 8008fc0:	6893      	ldr	r3, [r2, #8]
 8008fc2:	b410      	push	{r4}
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	6093      	str	r3, [r2, #8]
 8008fca:	da07      	bge.n	8008fdc <__sfputc_r+0x1c>
 8008fcc:	6994      	ldr	r4, [r2, #24]
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	db01      	blt.n	8008fd6 <__sfputc_r+0x16>
 8008fd2:	290a      	cmp	r1, #10
 8008fd4:	d102      	bne.n	8008fdc <__sfputc_r+0x1c>
 8008fd6:	bc10      	pop	{r4}
 8008fd8:	f7fe bb89 	b.w	80076ee <__swbuf_r>
 8008fdc:	6813      	ldr	r3, [r2, #0]
 8008fde:	1c58      	adds	r0, r3, #1
 8008fe0:	6010      	str	r0, [r2, #0]
 8008fe2:	7019      	strb	r1, [r3, #0]
 8008fe4:	4608      	mov	r0, r1
 8008fe6:	bc10      	pop	{r4}
 8008fe8:	4770      	bx	lr

08008fea <__sfputs_r>:
 8008fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fec:	4606      	mov	r6, r0
 8008fee:	460f      	mov	r7, r1
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	18d5      	adds	r5, r2, r3
 8008ff4:	42ac      	cmp	r4, r5
 8008ff6:	d101      	bne.n	8008ffc <__sfputs_r+0x12>
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	e007      	b.n	800900c <__sfputs_r+0x22>
 8008ffc:	463a      	mov	r2, r7
 8008ffe:	4630      	mov	r0, r6
 8009000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009004:	f7ff ffdc 	bl	8008fc0 <__sfputc_r>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d1f3      	bne.n	8008ff4 <__sfputs_r+0xa>
 800900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009010 <_vfiprintf_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	460d      	mov	r5, r1
 8009016:	4614      	mov	r4, r2
 8009018:	4698      	mov	r8, r3
 800901a:	4606      	mov	r6, r0
 800901c:	b09d      	sub	sp, #116	; 0x74
 800901e:	b118      	cbz	r0, 8009028 <_vfiprintf_r+0x18>
 8009020:	6a03      	ldr	r3, [r0, #32]
 8009022:	b90b      	cbnz	r3, 8009028 <_vfiprintf_r+0x18>
 8009024:	f7fe fa7c 	bl	8007520 <__sinit>
 8009028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x2a>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x2a>
 8009034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009036:	f7fe fcc2 	bl	80079be <__retarget_lock_acquire_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	d501      	bpl.n	8009044 <_vfiprintf_r+0x34>
 8009040:	692b      	ldr	r3, [r5, #16]
 8009042:	b99b      	cbnz	r3, 800906c <_vfiprintf_r+0x5c>
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f7fe fb8e 	bl	8007768 <__swsetup_r>
 800904c:	b170      	cbz	r0, 800906c <_vfiprintf_r+0x5c>
 800904e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009050:	07dc      	lsls	r4, r3, #31
 8009052:	d504      	bpl.n	800905e <_vfiprintf_r+0x4e>
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	b01d      	add	sp, #116	; 0x74
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	0598      	lsls	r0, r3, #22
 8009062:	d4f7      	bmi.n	8009054 <_vfiprintf_r+0x44>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7fe fcab 	bl	80079c0 <__retarget_lock_release_recursive>
 800906a:	e7f3      	b.n	8009054 <_vfiprintf_r+0x44>
 800906c:	2300      	movs	r3, #0
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	2320      	movs	r3, #32
 8009072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009076:	2330      	movs	r3, #48	; 0x30
 8009078:	f04f 0901 	mov.w	r9, #1
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009230 <_vfiprintf_r+0x220>
 8009084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009088:	4623      	mov	r3, r4
 800908a:	469a      	mov	sl, r3
 800908c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009090:	b10a      	cbz	r2, 8009096 <_vfiprintf_r+0x86>
 8009092:	2a25      	cmp	r2, #37	; 0x25
 8009094:	d1f9      	bne.n	800908a <_vfiprintf_r+0x7a>
 8009096:	ebba 0b04 	subs.w	fp, sl, r4
 800909a:	d00b      	beq.n	80090b4 <_vfiprintf_r+0xa4>
 800909c:	465b      	mov	r3, fp
 800909e:	4622      	mov	r2, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ffa1 	bl	8008fea <__sfputs_r>
 80090a8:	3001      	adds	r0, #1
 80090aa:	f000 80a9 	beq.w	8009200 <_vfiprintf_r+0x1f0>
 80090ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b0:	445a      	add	r2, fp
 80090b2:	9209      	str	r2, [sp, #36]	; 0x24
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80a1 	beq.w	8009200 <_vfiprintf_r+0x1f0>
 80090be:	2300      	movs	r3, #0
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090c8:	f10a 0a01 	add.w	sl, sl, #1
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d4:	931a      	str	r3, [sp, #104]	; 0x68
 80090d6:	4654      	mov	r4, sl
 80090d8:	2205      	movs	r2, #5
 80090da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090de:	4854      	ldr	r0, [pc, #336]	; (8009230 <_vfiprintf_r+0x220>)
 80090e0:	f7fe fc6f 	bl	80079c2 <memchr>
 80090e4:	9a04      	ldr	r2, [sp, #16]
 80090e6:	b9d8      	cbnz	r0, 8009120 <_vfiprintf_r+0x110>
 80090e8:	06d1      	lsls	r1, r2, #27
 80090ea:	bf44      	itt	mi
 80090ec:	2320      	movmi	r3, #32
 80090ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f2:	0713      	lsls	r3, r2, #28
 80090f4:	bf44      	itt	mi
 80090f6:	232b      	movmi	r3, #43	; 0x2b
 80090f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009100:	2b2a      	cmp	r3, #42	; 0x2a
 8009102:	d015      	beq.n	8009130 <_vfiprintf_r+0x120>
 8009104:	4654      	mov	r4, sl
 8009106:	2000      	movs	r0, #0
 8009108:	f04f 0c0a 	mov.w	ip, #10
 800910c:	9a07      	ldr	r2, [sp, #28]
 800910e:	4621      	mov	r1, r4
 8009110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009114:	3b30      	subs	r3, #48	; 0x30
 8009116:	2b09      	cmp	r3, #9
 8009118:	d94d      	bls.n	80091b6 <_vfiprintf_r+0x1a6>
 800911a:	b1b0      	cbz	r0, 800914a <_vfiprintf_r+0x13a>
 800911c:	9207      	str	r2, [sp, #28]
 800911e:	e014      	b.n	800914a <_vfiprintf_r+0x13a>
 8009120:	eba0 0308 	sub.w	r3, r0, r8
 8009124:	fa09 f303 	lsl.w	r3, r9, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	46a2      	mov	sl, r4
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	e7d2      	b.n	80090d6 <_vfiprintf_r+0xc6>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	1d19      	adds	r1, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	9103      	str	r1, [sp, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	bfbb      	ittet	lt
 800913c:	425b      	neglt	r3, r3
 800913e:	f042 0202 	orrlt.w	r2, r2, #2
 8009142:	9307      	strge	r3, [sp, #28]
 8009144:	9307      	strlt	r3, [sp, #28]
 8009146:	bfb8      	it	lt
 8009148:	9204      	strlt	r2, [sp, #16]
 800914a:	7823      	ldrb	r3, [r4, #0]
 800914c:	2b2e      	cmp	r3, #46	; 0x2e
 800914e:	d10c      	bne.n	800916a <_vfiprintf_r+0x15a>
 8009150:	7863      	ldrb	r3, [r4, #1]
 8009152:	2b2a      	cmp	r3, #42	; 0x2a
 8009154:	d134      	bne.n	80091c0 <_vfiprintf_r+0x1b0>
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	3402      	adds	r4, #2
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9203      	str	r2, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfb8      	it	lt
 8009164:	f04f 33ff 	movlt.w	r3, #4294967295
 8009168:	9305      	str	r3, [sp, #20]
 800916a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009234 <_vfiprintf_r+0x224>
 800916e:	2203      	movs	r2, #3
 8009170:	4650      	mov	r0, sl
 8009172:	7821      	ldrb	r1, [r4, #0]
 8009174:	f7fe fc25 	bl	80079c2 <memchr>
 8009178:	b138      	cbz	r0, 800918a <_vfiprintf_r+0x17a>
 800917a:	2240      	movs	r2, #64	; 0x40
 800917c:	9b04      	ldr	r3, [sp, #16]
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	4082      	lsls	r2, r0
 8009184:	4313      	orrs	r3, r2
 8009186:	3401      	adds	r4, #1
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918e:	2206      	movs	r2, #6
 8009190:	4829      	ldr	r0, [pc, #164]	; (8009238 <_vfiprintf_r+0x228>)
 8009192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009196:	f7fe fc14 	bl	80079c2 <memchr>
 800919a:	2800      	cmp	r0, #0
 800919c:	d03f      	beq.n	800921e <_vfiprintf_r+0x20e>
 800919e:	4b27      	ldr	r3, [pc, #156]	; (800923c <_vfiprintf_r+0x22c>)
 80091a0:	bb1b      	cbnz	r3, 80091ea <_vfiprintf_r+0x1da>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	3307      	adds	r3, #7
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	3308      	adds	r3, #8
 80091ac:	9303      	str	r3, [sp, #12]
 80091ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b0:	443b      	add	r3, r7
 80091b2:	9309      	str	r3, [sp, #36]	; 0x24
 80091b4:	e768      	b.n	8009088 <_vfiprintf_r+0x78>
 80091b6:	460c      	mov	r4, r1
 80091b8:	2001      	movs	r0, #1
 80091ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80091be:	e7a6      	b.n	800910e <_vfiprintf_r+0xfe>
 80091c0:	2300      	movs	r3, #0
 80091c2:	f04f 0c0a 	mov.w	ip, #10
 80091c6:	4619      	mov	r1, r3
 80091c8:	3401      	adds	r4, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	4620      	mov	r0, r4
 80091ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d2:	3a30      	subs	r2, #48	; 0x30
 80091d4:	2a09      	cmp	r2, #9
 80091d6:	d903      	bls.n	80091e0 <_vfiprintf_r+0x1d0>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0c6      	beq.n	800916a <_vfiprintf_r+0x15a>
 80091dc:	9105      	str	r1, [sp, #20]
 80091de:	e7c4      	b.n	800916a <_vfiprintf_r+0x15a>
 80091e0:	4604      	mov	r4, r0
 80091e2:	2301      	movs	r3, #1
 80091e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e8:	e7f0      	b.n	80091cc <_vfiprintf_r+0x1bc>
 80091ea:	ab03      	add	r3, sp, #12
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	462a      	mov	r2, r5
 80091f0:	4630      	mov	r0, r6
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <_vfiprintf_r+0x230>)
 80091f4:	a904      	add	r1, sp, #16
 80091f6:	f7fd fd45 	bl	8006c84 <_printf_float>
 80091fa:	4607      	mov	r7, r0
 80091fc:	1c78      	adds	r0, r7, #1
 80091fe:	d1d6      	bne.n	80091ae <_vfiprintf_r+0x19e>
 8009200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009202:	07d9      	lsls	r1, r3, #31
 8009204:	d405      	bmi.n	8009212 <_vfiprintf_r+0x202>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d402      	bmi.n	8009212 <_vfiprintf_r+0x202>
 800920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920e:	f7fe fbd7 	bl	80079c0 <__retarget_lock_release_recursive>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	065b      	lsls	r3, r3, #25
 8009216:	f53f af1d 	bmi.w	8009054 <_vfiprintf_r+0x44>
 800921a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921c:	e71c      	b.n	8009058 <_vfiprintf_r+0x48>
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	462a      	mov	r2, r5
 8009224:	4630      	mov	r0, r6
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <_vfiprintf_r+0x230>)
 8009228:	a904      	add	r1, sp, #16
 800922a:	f7fd ffcb 	bl	80071c4 <_printf_i>
 800922e:	e7e4      	b.n	80091fa <_vfiprintf_r+0x1ea>
 8009230:	0800b284 	.word	0x0800b284
 8009234:	0800b28a 	.word	0x0800b28a
 8009238:	0800b28e 	.word	0x0800b28e
 800923c:	08006c85 	.word	0x08006c85
 8009240:	08008feb 	.word	0x08008feb

08009244 <__sflush_r>:
 8009244:	898a      	ldrh	r2, [r1, #12]
 8009246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009248:	4605      	mov	r5, r0
 800924a:	0710      	lsls	r0, r2, #28
 800924c:	460c      	mov	r4, r1
 800924e:	d457      	bmi.n	8009300 <__sflush_r+0xbc>
 8009250:	684b      	ldr	r3, [r1, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dc04      	bgt.n	8009260 <__sflush_r+0x1c>
 8009256:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	dc01      	bgt.n	8009260 <__sflush_r+0x1c>
 800925c:	2000      	movs	r0, #0
 800925e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009262:	2e00      	cmp	r6, #0
 8009264:	d0fa      	beq.n	800925c <__sflush_r+0x18>
 8009266:	2300      	movs	r3, #0
 8009268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800926c:	682f      	ldr	r7, [r5, #0]
 800926e:	6a21      	ldr	r1, [r4, #32]
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	d032      	beq.n	80092da <__sflush_r+0x96>
 8009274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	075a      	lsls	r2, r3, #29
 800927a:	d505      	bpl.n	8009288 <__sflush_r+0x44>
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	1ac0      	subs	r0, r0, r3
 8009280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009282:	b10b      	cbz	r3, 8009288 <__sflush_r+0x44>
 8009284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009286:	1ac0      	subs	r0, r0, r3
 8009288:	2300      	movs	r3, #0
 800928a:	4602      	mov	r2, r0
 800928c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800928e:	4628      	mov	r0, r5
 8009290:	6a21      	ldr	r1, [r4, #32]
 8009292:	47b0      	blx	r6
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	d106      	bne.n	80092a8 <__sflush_r+0x64>
 800929a:	6829      	ldr	r1, [r5, #0]
 800929c:	291d      	cmp	r1, #29
 800929e:	d82b      	bhi.n	80092f8 <__sflush_r+0xb4>
 80092a0:	4a28      	ldr	r2, [pc, #160]	; (8009344 <__sflush_r+0x100>)
 80092a2:	410a      	asrs	r2, r1
 80092a4:	07d6      	lsls	r6, r2, #31
 80092a6:	d427      	bmi.n	80092f8 <__sflush_r+0xb4>
 80092a8:	2200      	movs	r2, #0
 80092aa:	6062      	str	r2, [r4, #4]
 80092ac:	6922      	ldr	r2, [r4, #16]
 80092ae:	04d9      	lsls	r1, r3, #19
 80092b0:	6022      	str	r2, [r4, #0]
 80092b2:	d504      	bpl.n	80092be <__sflush_r+0x7a>
 80092b4:	1c42      	adds	r2, r0, #1
 80092b6:	d101      	bne.n	80092bc <__sflush_r+0x78>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b903      	cbnz	r3, 80092be <__sflush_r+0x7a>
 80092bc:	6560      	str	r0, [r4, #84]	; 0x54
 80092be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092c0:	602f      	str	r7, [r5, #0]
 80092c2:	2900      	cmp	r1, #0
 80092c4:	d0ca      	beq.n	800925c <__sflush_r+0x18>
 80092c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092ca:	4299      	cmp	r1, r3
 80092cc:	d002      	beq.n	80092d4 <__sflush_r+0x90>
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7ff fa02 	bl	80086d8 <_free_r>
 80092d4:	2000      	movs	r0, #0
 80092d6:	6360      	str	r0, [r4, #52]	; 0x34
 80092d8:	e7c1      	b.n	800925e <__sflush_r+0x1a>
 80092da:	2301      	movs	r3, #1
 80092dc:	4628      	mov	r0, r5
 80092de:	47b0      	blx	r6
 80092e0:	1c41      	adds	r1, r0, #1
 80092e2:	d1c8      	bne.n	8009276 <__sflush_r+0x32>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c5      	beq.n	8009276 <__sflush_r+0x32>
 80092ea:	2b1d      	cmp	r3, #29
 80092ec:	d001      	beq.n	80092f2 <__sflush_r+0xae>
 80092ee:	2b16      	cmp	r3, #22
 80092f0:	d101      	bne.n	80092f6 <__sflush_r+0xb2>
 80092f2:	602f      	str	r7, [r5, #0]
 80092f4:	e7b2      	b.n	800925c <__sflush_r+0x18>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e7ae      	b.n	800925e <__sflush_r+0x1a>
 8009300:	690f      	ldr	r7, [r1, #16]
 8009302:	2f00      	cmp	r7, #0
 8009304:	d0aa      	beq.n	800925c <__sflush_r+0x18>
 8009306:	0793      	lsls	r3, r2, #30
 8009308:	bf18      	it	ne
 800930a:	2300      	movne	r3, #0
 800930c:	680e      	ldr	r6, [r1, #0]
 800930e:	bf08      	it	eq
 8009310:	694b      	ldreq	r3, [r1, #20]
 8009312:	1bf6      	subs	r6, r6, r7
 8009314:	600f      	str	r7, [r1, #0]
 8009316:	608b      	str	r3, [r1, #8]
 8009318:	2e00      	cmp	r6, #0
 800931a:	dd9f      	ble.n	800925c <__sflush_r+0x18>
 800931c:	4633      	mov	r3, r6
 800931e:	463a      	mov	r2, r7
 8009320:	4628      	mov	r0, r5
 8009322:	6a21      	ldr	r1, [r4, #32]
 8009324:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009328:	47e0      	blx	ip
 800932a:	2800      	cmp	r0, #0
 800932c:	dc06      	bgt.n	800933c <__sflush_r+0xf8>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	e790      	b.n	800925e <__sflush_r+0x1a>
 800933c:	4407      	add	r7, r0
 800933e:	1a36      	subs	r6, r6, r0
 8009340:	e7ea      	b.n	8009318 <__sflush_r+0xd4>
 8009342:	bf00      	nop
 8009344:	dfbffffe 	.word	0xdfbffffe

08009348 <_fflush_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	b913      	cbnz	r3, 8009358 <_fflush_r+0x10>
 8009352:	2500      	movs	r5, #0
 8009354:	4628      	mov	r0, r5
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	b118      	cbz	r0, 8009362 <_fflush_r+0x1a>
 800935a:	6a03      	ldr	r3, [r0, #32]
 800935c:	b90b      	cbnz	r3, 8009362 <_fflush_r+0x1a>
 800935e:	f7fe f8df 	bl	8007520 <__sinit>
 8009362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0f3      	beq.n	8009352 <_fflush_r+0xa>
 800936a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800936c:	07d0      	lsls	r0, r2, #31
 800936e:	d404      	bmi.n	800937a <_fflush_r+0x32>
 8009370:	0599      	lsls	r1, r3, #22
 8009372:	d402      	bmi.n	800937a <_fflush_r+0x32>
 8009374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009376:	f7fe fb22 	bl	80079be <__retarget_lock_acquire_recursive>
 800937a:	4628      	mov	r0, r5
 800937c:	4621      	mov	r1, r4
 800937e:	f7ff ff61 	bl	8009244 <__sflush_r>
 8009382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009384:	4605      	mov	r5, r0
 8009386:	07da      	lsls	r2, r3, #31
 8009388:	d4e4      	bmi.n	8009354 <_fflush_r+0xc>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	059b      	lsls	r3, r3, #22
 800938e:	d4e1      	bmi.n	8009354 <_fflush_r+0xc>
 8009390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009392:	f7fe fb15 	bl	80079c0 <__retarget_lock_release_recursive>
 8009396:	e7dd      	b.n	8009354 <_fflush_r+0xc>

08009398 <__swhatbuf_r>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	460c      	mov	r4, r1
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	4615      	mov	r5, r2
 80093a2:	2900      	cmp	r1, #0
 80093a4:	461e      	mov	r6, r3
 80093a6:	b096      	sub	sp, #88	; 0x58
 80093a8:	da0c      	bge.n	80093c4 <__swhatbuf_r+0x2c>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	2100      	movs	r1, #0
 80093ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80093b2:	bf0c      	ite	eq
 80093b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80093b8:	2340      	movne	r3, #64	; 0x40
 80093ba:	2000      	movs	r0, #0
 80093bc:	6031      	str	r1, [r6, #0]
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	b016      	add	sp, #88	; 0x58
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	466a      	mov	r2, sp
 80093c6:	f000 f849 	bl	800945c <_fstat_r>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	dbed      	blt.n	80093aa <__swhatbuf_r+0x12>
 80093ce:	9901      	ldr	r1, [sp, #4]
 80093d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80093d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80093d8:	4259      	negs	r1, r3
 80093da:	4159      	adcs	r1, r3
 80093dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e0:	e7eb      	b.n	80093ba <__swhatbuf_r+0x22>

080093e2 <__smakebuf_r>:
 80093e2:	898b      	ldrh	r3, [r1, #12]
 80093e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093e6:	079d      	lsls	r5, r3, #30
 80093e8:	4606      	mov	r6, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	d507      	bpl.n	80093fe <__smakebuf_r+0x1c>
 80093ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	2301      	movs	r3, #1
 80093f8:	6163      	str	r3, [r4, #20]
 80093fa:	b002      	add	sp, #8
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	466a      	mov	r2, sp
 8009400:	ab01      	add	r3, sp, #4
 8009402:	f7ff ffc9 	bl	8009398 <__swhatbuf_r>
 8009406:	9900      	ldr	r1, [sp, #0]
 8009408:	4605      	mov	r5, r0
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff f9d4 	bl	80087b8 <_malloc_r>
 8009410:	b948      	cbnz	r0, 8009426 <__smakebuf_r+0x44>
 8009412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009416:	059a      	lsls	r2, r3, #22
 8009418:	d4ef      	bmi.n	80093fa <__smakebuf_r+0x18>
 800941a:	f023 0303 	bic.w	r3, r3, #3
 800941e:	f043 0302 	orr.w	r3, r3, #2
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	e7e3      	b.n	80093ee <__smakebuf_r+0xc>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	6020      	str	r0, [r4, #0]
 800942a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	9b00      	ldr	r3, [sp, #0]
 8009432:	6120      	str	r0, [r4, #16]
 8009434:	6163      	str	r3, [r4, #20]
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	b15b      	cbz	r3, 8009452 <__smakebuf_r+0x70>
 800943a:	4630      	mov	r0, r6
 800943c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009440:	f000 f81e 	bl	8009480 <_isatty_r>
 8009444:	b128      	cbz	r0, 8009452 <__smakebuf_r+0x70>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	431d      	orrs	r5, r3
 8009456:	81a5      	strh	r5, [r4, #12]
 8009458:	e7cf      	b.n	80093fa <__smakebuf_r+0x18>
	...

0800945c <_fstat_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	2300      	movs	r3, #0
 8009460:	4d06      	ldr	r5, [pc, #24]	; (800947c <_fstat_r+0x20>)
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	f7f9 ffee 	bl	800344a <_fstat>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d102      	bne.n	8009478 <_fstat_r+0x1c>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b103      	cbz	r3, 8009478 <_fstat_r+0x1c>
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	bf00      	nop
 800947c:	20002c44 	.word	0x20002c44

08009480 <_isatty_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	2300      	movs	r3, #0
 8009484:	4d05      	ldr	r5, [pc, #20]	; (800949c <_isatty_r+0x1c>)
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f9 ffec 	bl	8003468 <_isatty>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_isatty_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_isatty_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20002c44 	.word	0x20002c44

080094a0 <_sbrk_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	2300      	movs	r3, #0
 80094a4:	4d05      	ldr	r5, [pc, #20]	; (80094bc <_sbrk_r+0x1c>)
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f9 fff2 	bl	8003494 <_sbrk>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_sbrk_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_sbrk_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20002c44 	.word	0x20002c44

080094c0 <__assert_func>:
 80094c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094c2:	4614      	mov	r4, r2
 80094c4:	461a      	mov	r2, r3
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <__assert_func+0x2c>)
 80094c8:	4605      	mov	r5, r0
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68d8      	ldr	r0, [r3, #12]
 80094ce:	b14c      	cbz	r4, 80094e4 <__assert_func+0x24>
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <__assert_func+0x30>)
 80094d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094d6:	9100      	str	r1, [sp, #0]
 80094d8:	462b      	mov	r3, r5
 80094da:	4906      	ldr	r1, [pc, #24]	; (80094f4 <__assert_func+0x34>)
 80094dc:	f000 f842 	bl	8009564 <fiprintf>
 80094e0:	f000 f852 	bl	8009588 <abort>
 80094e4:	4b04      	ldr	r3, [pc, #16]	; (80094f8 <__assert_func+0x38>)
 80094e6:	461c      	mov	r4, r3
 80094e8:	e7f3      	b.n	80094d2 <__assert_func+0x12>
 80094ea:	bf00      	nop
 80094ec:	20000068 	.word	0x20000068
 80094f0:	0800b29f 	.word	0x0800b29f
 80094f4:	0800b2ac 	.word	0x0800b2ac
 80094f8:	0800b2da 	.word	0x0800b2da

080094fc <_calloc_r>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009502:	b934      	cbnz	r4, 8009512 <_calloc_r+0x16>
 8009504:	4629      	mov	r1, r5
 8009506:	f7ff f957 	bl	80087b8 <_malloc_r>
 800950a:	4606      	mov	r6, r0
 800950c:	b928      	cbnz	r0, 800951a <_calloc_r+0x1e>
 800950e:	4630      	mov	r0, r6
 8009510:	bd70      	pop	{r4, r5, r6, pc}
 8009512:	220c      	movs	r2, #12
 8009514:	2600      	movs	r6, #0
 8009516:	6002      	str	r2, [r0, #0]
 8009518:	e7f9      	b.n	800950e <_calloc_r+0x12>
 800951a:	462a      	mov	r2, r5
 800951c:	4621      	mov	r1, r4
 800951e:	f7fe f97b 	bl	8007818 <memset>
 8009522:	e7f4      	b.n	800950e <_calloc_r+0x12>

08009524 <__ascii_mbtowc>:
 8009524:	b082      	sub	sp, #8
 8009526:	b901      	cbnz	r1, 800952a <__ascii_mbtowc+0x6>
 8009528:	a901      	add	r1, sp, #4
 800952a:	b142      	cbz	r2, 800953e <__ascii_mbtowc+0x1a>
 800952c:	b14b      	cbz	r3, 8009542 <__ascii_mbtowc+0x1e>
 800952e:	7813      	ldrb	r3, [r2, #0]
 8009530:	600b      	str	r3, [r1, #0]
 8009532:	7812      	ldrb	r2, [r2, #0]
 8009534:	1e10      	subs	r0, r2, #0
 8009536:	bf18      	it	ne
 8009538:	2001      	movne	r0, #1
 800953a:	b002      	add	sp, #8
 800953c:	4770      	bx	lr
 800953e:	4610      	mov	r0, r2
 8009540:	e7fb      	b.n	800953a <__ascii_mbtowc+0x16>
 8009542:	f06f 0001 	mvn.w	r0, #1
 8009546:	e7f8      	b.n	800953a <__ascii_mbtowc+0x16>

08009548 <__ascii_wctomb>:
 8009548:	4603      	mov	r3, r0
 800954a:	4608      	mov	r0, r1
 800954c:	b141      	cbz	r1, 8009560 <__ascii_wctomb+0x18>
 800954e:	2aff      	cmp	r2, #255	; 0xff
 8009550:	d904      	bls.n	800955c <__ascii_wctomb+0x14>
 8009552:	228a      	movs	r2, #138	; 0x8a
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	4770      	bx	lr
 800955c:	2001      	movs	r0, #1
 800955e:	700a      	strb	r2, [r1, #0]
 8009560:	4770      	bx	lr
	...

08009564 <fiprintf>:
 8009564:	b40e      	push	{r1, r2, r3}
 8009566:	b503      	push	{r0, r1, lr}
 8009568:	4601      	mov	r1, r0
 800956a:	ab03      	add	r3, sp, #12
 800956c:	4805      	ldr	r0, [pc, #20]	; (8009584 <fiprintf+0x20>)
 800956e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	f7ff fd4b 	bl	8009010 <_vfiprintf_r>
 800957a:	b002      	add	sp, #8
 800957c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009580:	b003      	add	sp, #12
 8009582:	4770      	bx	lr
 8009584:	20000068 	.word	0x20000068

08009588 <abort>:
 8009588:	2006      	movs	r0, #6
 800958a:	b508      	push	{r3, lr}
 800958c:	f000 f82c 	bl	80095e8 <raise>
 8009590:	2001      	movs	r0, #1
 8009592:	f7f9 ff28 	bl	80033e6 <_exit>

08009596 <_raise_r>:
 8009596:	291f      	cmp	r1, #31
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	460d      	mov	r5, r1
 800959e:	d904      	bls.n	80095aa <_raise_r+0x14>
 80095a0:	2316      	movs	r3, #22
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095ac:	b112      	cbz	r2, 80095b4 <_raise_r+0x1e>
 80095ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095b2:	b94b      	cbnz	r3, 80095c8 <_raise_r+0x32>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 f831 	bl	800961c <_getpid_r>
 80095ba:	462a      	mov	r2, r5
 80095bc:	4601      	mov	r1, r0
 80095be:	4620      	mov	r0, r4
 80095c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095c4:	f000 b818 	b.w	80095f8 <_kill_r>
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d00a      	beq.n	80095e2 <_raise_r+0x4c>
 80095cc:	1c59      	adds	r1, r3, #1
 80095ce:	d103      	bne.n	80095d8 <_raise_r+0x42>
 80095d0:	2316      	movs	r3, #22
 80095d2:	6003      	str	r3, [r0, #0]
 80095d4:	2001      	movs	r0, #1
 80095d6:	e7e7      	b.n	80095a8 <_raise_r+0x12>
 80095d8:	2400      	movs	r4, #0
 80095da:	4628      	mov	r0, r5
 80095dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095e0:	4798      	blx	r3
 80095e2:	2000      	movs	r0, #0
 80095e4:	e7e0      	b.n	80095a8 <_raise_r+0x12>
	...

080095e8 <raise>:
 80095e8:	4b02      	ldr	r3, [pc, #8]	; (80095f4 <raise+0xc>)
 80095ea:	4601      	mov	r1, r0
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f7ff bfd2 	b.w	8009596 <_raise_r>
 80095f2:	bf00      	nop
 80095f4:	20000068 	.word	0x20000068

080095f8 <_kill_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	2300      	movs	r3, #0
 80095fc:	4d06      	ldr	r5, [pc, #24]	; (8009618 <_kill_r+0x20>)
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	f7f9 fede 	bl	80033c6 <_kill>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d102      	bne.n	8009614 <_kill_r+0x1c>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b103      	cbz	r3, 8009614 <_kill_r+0x1c>
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	20002c44 	.word	0x20002c44

0800961c <_getpid_r>:
 800961c:	f7f9 becc 	b.w	80033b8 <_getpid>

08009620 <pow>:
 8009620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009624:	4614      	mov	r4, r2
 8009626:	461d      	mov	r5, r3
 8009628:	4680      	mov	r8, r0
 800962a:	4689      	mov	r9, r1
 800962c:	f000 f9e4 	bl	80099f8 <__ieee754_pow>
 8009630:	4622      	mov	r2, r4
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	462b      	mov	r3, r5
 8009638:	4620      	mov	r0, r4
 800963a:	4629      	mov	r1, r5
 800963c:	f7f7 f9e6 	bl	8000a0c <__aeabi_dcmpun>
 8009640:	bbc8      	cbnz	r0, 80096b6 <pow+0x96>
 8009642:	2200      	movs	r2, #0
 8009644:	2300      	movs	r3, #0
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f7 f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800964e:	b1b8      	cbz	r0, 8009680 <pow+0x60>
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800965c:	2800      	cmp	r0, #0
 800965e:	d141      	bne.n	80096e4 <pow+0xc4>
 8009660:	4620      	mov	r0, r4
 8009662:	4629      	mov	r1, r5
 8009664:	f000 f868 	bl	8009738 <finite>
 8009668:	b328      	cbz	r0, 80096b6 <pow+0x96>
 800966a:	2200      	movs	r2, #0
 800966c:	2300      	movs	r3, #0
 800966e:	4620      	mov	r0, r4
 8009670:	4629      	mov	r1, r5
 8009672:	f7f7 f9a3 	bl	80009bc <__aeabi_dcmplt>
 8009676:	b1f0      	cbz	r0, 80096b6 <pow+0x96>
 8009678:	f7fe f976 	bl	8007968 <__errno>
 800967c:	2322      	movs	r3, #34	; 0x22
 800967e:	e019      	b.n	80096b4 <pow+0x94>
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f000 f858 	bl	8009738 <finite>
 8009688:	b9c8      	cbnz	r0, 80096be <pow+0x9e>
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f000 f853 	bl	8009738 <finite>
 8009692:	b1a0      	cbz	r0, 80096be <pow+0x9e>
 8009694:	4620      	mov	r0, r4
 8009696:	4629      	mov	r1, r5
 8009698:	f000 f84e 	bl	8009738 <finite>
 800969c:	b178      	cbz	r0, 80096be <pow+0x9e>
 800969e:	4632      	mov	r2, r6
 80096a0:	463b      	mov	r3, r7
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f7 f9b1 	bl	8000a0c <__aeabi_dcmpun>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0e4      	beq.n	8009678 <pow+0x58>
 80096ae:	f7fe f95b 	bl	8007968 <__errno>
 80096b2:	2321      	movs	r3, #33	; 0x21
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	4630      	mov	r0, r6
 80096c4:	4639      	mov	r1, r7
 80096c6:	f7f7 f96f 	bl	80009a8 <__aeabi_dcmpeq>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f3      	beq.n	80096b6 <pow+0x96>
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	f000 f831 	bl	8009738 <finite>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d0ed      	beq.n	80096b6 <pow+0x96>
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	f000 f82b 	bl	8009738 <finite>
 80096e2:	e7c8      	b.n	8009676 <pow+0x56>
 80096e4:	2600      	movs	r6, #0
 80096e6:	4f01      	ldr	r7, [pc, #4]	; (80096ec <pow+0xcc>)
 80096e8:	e7e5      	b.n	80096b6 <pow+0x96>
 80096ea:	bf00      	nop
 80096ec:	3ff00000 	.word	0x3ff00000

080096f0 <sqrt>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	f000 f825 	bl	8009744 <__ieee754_sqrt>
 80096fa:	4632      	mov	r2, r6
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	463b      	mov	r3, r7
 8009702:	4630      	mov	r0, r6
 8009704:	4639      	mov	r1, r7
 8009706:	f7f7 f981 	bl	8000a0c <__aeabi_dcmpun>
 800970a:	b990      	cbnz	r0, 8009732 <sqrt+0x42>
 800970c:	2200      	movs	r2, #0
 800970e:	2300      	movs	r3, #0
 8009710:	4630      	mov	r0, r6
 8009712:	4639      	mov	r1, r7
 8009714:	f7f7 f952 	bl	80009bc <__aeabi_dcmplt>
 8009718:	b158      	cbz	r0, 8009732 <sqrt+0x42>
 800971a:	f7fe f925 	bl	8007968 <__errno>
 800971e:	2321      	movs	r3, #33	; 0x21
 8009720:	2200      	movs	r2, #0
 8009722:	6003      	str	r3, [r0, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	4610      	mov	r0, r2
 8009728:	4619      	mov	r1, r3
 800972a:	f7f6 ffff 	bl	800072c <__aeabi_ddiv>
 800972e:	4604      	mov	r4, r0
 8009730:	460d      	mov	r5, r1
 8009732:	4620      	mov	r0, r4
 8009734:	4629      	mov	r1, r5
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009738 <finite>:
 8009738:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800973c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009740:	0fc0      	lsrs	r0, r0, #31
 8009742:	4770      	bx	lr

08009744 <__ieee754_sqrt>:
 8009744:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80098e8 <__ieee754_sqrt+0x1a4>
 8009748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009750:	460b      	mov	r3, r1
 8009752:	4606      	mov	r6, r0
 8009754:	460d      	mov	r5, r1
 8009756:	460a      	mov	r2, r1
 8009758:	4604      	mov	r4, r0
 800975a:	d10e      	bne.n	800977a <__ieee754_sqrt+0x36>
 800975c:	4602      	mov	r2, r0
 800975e:	f7f6 febb 	bl	80004d8 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4630      	mov	r0, r6
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 fcff 	bl	800016c <__adddf3>
 800976e:	4606      	mov	r6, r0
 8009770:	460d      	mov	r5, r1
 8009772:	4630      	mov	r0, r6
 8009774:	4629      	mov	r1, r5
 8009776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	2900      	cmp	r1, #0
 800977c:	dc0d      	bgt.n	800979a <__ieee754_sqrt+0x56>
 800977e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009782:	ea5c 0c00 	orrs.w	ip, ip, r0
 8009786:	d0f4      	beq.n	8009772 <__ieee754_sqrt+0x2e>
 8009788:	b139      	cbz	r1, 800979a <__ieee754_sqrt+0x56>
 800978a:	4602      	mov	r2, r0
 800978c:	f7f6 fcec 	bl	8000168 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	f7f6 ffca 	bl	800072c <__aeabi_ddiv>
 8009798:	e7e9      	b.n	800976e <__ieee754_sqrt+0x2a>
 800979a:	1512      	asrs	r2, r2, #20
 800979c:	f000 8089 	beq.w	80098b2 <__ieee754_sqrt+0x16e>
 80097a0:	2500      	movs	r5, #0
 80097a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097a6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80097aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ae:	07d2      	lsls	r2, r2, #31
 80097b0:	bf5c      	itt	pl
 80097b2:	005b      	lslpl	r3, r3, #1
 80097b4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80097b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097bc:	bf58      	it	pl
 80097be:	0064      	lslpl	r4, r4, #1
 80097c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80097c4:	0062      	lsls	r2, r4, #1
 80097c6:	2016      	movs	r0, #22
 80097c8:	4629      	mov	r1, r5
 80097ca:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80097ce:	1076      	asrs	r6, r6, #1
 80097d0:	190f      	adds	r7, r1, r4
 80097d2:	429f      	cmp	r7, r3
 80097d4:	bfde      	ittt	le
 80097d6:	1bdb      	suble	r3, r3, r7
 80097d8:	1939      	addle	r1, r7, r4
 80097da:	192d      	addle	r5, r5, r4
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	3801      	subs	r0, #1
 80097e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80097e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80097e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80097ec:	d1f0      	bne.n	80097d0 <__ieee754_sqrt+0x8c>
 80097ee:	4604      	mov	r4, r0
 80097f0:	2720      	movs	r7, #32
 80097f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80097f6:	428b      	cmp	r3, r1
 80097f8:	eb0c 0e00 	add.w	lr, ip, r0
 80097fc:	dc02      	bgt.n	8009804 <__ieee754_sqrt+0xc0>
 80097fe:	d113      	bne.n	8009828 <__ieee754_sqrt+0xe4>
 8009800:	4596      	cmp	lr, r2
 8009802:	d811      	bhi.n	8009828 <__ieee754_sqrt+0xe4>
 8009804:	f1be 0f00 	cmp.w	lr, #0
 8009808:	eb0e 000c 	add.w	r0, lr, ip
 800980c:	da56      	bge.n	80098bc <__ieee754_sqrt+0x178>
 800980e:	2800      	cmp	r0, #0
 8009810:	db54      	blt.n	80098bc <__ieee754_sqrt+0x178>
 8009812:	f101 0801 	add.w	r8, r1, #1
 8009816:	1a5b      	subs	r3, r3, r1
 8009818:	4641      	mov	r1, r8
 800981a:	4596      	cmp	lr, r2
 800981c:	bf88      	it	hi
 800981e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009822:	eba2 020e 	sub.w	r2, r2, lr
 8009826:	4464      	add	r4, ip
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	3f01      	subs	r7, #1
 800982c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009830:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009834:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009838:	d1dd      	bne.n	80097f6 <__ieee754_sqrt+0xb2>
 800983a:	4313      	orrs	r3, r2
 800983c:	d01b      	beq.n	8009876 <__ieee754_sqrt+0x132>
 800983e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80098ec <__ieee754_sqrt+0x1a8>
 8009842:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80098f0 <__ieee754_sqrt+0x1ac>
 8009846:	e9da 0100 	ldrd	r0, r1, [sl]
 800984a:	e9db 2300 	ldrd	r2, r3, [fp]
 800984e:	f7f6 fc8b 	bl	8000168 <__aeabi_dsub>
 8009852:	e9da 8900 	ldrd	r8, r9, [sl]
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f7 f8b7 	bl	80009d0 <__aeabi_dcmple>
 8009862:	b140      	cbz	r0, 8009876 <__ieee754_sqrt+0x132>
 8009864:	e9da 0100 	ldrd	r0, r1, [sl]
 8009868:	e9db 2300 	ldrd	r2, r3, [fp]
 800986c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009870:	d126      	bne.n	80098c0 <__ieee754_sqrt+0x17c>
 8009872:	463c      	mov	r4, r7
 8009874:	3501      	adds	r5, #1
 8009876:	106b      	asrs	r3, r5, #1
 8009878:	0864      	lsrs	r4, r4, #1
 800987a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800987e:	07ea      	lsls	r2, r5, #31
 8009880:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009884:	bf48      	it	mi
 8009886:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800988a:	4620      	mov	r0, r4
 800988c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009890:	e76d      	b.n	800976e <__ieee754_sqrt+0x2a>
 8009892:	0ae3      	lsrs	r3, r4, #11
 8009894:	3915      	subs	r1, #21
 8009896:	0564      	lsls	r4, r4, #21
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0fa      	beq.n	8009892 <__ieee754_sqrt+0x14e>
 800989c:	02d8      	lsls	r0, r3, #11
 800989e:	d50a      	bpl.n	80098b6 <__ieee754_sqrt+0x172>
 80098a0:	f1c2 0020 	rsb	r0, r2, #32
 80098a4:	fa24 f000 	lsr.w	r0, r4, r0
 80098a8:	1e55      	subs	r5, r2, #1
 80098aa:	4094      	lsls	r4, r2
 80098ac:	4303      	orrs	r3, r0
 80098ae:	1b4a      	subs	r2, r1, r5
 80098b0:	e776      	b.n	80097a0 <__ieee754_sqrt+0x5c>
 80098b2:	4611      	mov	r1, r2
 80098b4:	e7f0      	b.n	8009898 <__ieee754_sqrt+0x154>
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	3201      	adds	r2, #1
 80098ba:	e7ef      	b.n	800989c <__ieee754_sqrt+0x158>
 80098bc:	4688      	mov	r8, r1
 80098be:	e7aa      	b.n	8009816 <__ieee754_sqrt+0xd2>
 80098c0:	f7f6 fc54 	bl	800016c <__adddf3>
 80098c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7f7 f874 	bl	80009bc <__aeabi_dcmplt>
 80098d4:	b120      	cbz	r0, 80098e0 <__ieee754_sqrt+0x19c>
 80098d6:	1ca1      	adds	r1, r4, #2
 80098d8:	bf08      	it	eq
 80098da:	3501      	addeq	r5, #1
 80098dc:	3402      	adds	r4, #2
 80098de:	e7ca      	b.n	8009876 <__ieee754_sqrt+0x132>
 80098e0:	3401      	adds	r4, #1
 80098e2:	f024 0401 	bic.w	r4, r4, #1
 80098e6:	e7c6      	b.n	8009876 <__ieee754_sqrt+0x132>
 80098e8:	7ff00000 	.word	0x7ff00000
 80098ec:	200001d8 	.word	0x200001d8
 80098f0:	200001e0 	.word	0x200001e0
 80098f4:	00000000 	.word	0x00000000

080098f8 <floor>:
 80098f8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009900:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009904:	2e13      	cmp	r6, #19
 8009906:	460b      	mov	r3, r1
 8009908:	4607      	mov	r7, r0
 800990a:	460c      	mov	r4, r1
 800990c:	4605      	mov	r5, r0
 800990e:	dc32      	bgt.n	8009976 <floor+0x7e>
 8009910:	2e00      	cmp	r6, #0
 8009912:	da14      	bge.n	800993e <floor+0x46>
 8009914:	a334      	add	r3, pc, #208	; (adr r3, 80099e8 <floor+0xf0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fc27 	bl	800016c <__adddf3>
 800991e:	2200      	movs	r2, #0
 8009920:	2300      	movs	r3, #0
 8009922:	f7f7 f869 	bl	80009f8 <__aeabi_dcmpgt>
 8009926:	b138      	cbz	r0, 8009938 <floor+0x40>
 8009928:	2c00      	cmp	r4, #0
 800992a:	da56      	bge.n	80099da <floor+0xe2>
 800992c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009930:	4325      	orrs	r5, r4
 8009932:	d055      	beq.n	80099e0 <floor+0xe8>
 8009934:	2500      	movs	r5, #0
 8009936:	4c2e      	ldr	r4, [pc, #184]	; (80099f0 <floor+0xf8>)
 8009938:	4623      	mov	r3, r4
 800993a:	462f      	mov	r7, r5
 800993c:	e025      	b.n	800998a <floor+0x92>
 800993e:	4a2d      	ldr	r2, [pc, #180]	; (80099f4 <floor+0xfc>)
 8009940:	fa42 f806 	asr.w	r8, r2, r6
 8009944:	ea01 0208 	and.w	r2, r1, r8
 8009948:	4302      	orrs	r2, r0
 800994a:	d01e      	beq.n	800998a <floor+0x92>
 800994c:	a326      	add	r3, pc, #152	; (adr r3, 80099e8 <floor+0xf0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fc0b 	bl	800016c <__adddf3>
 8009956:	2200      	movs	r2, #0
 8009958:	2300      	movs	r3, #0
 800995a:	f7f7 f84d 	bl	80009f8 <__aeabi_dcmpgt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0ea      	beq.n	8009938 <floor+0x40>
 8009962:	2c00      	cmp	r4, #0
 8009964:	bfbe      	ittt	lt
 8009966:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800996a:	4133      	asrlt	r3, r6
 800996c:	18e4      	addlt	r4, r4, r3
 800996e:	2500      	movs	r5, #0
 8009970:	ea24 0408 	bic.w	r4, r4, r8
 8009974:	e7e0      	b.n	8009938 <floor+0x40>
 8009976:	2e33      	cmp	r6, #51	; 0x33
 8009978:	dd0b      	ble.n	8009992 <floor+0x9a>
 800997a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800997e:	d104      	bne.n	800998a <floor+0x92>
 8009980:	4602      	mov	r2, r0
 8009982:	f7f6 fbf3 	bl	800016c <__adddf3>
 8009986:	4607      	mov	r7, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4638      	mov	r0, r7
 800998c:	4619      	mov	r1, r3
 800998e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009992:	f04f 38ff 	mov.w	r8, #4294967295
 8009996:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800999a:	fa28 f802 	lsr.w	r8, r8, r2
 800999e:	ea10 0f08 	tst.w	r0, r8
 80099a2:	d0f2      	beq.n	800998a <floor+0x92>
 80099a4:	a310      	add	r3, pc, #64	; (adr r3, 80099e8 <floor+0xf0>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f6 fbdf 	bl	800016c <__adddf3>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	f7f7 f821 	bl	80009f8 <__aeabi_dcmpgt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0be      	beq.n	8009938 <floor+0x40>
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	da0a      	bge.n	80099d4 <floor+0xdc>
 80099be:	2e14      	cmp	r6, #20
 80099c0:	d101      	bne.n	80099c6 <floor+0xce>
 80099c2:	3401      	adds	r4, #1
 80099c4:	e006      	b.n	80099d4 <floor+0xdc>
 80099c6:	2301      	movs	r3, #1
 80099c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80099cc:	40b3      	lsls	r3, r6
 80099ce:	441d      	add	r5, r3
 80099d0:	42af      	cmp	r7, r5
 80099d2:	d8f6      	bhi.n	80099c2 <floor+0xca>
 80099d4:	ea25 0508 	bic.w	r5, r5, r8
 80099d8:	e7ae      	b.n	8009938 <floor+0x40>
 80099da:	2500      	movs	r5, #0
 80099dc:	462c      	mov	r4, r5
 80099de:	e7ab      	b.n	8009938 <floor+0x40>
 80099e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80099e4:	e7a8      	b.n	8009938 <floor+0x40>
 80099e6:	bf00      	nop
 80099e8:	8800759c 	.word	0x8800759c
 80099ec:	7e37e43c 	.word	0x7e37e43c
 80099f0:	bff00000 	.word	0xbff00000
 80099f4:	000fffff 	.word	0x000fffff

080099f8 <__ieee754_pow>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	b093      	sub	sp, #76	; 0x4c
 80099fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009a06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009a0a:	4689      	mov	r9, r1
 8009a0c:	ea56 0102 	orrs.w	r1, r6, r2
 8009a10:	4680      	mov	r8, r0
 8009a12:	d111      	bne.n	8009a38 <__ieee754_pow+0x40>
 8009a14:	1803      	adds	r3, r0, r0
 8009a16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009a1a:	4152      	adcs	r2, r2
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	4b82      	ldr	r3, [pc, #520]	; (8009c28 <__ieee754_pow+0x230>)
 8009a20:	4193      	sbcs	r3, r2
 8009a22:	f080 84ba 	bcs.w	800a39a <__ieee754_pow+0x9a2>
 8009a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f6 fb9d 	bl	800016c <__adddf3>
 8009a32:	4683      	mov	fp, r0
 8009a34:	468c      	mov	ip, r1
 8009a36:	e06f      	b.n	8009b18 <__ieee754_pow+0x120>
 8009a38:	4b7c      	ldr	r3, [pc, #496]	; (8009c2c <__ieee754_pow+0x234>)
 8009a3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	464d      	mov	r5, r9
 8009a42:	4682      	mov	sl, r0
 8009a44:	dc06      	bgt.n	8009a54 <__ieee754_pow+0x5c>
 8009a46:	d101      	bne.n	8009a4c <__ieee754_pow+0x54>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d1ec      	bne.n	8009a26 <__ieee754_pow+0x2e>
 8009a4c:	429e      	cmp	r6, r3
 8009a4e:	dc01      	bgt.n	8009a54 <__ieee754_pow+0x5c>
 8009a50:	d10f      	bne.n	8009a72 <__ieee754_pow+0x7a>
 8009a52:	b172      	cbz	r2, 8009a72 <__ieee754_pow+0x7a>
 8009a54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009a58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009a5c:	ea55 050a 	orrs.w	r5, r5, sl
 8009a60:	d1e1      	bne.n	8009a26 <__ieee754_pow+0x2e>
 8009a62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a66:	18db      	adds	r3, r3, r3
 8009a68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009a6c:	4152      	adcs	r2, r2
 8009a6e:	429d      	cmp	r5, r3
 8009a70:	e7d5      	b.n	8009a1e <__ieee754_pow+0x26>
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	da39      	bge.n	8009aea <__ieee754_pow+0xf2>
 8009a76:	4b6e      	ldr	r3, [pc, #440]	; (8009c30 <__ieee754_pow+0x238>)
 8009a78:	429e      	cmp	r6, r3
 8009a7a:	dc52      	bgt.n	8009b22 <__ieee754_pow+0x12a>
 8009a7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009a80:	429e      	cmp	r6, r3
 8009a82:	f340 849d 	ble.w	800a3c0 <__ieee754_pow+0x9c8>
 8009a86:	1533      	asrs	r3, r6, #20
 8009a88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a8c:	2b14      	cmp	r3, #20
 8009a8e:	dd0f      	ble.n	8009ab0 <__ieee754_pow+0xb8>
 8009a90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009a94:	fa22 f103 	lsr.w	r1, r2, r3
 8009a98:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	f040 848f 	bne.w	800a3c0 <__ieee754_pow+0x9c8>
 8009aa2:	f001 0101 	and.w	r1, r1, #1
 8009aa6:	f1c1 0302 	rsb	r3, r1, #2
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	b182      	cbz	r2, 8009ad0 <__ieee754_pow+0xd8>
 8009aae:	e05d      	b.n	8009b6c <__ieee754_pow+0x174>
 8009ab0:	2a00      	cmp	r2, #0
 8009ab2:	d159      	bne.n	8009b68 <__ieee754_pow+0x170>
 8009ab4:	f1c3 0314 	rsb	r3, r3, #20
 8009ab8:	fa46 f103 	asr.w	r1, r6, r3
 8009abc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac0:	42b3      	cmp	r3, r6
 8009ac2:	f040 847a 	bne.w	800a3ba <__ieee754_pow+0x9c2>
 8009ac6:	f001 0101 	and.w	r1, r1, #1
 8009aca:	f1c1 0302 	rsb	r3, r1, #2
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4b58      	ldr	r3, [pc, #352]	; (8009c34 <__ieee754_pow+0x23c>)
 8009ad2:	429e      	cmp	r6, r3
 8009ad4:	d132      	bne.n	8009b3c <__ieee754_pow+0x144>
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	f280 846b 	bge.w	800a3b2 <__ieee754_pow+0x9ba>
 8009adc:	4642      	mov	r2, r8
 8009ade:	464b      	mov	r3, r9
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	4954      	ldr	r1, [pc, #336]	; (8009c34 <__ieee754_pow+0x23c>)
 8009ae4:	f7f6 fe22 	bl	800072c <__aeabi_ddiv>
 8009ae8:	e7a3      	b.n	8009a32 <__ieee754_pow+0x3a>
 8009aea:	2300      	movs	r3, #0
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	d13c      	bne.n	8009b6c <__ieee754_pow+0x174>
 8009af2:	4b4e      	ldr	r3, [pc, #312]	; (8009c2c <__ieee754_pow+0x234>)
 8009af4:	429e      	cmp	r6, r3
 8009af6:	d1eb      	bne.n	8009ad0 <__ieee754_pow+0xd8>
 8009af8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009afc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b00:	ea53 030a 	orrs.w	r3, r3, sl
 8009b04:	f000 8449 	beq.w	800a39a <__ieee754_pow+0x9a2>
 8009b08:	4b4b      	ldr	r3, [pc, #300]	; (8009c38 <__ieee754_pow+0x240>)
 8009b0a:	429c      	cmp	r4, r3
 8009b0c:	dd0b      	ble.n	8009b26 <__ieee754_pow+0x12e>
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	f2c0 8449 	blt.w	800a3a6 <__ieee754_pow+0x9ae>
 8009b14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009b18:	4658      	mov	r0, fp
 8009b1a:	4661      	mov	r1, ip
 8009b1c:	b013      	add	sp, #76	; 0x4c
 8009b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	2302      	movs	r3, #2
 8009b24:	e7e2      	b.n	8009aec <__ieee754_pow+0xf4>
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	f04f 0b00 	mov.w	fp, #0
 8009b2c:	f04f 0c00 	mov.w	ip, #0
 8009b30:	daf2      	bge.n	8009b18 <__ieee754_pow+0x120>
 8009b32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009b36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009b3a:	e7ed      	b.n	8009b18 <__ieee754_pow+0x120>
 8009b3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009b40:	d106      	bne.n	8009b50 <__ieee754_pow+0x158>
 8009b42:	4642      	mov	r2, r8
 8009b44:	464b      	mov	r3, r9
 8009b46:	4640      	mov	r0, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f7f6 fcc5 	bl	80004d8 <__aeabi_dmul>
 8009b4e:	e770      	b.n	8009a32 <__ieee754_pow+0x3a>
 8009b50:	4b3a      	ldr	r3, [pc, #232]	; (8009c3c <__ieee754_pow+0x244>)
 8009b52:	429f      	cmp	r7, r3
 8009b54:	d10a      	bne.n	8009b6c <__ieee754_pow+0x174>
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	db08      	blt.n	8009b6c <__ieee754_pow+0x174>
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	b013      	add	sp, #76	; 0x4c
 8009b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	f7ff bdee 	b.w	8009744 <__ieee754_sqrt>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	4649      	mov	r1, r9
 8009b70:	f000 fc58 	bl	800a424 <fabs>
 8009b74:	4683      	mov	fp, r0
 8009b76:	468c      	mov	ip, r1
 8009b78:	f1ba 0f00 	cmp.w	sl, #0
 8009b7c:	d128      	bne.n	8009bd0 <__ieee754_pow+0x1d8>
 8009b7e:	b124      	cbz	r4, 8009b8a <__ieee754_pow+0x192>
 8009b80:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <__ieee754_pow+0x23c>)
 8009b82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d122      	bne.n	8009bd0 <__ieee754_pow+0x1d8>
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	da07      	bge.n	8009b9e <__ieee754_pow+0x1a6>
 8009b8e:	465a      	mov	r2, fp
 8009b90:	4663      	mov	r3, ip
 8009b92:	2000      	movs	r0, #0
 8009b94:	4927      	ldr	r1, [pc, #156]	; (8009c34 <__ieee754_pow+0x23c>)
 8009b96:	f7f6 fdc9 	bl	800072c <__aeabi_ddiv>
 8009b9a:	4683      	mov	fp, r0
 8009b9c:	468c      	mov	ip, r1
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	daba      	bge.n	8009b18 <__ieee754_pow+0x120>
 8009ba2:	9b00      	ldr	r3, [sp, #0]
 8009ba4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ba8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bac:	431c      	orrs	r4, r3
 8009bae:	d108      	bne.n	8009bc2 <__ieee754_pow+0x1ca>
 8009bb0:	465a      	mov	r2, fp
 8009bb2:	4663      	mov	r3, ip
 8009bb4:	4658      	mov	r0, fp
 8009bb6:	4661      	mov	r1, ip
 8009bb8:	f7f6 fad6 	bl	8000168 <__aeabi_dsub>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	e790      	b.n	8009ae4 <__ieee754_pow+0xec>
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d1a7      	bne.n	8009b18 <__ieee754_pow+0x120>
 8009bc8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009bcc:	469c      	mov	ip, r3
 8009bce:	e7a3      	b.n	8009b18 <__ieee754_pow+0x120>
 8009bd0:	0feb      	lsrs	r3, r5, #31
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bd8:	9b00      	ldr	r3, [sp, #0]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	d104      	bne.n	8009be8 <__ieee754_pow+0x1f0>
 8009bde:	4642      	mov	r2, r8
 8009be0:	464b      	mov	r3, r9
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	e7e7      	b.n	8009bb8 <__ieee754_pow+0x1c0>
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <__ieee754_pow+0x248>)
 8009bea:	429e      	cmp	r6, r3
 8009bec:	f340 80f6 	ble.w	8009ddc <__ieee754_pow+0x3e4>
 8009bf0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009bf4:	429e      	cmp	r6, r3
 8009bf6:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <__ieee754_pow+0x240>)
 8009bf8:	dd09      	ble.n	8009c0e <__ieee754_pow+0x216>
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	dc0c      	bgt.n	8009c18 <__ieee754_pow+0x220>
 8009bfe:	2f00      	cmp	r7, #0
 8009c00:	da0c      	bge.n	8009c1c <__ieee754_pow+0x224>
 8009c02:	2000      	movs	r0, #0
 8009c04:	b013      	add	sp, #76	; 0x4c
 8009c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	f000 bcb2 	b.w	800a572 <__math_oflow>
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	dbf5      	blt.n	8009bfe <__ieee754_pow+0x206>
 8009c12:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <__ieee754_pow+0x23c>)
 8009c14:	429c      	cmp	r4, r3
 8009c16:	dd15      	ble.n	8009c44 <__ieee754_pow+0x24c>
 8009c18:	2f00      	cmp	r7, #0
 8009c1a:	dcf2      	bgt.n	8009c02 <__ieee754_pow+0x20a>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	b013      	add	sp, #76	; 0x4c
 8009c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	f000 bca0 	b.w	800a568 <__math_uflow>
 8009c28:	fff00000 	.word	0xfff00000
 8009c2c:	7ff00000 	.word	0x7ff00000
 8009c30:	433fffff 	.word	0x433fffff
 8009c34:	3ff00000 	.word	0x3ff00000
 8009c38:	3fefffff 	.word	0x3fefffff
 8009c3c:	3fe00000 	.word	0x3fe00000
 8009c40:	41e00000 	.word	0x41e00000
 8009c44:	4661      	mov	r1, ip
 8009c46:	2200      	movs	r2, #0
 8009c48:	4658      	mov	r0, fp
 8009c4a:	4b5f      	ldr	r3, [pc, #380]	; (8009dc8 <__ieee754_pow+0x3d0>)
 8009c4c:	f7f6 fa8c 	bl	8000168 <__aeabi_dsub>
 8009c50:	a355      	add	r3, pc, #340	; (adr r3, 8009da8 <__ieee754_pow+0x3b0>)
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	4604      	mov	r4, r0
 8009c58:	460d      	mov	r5, r1
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	a354      	add	r3, pc, #336	; (adr r3, 8009db0 <__ieee754_pow+0x3b8>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fc34 	bl	80004d8 <__aeabi_dmul>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4682      	mov	sl, r0
 8009c74:	468b      	mov	fp, r1
 8009c76:	4620      	mov	r0, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4b54      	ldr	r3, [pc, #336]	; (8009dcc <__ieee754_pow+0x3d4>)
 8009c7c:	f7f6 fc2c 	bl	80004d8 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	a14c      	add	r1, pc, #304	; (adr r1, 8009db8 <__ieee754_pow+0x3c0>)
 8009c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c8a:	f7f6 fa6d 	bl	8000168 <__aeabi_dsub>
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	f7f6 fc21 	bl	80004d8 <__aeabi_dmul>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	494c      	ldr	r1, [pc, #304]	; (8009dd0 <__ieee754_pow+0x3d8>)
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	4689      	mov	r9, r1
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fc13 	bl	80004d8 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 fc0d 	bl	80004d8 <__aeabi_dmul>
 8009cbe:	a340      	add	r3, pc, #256	; (adr r3, 8009dc0 <__ieee754_pow+0x3c8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fc08 	bl	80004d8 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4650      	mov	r0, sl
 8009cce:	4659      	mov	r1, fp
 8009cd0:	f7f6 fa4a 	bl	8000168 <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4604      	mov	r4, r0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fa44 	bl	800016c <__adddf3>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	463b      	mov	r3, r7
 8009cea:	4682      	mov	sl, r0
 8009cec:	468b      	mov	fp, r1
 8009cee:	f7f6 fa3b 	bl	8000168 <__aeabi_dsub>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7f6 fa35 	bl	8000168 <__aeabi_dsub>
 8009cfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d06:	3b01      	subs	r3, #1
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f04f 0600 	mov.w	r6, #0
 8009d0e:	f04f 0200 	mov.w	r2, #0
 8009d12:	bf0c      	ite	eq
 8009d14:	4b2f      	ldreq	r3, [pc, #188]	; (8009dd4 <__ieee754_pow+0x3dc>)
 8009d16:	4b2c      	ldrne	r3, [pc, #176]	; (8009dc8 <__ieee754_pow+0x3d0>)
 8009d18:	4604      	mov	r4, r0
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d20:	e9cd 2300 	strd	r2, r3, [sp]
 8009d24:	4632      	mov	r2, r6
 8009d26:	463b      	mov	r3, r7
 8009d28:	f7f6 fa1e 	bl	8000168 <__aeabi_dsub>
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	465b      	mov	r3, fp
 8009d30:	f7f6 fbd2 	bl	80004d8 <__aeabi_dmul>
 8009d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d38:	4680      	mov	r8, r0
 8009d3a:	4689      	mov	r9, r1
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fbca 	bl	80004d8 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 fa0e 	bl	800016c <__adddf3>
 8009d50:	4632      	mov	r2, r6
 8009d52:	463b      	mov	r3, r7
 8009d54:	4680      	mov	r8, r0
 8009d56:	4689      	mov	r9, r1
 8009d58:	4650      	mov	r0, sl
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	f7f6 fbbc 	bl	80004d8 <__aeabi_dmul>
 8009d60:	4604      	mov	r4, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	460b      	mov	r3, r1
 8009d66:	4602      	mov	r2, r0
 8009d68:	4649      	mov	r1, r9
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d70:	f7f6 f9fc 	bl	800016c <__adddf3>
 8009d74:	4b18      	ldr	r3, [pc, #96]	; (8009dd8 <__ieee754_pow+0x3e0>)
 8009d76:	4682      	mov	sl, r0
 8009d78:	4299      	cmp	r1, r3
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	460e      	mov	r6, r1
 8009d7e:	f340 82e7 	ble.w	800a350 <__ieee754_pow+0x958>
 8009d82:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009d86:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009d8a:	4303      	orrs	r3, r0
 8009d8c:	f000 81e2 	beq.w	800a154 <__ieee754_pow+0x75c>
 8009d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	f7f6 fe10 	bl	80009bc <__aeabi_dcmplt>
 8009d9c:	3800      	subs	r0, #0
 8009d9e:	bf18      	it	ne
 8009da0:	2001      	movne	r0, #1
 8009da2:	e72f      	b.n	8009c04 <__ieee754_pow+0x20c>
 8009da4:	f3af 8000 	nop.w
 8009da8:	60000000 	.word	0x60000000
 8009dac:	3ff71547 	.word	0x3ff71547
 8009db0:	f85ddf44 	.word	0xf85ddf44
 8009db4:	3e54ae0b 	.word	0x3e54ae0b
 8009db8:	55555555 	.word	0x55555555
 8009dbc:	3fd55555 	.word	0x3fd55555
 8009dc0:	652b82fe 	.word	0x652b82fe
 8009dc4:	3ff71547 	.word	0x3ff71547
 8009dc8:	3ff00000 	.word	0x3ff00000
 8009dcc:	3fd00000 	.word	0x3fd00000
 8009dd0:	3fe00000 	.word	0x3fe00000
 8009dd4:	bff00000 	.word	0xbff00000
 8009dd8:	408fffff 	.word	0x408fffff
 8009ddc:	4bd4      	ldr	r3, [pc, #848]	; (800a130 <__ieee754_pow+0x738>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	402b      	ands	r3, r5
 8009de2:	b943      	cbnz	r3, 8009df6 <__ieee754_pow+0x3fe>
 8009de4:	4658      	mov	r0, fp
 8009de6:	4661      	mov	r1, ip
 8009de8:	4bd2      	ldr	r3, [pc, #840]	; (800a134 <__ieee754_pow+0x73c>)
 8009dea:	f7f6 fb75 	bl	80004d8 <__aeabi_dmul>
 8009dee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009df2:	4683      	mov	fp, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	1523      	asrs	r3, r4, #20
 8009df8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009dfc:	4413      	add	r3, r2
 8009dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e00:	4bcd      	ldr	r3, [pc, #820]	; (800a138 <__ieee754_pow+0x740>)
 8009e02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e0a:	429c      	cmp	r4, r3
 8009e0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e10:	dd08      	ble.n	8009e24 <__ieee754_pow+0x42c>
 8009e12:	4bca      	ldr	r3, [pc, #808]	; (800a13c <__ieee754_pow+0x744>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	f340 8164 	ble.w	800a0e2 <__ieee754_pow+0x6ea>
 8009e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009e20:	3301      	adds	r3, #1
 8009e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e24:	2600      	movs	r6, #0
 8009e26:	00f3      	lsls	r3, r6, #3
 8009e28:	930d      	str	r3, [sp, #52]	; 0x34
 8009e2a:	4bc5      	ldr	r3, [pc, #788]	; (800a140 <__ieee754_pow+0x748>)
 8009e2c:	4658      	mov	r0, fp
 8009e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e36:	4629      	mov	r1, r5
 8009e38:	461a      	mov	r2, r3
 8009e3a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009e3e:	4623      	mov	r3, r4
 8009e40:	f7f6 f992 	bl	8000168 <__aeabi_dsub>
 8009e44:	46da      	mov	sl, fp
 8009e46:	462b      	mov	r3, r5
 8009e48:	4652      	mov	r2, sl
 8009e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e52:	f7f6 f98b 	bl	800016c <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	49b9      	ldr	r1, [pc, #740]	; (800a144 <__ieee754_pow+0x74c>)
 8009e5e:	f7f6 fc65 	bl	800072c <__aeabi_ddiv>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e6e:	f7f6 fb33 	bl	80004d8 <__aeabi_dmul>
 8009e72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e76:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009e7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	2200      	movs	r2, #0
 8009e82:	46ab      	mov	fp, r5
 8009e84:	106d      	asrs	r5, r5, #1
 8009e86:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009e90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e94:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009e98:	4640      	mov	r0, r8
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	461d      	mov	r5, r3
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009eac:	f7f6 f95c 	bl	8000168 <__aeabi_dsub>
 8009eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	460f      	mov	r7, r1
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7f6 f954 	bl	8000168 <__aeabi_dsub>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4650      	mov	r0, sl
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	f7f6 f94e 	bl	8000168 <__aeabi_dsub>
 8009ecc:	4642      	mov	r2, r8
 8009ece:	464b      	mov	r3, r9
 8009ed0:	f7f6 fb02 	bl	80004d8 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 f944 	bl	8000168 <__aeabi_dsub>
 8009ee0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ee4:	f7f6 faf8 	bl	80004d8 <__aeabi_dmul>
 8009ee8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eec:	4682      	mov	sl, r0
 8009eee:	468b      	mov	fp, r1
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	f7f6 faf0 	bl	80004d8 <__aeabi_dmul>
 8009ef8:	a37b      	add	r3, pc, #492	; (adr r3, 800a0e8 <__ieee754_pow+0x6f0>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	f7f6 fae9 	bl	80004d8 <__aeabi_dmul>
 8009f06:	a37a      	add	r3, pc, #488	; (adr r3, 800a0f0 <__ieee754_pow+0x6f8>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 f92e 	bl	800016c <__adddf3>
 8009f10:	4622      	mov	r2, r4
 8009f12:	462b      	mov	r3, r5
 8009f14:	f7f6 fae0 	bl	80004d8 <__aeabi_dmul>
 8009f18:	a377      	add	r3, pc, #476	; (adr r3, 800a0f8 <__ieee754_pow+0x700>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 f925 	bl	800016c <__adddf3>
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f7f6 fad7 	bl	80004d8 <__aeabi_dmul>
 8009f2a:	a375      	add	r3, pc, #468	; (adr r3, 800a100 <__ieee754_pow+0x708>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 f91c 	bl	800016c <__adddf3>
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 face 	bl	80004d8 <__aeabi_dmul>
 8009f3c:	a372      	add	r3, pc, #456	; (adr r3, 800a108 <__ieee754_pow+0x710>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f913 	bl	800016c <__adddf3>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	f7f6 fac5 	bl	80004d8 <__aeabi_dmul>
 8009f4e:	a370      	add	r3, pc, #448	; (adr r3, 800a110 <__ieee754_pow+0x718>)
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f7f6 f90a 	bl	800016c <__adddf3>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	462b      	mov	r3, r5
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 fab8 	bl	80004d8 <__aeabi_dmul>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 fab2 	bl	80004d8 <__aeabi_dmul>
 8009f74:	4604      	mov	r4, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	464b      	mov	r3, r9
 8009f80:	f7f6 f8f4 	bl	800016c <__adddf3>
 8009f84:	4652      	mov	r2, sl
 8009f86:	465b      	mov	r3, fp
 8009f88:	f7f6 faa6 	bl	80004d8 <__aeabi_dmul>
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	f7f6 f8ec 	bl	800016c <__adddf3>
 8009f94:	4642      	mov	r2, r8
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 fa9a 	bl	80004d8 <__aeabi_dmul>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fac:	2200      	movs	r2, #0
 8009fae:	4b66      	ldr	r3, [pc, #408]	; (800a148 <__ieee754_pow+0x750>)
 8009fb0:	f7f6 f8dc 	bl	800016c <__adddf3>
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	f7f6 f8d8 	bl	800016c <__adddf3>
 8009fbc:	2400      	movs	r4, #0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fa86 	bl	80004d8 <__aeabi_dmul>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4680      	mov	r8, r0
 8009fd0:	4689      	mov	r9, r1
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4b5c      	ldr	r3, [pc, #368]	; (800a148 <__ieee754_pow+0x750>)
 8009fd8:	f7f6 f8c6 	bl	8000168 <__aeabi_dsub>
 8009fdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fe0:	f7f6 f8c2 	bl	8000168 <__aeabi_dsub>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 f8bc 	bl	8000168 <__aeabi_dsub>
 8009ff0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ff4:	f7f6 fa70 	bl	80004d8 <__aeabi_dmul>
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	462b      	mov	r3, r5
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	f7f6 fa68 	bl	80004d8 <__aeabi_dmul>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 f8ac 	bl	800016c <__adddf3>
 800a014:	2400      	movs	r4, #0
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 f8a3 	bl	800016c <__adddf3>
 800a026:	a33c      	add	r3, pc, #240	; (adr r3, 800a118 <__ieee754_pow+0x720>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	4620      	mov	r0, r4
 800a02e:	460d      	mov	r5, r1
 800a030:	f7f6 fa52 	bl	80004d8 <__aeabi_dmul>
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 f892 	bl	8000168 <__aeabi_dsub>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 f88c 	bl	8000168 <__aeabi_dsub>
 800a050:	a333      	add	r3, pc, #204	; (adr r3, 800a120 <__ieee754_pow+0x728>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 fa3f 	bl	80004d8 <__aeabi_dmul>
 800a05a:	a333      	add	r3, pc, #204	; (adr r3, 800a128 <__ieee754_pow+0x730>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	4606      	mov	r6, r0
 800a062:	460f      	mov	r7, r1
 800a064:	4620      	mov	r0, r4
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 fa36 	bl	80004d8 <__aeabi_dmul>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 f87a 	bl	800016c <__adddf3>
 800a078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07a:	4b34      	ldr	r3, [pc, #208]	; (800a14c <__ieee754_pow+0x754>)
 800a07c:	4413      	add	r3, r2
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7f6 f873 	bl	800016c <__adddf3>
 800a086:	4680      	mov	r8, r0
 800a088:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a08a:	4689      	mov	r9, r1
 800a08c:	f7f6 f9ba 	bl	8000404 <__aeabi_i2d>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a09a:	4b2d      	ldr	r3, [pc, #180]	; (800a150 <__ieee754_pow+0x758>)
 800a09c:	4413      	add	r3, r2
 800a09e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	f7f6 f861 	bl	800016c <__adddf3>
 800a0aa:	4632      	mov	r2, r6
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	f7f6 f85d 	bl	800016c <__adddf3>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 f859 	bl	800016c <__adddf3>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4622      	mov	r2, r4
 800a0be:	462b      	mov	r3, r5
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	468b      	mov	fp, r1
 800a0c4:	f7f6 f850 	bl	8000168 <__aeabi_dsub>
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	f7f6 f84c 	bl	8000168 <__aeabi_dsub>
 800a0d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0d4:	f7f6 f848 	bl	8000168 <__aeabi_dsub>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4640      	mov	r0, r8
 800a0de:	4649      	mov	r1, r9
 800a0e0:	e60b      	b.n	8009cfa <__ieee754_pow+0x302>
 800a0e2:	2601      	movs	r6, #1
 800a0e4:	e69f      	b.n	8009e26 <__ieee754_pow+0x42e>
 800a0e6:	bf00      	nop
 800a0e8:	4a454eef 	.word	0x4a454eef
 800a0ec:	3fca7e28 	.word	0x3fca7e28
 800a0f0:	93c9db65 	.word	0x93c9db65
 800a0f4:	3fcd864a 	.word	0x3fcd864a
 800a0f8:	a91d4101 	.word	0xa91d4101
 800a0fc:	3fd17460 	.word	0x3fd17460
 800a100:	518f264d 	.word	0x518f264d
 800a104:	3fd55555 	.word	0x3fd55555
 800a108:	db6fabff 	.word	0xdb6fabff
 800a10c:	3fdb6db6 	.word	0x3fdb6db6
 800a110:	33333303 	.word	0x33333303
 800a114:	3fe33333 	.word	0x3fe33333
 800a118:	e0000000 	.word	0xe0000000
 800a11c:	3feec709 	.word	0x3feec709
 800a120:	dc3a03fd 	.word	0xdc3a03fd
 800a124:	3feec709 	.word	0x3feec709
 800a128:	145b01f5 	.word	0x145b01f5
 800a12c:	be3e2fe0 	.word	0xbe3e2fe0
 800a130:	7ff00000 	.word	0x7ff00000
 800a134:	43400000 	.word	0x43400000
 800a138:	0003988e 	.word	0x0003988e
 800a13c:	000bb679 	.word	0x000bb679
 800a140:	0800b3e0 	.word	0x0800b3e0
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	40080000 	.word	0x40080000
 800a14c:	0800b400 	.word	0x0800b400
 800a150:	0800b3f0 	.word	0x0800b3f0
 800a154:	a39c      	add	r3, pc, #624	; (adr r3, 800a3c8 <__ieee754_pow+0x9d0>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	f7f6 f805 	bl	800016c <__adddf3>
 800a162:	4622      	mov	r2, r4
 800a164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a168:	462b      	mov	r3, r5
 800a16a:	4650      	mov	r0, sl
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f5 fffb 	bl	8000168 <__aeabi_dsub>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a17a:	f7f6 fc3d 	bl	80009f8 <__aeabi_dcmpgt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f47f ae06 	bne.w	8009d90 <__ieee754_pow+0x398>
 800a184:	4aa2      	ldr	r2, [pc, #648]	; (800a410 <__ieee754_pow+0xa18>)
 800a186:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a18a:	4293      	cmp	r3, r2
 800a18c:	f340 8100 	ble.w	800a390 <__ieee754_pow+0x998>
 800a190:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a194:	151b      	asrs	r3, r3, #20
 800a196:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a19a:	fa4a fa03 	asr.w	sl, sl, r3
 800a19e:	44b2      	add	sl, r6
 800a1a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a1a4:	489b      	ldr	r0, [pc, #620]	; (800a414 <__ieee754_pow+0xa1c>)
 800a1a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a1aa:	4108      	asrs	r0, r1
 800a1ac:	ea00 030a 	and.w	r3, r0, sl
 800a1b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a1b4:	f1c1 0114 	rsb	r1, r1, #20
 800a1b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a1bc:	fa4a fa01 	asr.w	sl, sl, r1
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	f04f 0200 	mov.w	r2, #0
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	bfb8      	it	lt
 800a1cc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a1d0:	f7f5 ffca 	bl	8000168 <__aeabi_dsub>
 800a1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1dc:	2400      	movs	r4, #0
 800a1de:	4642      	mov	r2, r8
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	f7f5 ffc3 	bl	800016c <__adddf3>
 800a1e6:	a37a      	add	r3, pc, #488	; (adr r3, 800a3d0 <__ieee754_pow+0x9d8>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	f7f6 f972 	bl	80004d8 <__aeabi_dmul>
 800a1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	460f      	mov	r7, r1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f5 ffb2 	bl	8000168 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f5 ffac 	bl	8000168 <__aeabi_dsub>
 800a210:	a371      	add	r3, pc, #452	; (adr r3, 800a3d8 <__ieee754_pow+0x9e0>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 f95f 	bl	80004d8 <__aeabi_dmul>
 800a21a:	a371      	add	r3, pc, #452	; (adr r3, 800a3e0 <__ieee754_pow+0x9e8>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	4680      	mov	r8, r0
 800a222:	4689      	mov	r9, r1
 800a224:	4620      	mov	r0, r4
 800a226:	4629      	mov	r1, r5
 800a228:	f7f6 f956 	bl	80004d8 <__aeabi_dmul>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4640      	mov	r0, r8
 800a232:	4649      	mov	r1, r9
 800a234:	f7f5 ff9a 	bl	800016c <__adddf3>
 800a238:	4604      	mov	r4, r0
 800a23a:	460d      	mov	r5, r1
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f5 ff92 	bl	800016c <__adddf3>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	4680      	mov	r8, r0
 800a24e:	4689      	mov	r9, r1
 800a250:	f7f5 ff8a 	bl	8000168 <__aeabi_dsub>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4620      	mov	r0, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	f7f5 ff84 	bl	8000168 <__aeabi_dsub>
 800a260:	4642      	mov	r2, r8
 800a262:	4606      	mov	r6, r0
 800a264:	460f      	mov	r7, r1
 800a266:	464b      	mov	r3, r9
 800a268:	4640      	mov	r0, r8
 800a26a:	4649      	mov	r1, r9
 800a26c:	f7f6 f934 	bl	80004d8 <__aeabi_dmul>
 800a270:	a35d      	add	r3, pc, #372	; (adr r3, 800a3e8 <__ieee754_pow+0x9f0>)
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	f7f6 f92d 	bl	80004d8 <__aeabi_dmul>
 800a27e:	a35c      	add	r3, pc, #368	; (adr r3, 800a3f0 <__ieee754_pow+0x9f8>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f7f5 ff70 	bl	8000168 <__aeabi_dsub>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	f7f6 f924 	bl	80004d8 <__aeabi_dmul>
 800a290:	a359      	add	r3, pc, #356	; (adr r3, 800a3f8 <__ieee754_pow+0xa00>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f5 ff69 	bl	800016c <__adddf3>
 800a29a:	4622      	mov	r2, r4
 800a29c:	462b      	mov	r3, r5
 800a29e:	f7f6 f91b 	bl	80004d8 <__aeabi_dmul>
 800a2a2:	a357      	add	r3, pc, #348	; (adr r3, 800a400 <__ieee754_pow+0xa08>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f5 ff5e 	bl	8000168 <__aeabi_dsub>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	f7f6 f912 	bl	80004d8 <__aeabi_dmul>
 800a2b4:	a354      	add	r3, pc, #336	; (adr r3, 800a408 <__ieee754_pow+0xa10>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f7f5 ff57 	bl	800016c <__adddf3>
 800a2be:	4622      	mov	r2, r4
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	f7f5 ff4b 	bl	8000168 <__aeabi_dsub>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 f8fb 	bl	80004d8 <__aeabi_dmul>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f5 ff3a 	bl	8000168 <__aeabi_dsub>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fc:	f7f6 fa16 	bl	800072c <__aeabi_ddiv>
 800a300:	4632      	mov	r2, r6
 800a302:	4604      	mov	r4, r0
 800a304:	460d      	mov	r5, r1
 800a306:	463b      	mov	r3, r7
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f6 f8e4 	bl	80004d8 <__aeabi_dmul>
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	f7f5 ff2a 	bl	800016c <__adddf3>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4620      	mov	r0, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f5 ff22 	bl	8000168 <__aeabi_dsub>
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	f7f5 ff1e 	bl	8000168 <__aeabi_dsub>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	2000      	movs	r0, #0
 800a332:	4939      	ldr	r1, [pc, #228]	; (800a418 <__ieee754_pow+0xa20>)
 800a334:	f7f5 ff18 	bl	8000168 <__aeabi_dsub>
 800a338:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a33c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a340:	da29      	bge.n	800a396 <__ieee754_pow+0x99e>
 800a342:	4652      	mov	r2, sl
 800a344:	f000 f874 	bl	800a430 <scalbn>
 800a348:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a34c:	f7ff bbfd 	b.w	8009b4a <__ieee754_pow+0x152>
 800a350:	4b32      	ldr	r3, [pc, #200]	; (800a41c <__ieee754_pow+0xa24>)
 800a352:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a356:	429f      	cmp	r7, r3
 800a358:	f77f af14 	ble.w	800a184 <__ieee754_pow+0x78c>
 800a35c:	4b30      	ldr	r3, [pc, #192]	; (800a420 <__ieee754_pow+0xa28>)
 800a35e:	440b      	add	r3, r1
 800a360:	4303      	orrs	r3, r0
 800a362:	d009      	beq.n	800a378 <__ieee754_pow+0x980>
 800a364:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a368:	2200      	movs	r2, #0
 800a36a:	2300      	movs	r3, #0
 800a36c:	f7f6 fb26 	bl	80009bc <__aeabi_dcmplt>
 800a370:	3800      	subs	r0, #0
 800a372:	bf18      	it	ne
 800a374:	2001      	movne	r0, #1
 800a376:	e452      	b.n	8009c1e <__ieee754_pow+0x226>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f5 fef4 	bl	8000168 <__aeabi_dsub>
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	f7f6 fb2e 	bl	80009e4 <__aeabi_dcmpge>
 800a388:	2800      	cmp	r0, #0
 800a38a:	f43f aefb 	beq.w	800a184 <__ieee754_pow+0x78c>
 800a38e:	e7e9      	b.n	800a364 <__ieee754_pow+0x96c>
 800a390:	f04f 0a00 	mov.w	sl, #0
 800a394:	e720      	b.n	800a1d8 <__ieee754_pow+0x7e0>
 800a396:	4621      	mov	r1, r4
 800a398:	e7d6      	b.n	800a348 <__ieee754_pow+0x950>
 800a39a:	f04f 0b00 	mov.w	fp, #0
 800a39e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a418 <__ieee754_pow+0xa20>
 800a3a2:	f7ff bbb9 	b.w	8009b18 <__ieee754_pow+0x120>
 800a3a6:	f04f 0b00 	mov.w	fp, #0
 800a3aa:	f04f 0c00 	mov.w	ip, #0
 800a3ae:	f7ff bbb3 	b.w	8009b18 <__ieee754_pow+0x120>
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	f7ff bb3c 	b.w	8009a32 <__ieee754_pow+0x3a>
 800a3ba:	9200      	str	r2, [sp, #0]
 800a3bc:	f7ff bb88 	b.w	8009ad0 <__ieee754_pow+0xd8>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f7ff bb72 	b.w	8009aaa <__ieee754_pow+0xb2>
 800a3c6:	bf00      	nop
 800a3c8:	652b82fe 	.word	0x652b82fe
 800a3cc:	3c971547 	.word	0x3c971547
 800a3d0:	00000000 	.word	0x00000000
 800a3d4:	3fe62e43 	.word	0x3fe62e43
 800a3d8:	fefa39ef 	.word	0xfefa39ef
 800a3dc:	3fe62e42 	.word	0x3fe62e42
 800a3e0:	0ca86c39 	.word	0x0ca86c39
 800a3e4:	be205c61 	.word	0xbe205c61
 800a3e8:	72bea4d0 	.word	0x72bea4d0
 800a3ec:	3e663769 	.word	0x3e663769
 800a3f0:	c5d26bf1 	.word	0xc5d26bf1
 800a3f4:	3ebbbd41 	.word	0x3ebbbd41
 800a3f8:	af25de2c 	.word	0xaf25de2c
 800a3fc:	3f11566a 	.word	0x3f11566a
 800a400:	16bebd93 	.word	0x16bebd93
 800a404:	3f66c16c 	.word	0x3f66c16c
 800a408:	5555553e 	.word	0x5555553e
 800a40c:	3fc55555 	.word	0x3fc55555
 800a410:	3fe00000 	.word	0x3fe00000
 800a414:	fff00000 	.word	0xfff00000
 800a418:	3ff00000 	.word	0x3ff00000
 800a41c:	4090cbff 	.word	0x4090cbff
 800a420:	3f6f3400 	.word	0x3f6f3400

0800a424 <fabs>:
 800a424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a428:	4619      	mov	r1, r3
 800a42a:	4770      	bx	lr
 800a42c:	0000      	movs	r0, r0
	...

0800a430 <scalbn>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	4616      	mov	r6, r2
 800a434:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	460b      	mov	r3, r1
 800a43e:	b992      	cbnz	r2, 800a466 <scalbn+0x36>
 800a440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a444:	4303      	orrs	r3, r0
 800a446:	d03c      	beq.n	800a4c2 <scalbn+0x92>
 800a448:	4b31      	ldr	r3, [pc, #196]	; (800a510 <scalbn+0xe0>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	f7f6 f844 	bl	80004d8 <__aeabi_dmul>
 800a450:	4b30      	ldr	r3, [pc, #192]	; (800a514 <scalbn+0xe4>)
 800a452:	4604      	mov	r4, r0
 800a454:	429e      	cmp	r6, r3
 800a456:	460d      	mov	r5, r1
 800a458:	da0f      	bge.n	800a47a <scalbn+0x4a>
 800a45a:	a329      	add	r3, pc, #164	; (adr r3, 800a500 <scalbn+0xd0>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f6 f83a 	bl	80004d8 <__aeabi_dmul>
 800a464:	e006      	b.n	800a474 <scalbn+0x44>
 800a466:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a46a:	42ba      	cmp	r2, r7
 800a46c:	d109      	bne.n	800a482 <scalbn+0x52>
 800a46e:	4602      	mov	r2, r0
 800a470:	f7f5 fe7c 	bl	800016c <__adddf3>
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	e023      	b.n	800a4c2 <scalbn+0x92>
 800a47a:	460b      	mov	r3, r1
 800a47c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a480:	3a36      	subs	r2, #54	; 0x36
 800a482:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a486:	428e      	cmp	r6, r1
 800a488:	dd0e      	ble.n	800a4a8 <scalbn+0x78>
 800a48a:	a31f      	add	r3, pc, #124	; (adr r3, 800a508 <scalbn+0xd8>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a494:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a498:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a49c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a4a0:	481d      	ldr	r0, [pc, #116]	; (800a518 <scalbn+0xe8>)
 800a4a2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a4a6:	e7db      	b.n	800a460 <scalbn+0x30>
 800a4a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a4ac:	4432      	add	r2, r6
 800a4ae:	428a      	cmp	r2, r1
 800a4b0:	dceb      	bgt.n	800a48a <scalbn+0x5a>
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	dd08      	ble.n	800a4c8 <scalbn+0x98>
 800a4b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a4cc:	da0c      	bge.n	800a4e8 <scalbn+0xb8>
 800a4ce:	a30c      	add	r3, pc, #48	; (adr r3, 800a500 <scalbn+0xd0>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a4d8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a4dc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a4e0:	480e      	ldr	r0, [pc, #56]	; (800a51c <scalbn+0xec>)
 800a4e2:	f041 011f 	orr.w	r1, r1, #31
 800a4e6:	e7bb      	b.n	800a460 <scalbn+0x30>
 800a4e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4ec:	3236      	adds	r2, #54	; 0x36
 800a4ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <scalbn+0xf0>)
 800a4fe:	e7af      	b.n	800a460 <scalbn+0x30>
 800a500:	c2f8f359 	.word	0xc2f8f359
 800a504:	01a56e1f 	.word	0x01a56e1f
 800a508:	8800759c 	.word	0x8800759c
 800a50c:	7e37e43c 	.word	0x7e37e43c
 800a510:	43500000 	.word	0x43500000
 800a514:	ffff3cb0 	.word	0xffff3cb0
 800a518:	8800759c 	.word	0x8800759c
 800a51c:	c2f8f359 	.word	0xc2f8f359
 800a520:	3c900000 	.word	0x3c900000

0800a524 <with_errno>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	4616      	mov	r6, r2
 800a52c:	f7fd fa1c 	bl	8007968 <__errno>
 800a530:	4629      	mov	r1, r5
 800a532:	6006      	str	r6, [r0, #0]
 800a534:	4620      	mov	r0, r4
 800a536:	bd70      	pop	{r4, r5, r6, pc}

0800a538 <xflow>:
 800a538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a53a:	4615      	mov	r5, r2
 800a53c:	461c      	mov	r4, r3
 800a53e:	b180      	cbz	r0, 800a562 <xflow+0x2a>
 800a540:	4610      	mov	r0, r2
 800a542:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a546:	e9cd 0100 	strd	r0, r1, [sp]
 800a54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a54e:	4628      	mov	r0, r5
 800a550:	4621      	mov	r1, r4
 800a552:	f7f5 ffc1 	bl	80004d8 <__aeabi_dmul>
 800a556:	2222      	movs	r2, #34	; 0x22
 800a558:	b003      	add	sp, #12
 800a55a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a55e:	f7ff bfe1 	b.w	800a524 <with_errno>
 800a562:	4610      	mov	r0, r2
 800a564:	4619      	mov	r1, r3
 800a566:	e7ee      	b.n	800a546 <xflow+0xe>

0800a568 <__math_uflow>:
 800a568:	2200      	movs	r2, #0
 800a56a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a56e:	f7ff bfe3 	b.w	800a538 <xflow>

0800a572 <__math_oflow>:
 800a572:	2200      	movs	r2, #0
 800a574:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a578:	f7ff bfde 	b.w	800a538 <xflow>

0800a57c <_init>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr

0800a588 <_fini>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	bf00      	nop
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr
