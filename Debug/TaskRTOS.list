
TaskRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08008078  08008078  00018078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085ac  080085ac  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080085ac  080085ac  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085ac  080085ac  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080085b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029b8  200001d8  0800878c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b90  0800878c  00022b90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010653  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1b  00000000  00000000  00030897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c88  00000000  00000000  00034720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f71  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122a8  00000000  00000000  0004e319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092867  00000000  00000000  000605c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053bc  00000000  00000000  000f2e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000f81e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008060 	.word	0x08008060

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008060 	.word	0x08008060

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4a06      	ldr	r2, [pc, #24]	; (8000dac <vApplicationGetIdleTaskMemory+0x28>)
 8000d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200001f4 	.word	0x200001f4
 8000db0:	20000294 	.word	0x20000294

08000db4 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	char const *p;
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8000dba:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <LCD_Init+0x160>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a55      	ldr	r2, [pc, #340]	; (8000f14 <LCD_Init+0x160>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6193      	str	r3, [r2, #24]
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */

	 // Conexión recomendada de los pines:                                           *
	 // RS->PC6, RW->PC7, EN->PC8, D4->PC9, D5->PC10, D6->PC11, D7->PC12
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <LCD_Init+0x164>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a53      	ldr	r2, [pc, #332]	; (8000f18 <LCD_Init+0x164>)
 8000dcc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000dd0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8000dd2:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <LCD_Init+0x164>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <LCD_Init+0x164>)
 8000dd8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000ddc:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF7;
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <LCD_Init+0x164>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <LCD_Init+0x164>)
 8000de4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000de8:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE7;
 8000dea:	4b4b      	ldr	r3, [pc, #300]	; (8000f18 <LCD_Init+0x164>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <LCD_Init+0x164>)
 8000df0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000df4:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <LCD_Init+0x164>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <LCD_Init+0x164>)
 8000dfc:	f023 030c 	bic.w	r3, r3, #12
 8000e00:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8000e02:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <LCD_Init+0x164>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <LCD_Init+0x164>)
 8000e08:	f043 0303 	orr.w	r3, r3, #3
 8000e0c:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8000e0e:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <LCD_Init+0x164>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a41      	ldr	r2, [pc, #260]	; (8000f18 <LCD_Init+0x164>)
 8000e14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000e18:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <LCD_Init+0x164>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a3e      	ldr	r2, [pc, #248]	; (8000f18 <LCD_Init+0x164>)
 8000e20:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e24:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF10;
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <LCD_Init+0x164>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a3b      	ldr	r2, [pc, #236]	; (8000f18 <LCD_Init+0x164>)
 8000e2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e30:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE10;
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <LCD_Init+0x164>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <LCD_Init+0x164>)
 8000e38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e3c:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF11;
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <LCD_Init+0x164>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <LCD_Init+0x164>)
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e48:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE11;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <LCD_Init+0x164>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <LCD_Init+0x164>)
 8000e50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e54:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF12;
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <LCD_Init+0x164>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <LCD_Init+0x164>)
 8000e5c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e60:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE12;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <LCD_Init+0x164>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <LCD_Init+0x164>)
 8000e68:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e6c:	6053      	str	r3, [r2, #4]
  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <LCD_Init+0x164>)
 8000e70:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <LCD_Init+0x168>)
 8000e72:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8000e74:	200f      	movs	r0, #15
 8000e76:	f001 f96d 	bl	8002154 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <LCD_Init+0x164>)
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <LCD_Init+0x168>)
 8000e7e:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000e80:	f000 f9d0 	bl	8001224 <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8000e84:	2005      	movs	r0, #5
 8000e86:	f001 f965 	bl	8002154 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <LCD_Init+0x164>)
 8000e8c:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <LCD_Init+0x168>)
 8000e8e:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000e90:	f000 f9c8 	bl	8001224 <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8000e94:	2001      	movs	r0, #1
 8000e96:	f001 f95d 	bl	8002154 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <LCD_Init+0x164>)
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <LCD_Init+0x168>)
 8000e9e:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000ea0:	f000 f9c0 	bl	8001224 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8000ea4:	bf00      	nop
 8000ea6:	f000 f973 	bl	8001190 <LCD_Busy>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1fa      	bne.n	8000ea6 <LCD_Init+0xf2>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <LCD_Init+0x164>)
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <LCD_Init+0x16c>)
 8000eb4:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000eb6:	f000 f9b5 	bl	8001224 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8000eba:	bf00      	nop
 8000ebc:	f000 f968 	bl	8001190 <LCD_Busy>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1fa      	bne.n	8000ebc <LCD_Init+0x108>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000ec6:	2028      	movs	r0, #40	; 0x28
 8000ec8:	f000 f894 	bl	8000ff4 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8000ecc:	200c      	movs	r0, #12
 8000ece:	f000 f891 	bl	8000ff4 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8000ed2:	2006      	movs	r0, #6
 8000ed4:	f000 f88e 	bl	8000ff4 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8000ed8:	2040      	movs	r0, #64	; 0x40
 8000eda:	f000 f88b 	bl	8000ff4 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <LCD_Init+0x170>)
 8000ee0:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	e00a      	b.n	8000efe <LCD_Init+0x14a>
		LCD_Put_Char( *p );
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f895 	bl	800101c <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b3f      	cmp	r3, #63	; 0x3f
 8000f02:	d9f1      	bls.n	8000ee8 <LCD_Init+0x134>

	LCD_Write_Cmd( 0x80 );
 8000f04:	2080      	movs	r0, #128	; 0x80
 8000f06:	f000 f875 	bl	8000ff4 <LCD_Write_Cmd>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	18000600 	.word	0x18000600
 8000f20:	1a000400 	.word	0x1a000400
 8000f24:	080081d4 	.word	0x080081d4

08000f28 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	e003      	b.n	8000f4e <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f4c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	e003      	b.n	8000f6a <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f68:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	e003      	b.n	8000f86 <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f84:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f96:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8000f98:	e003      	b.n	8000fa2 <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LCD_Out_Data4+0x84>)
 8000f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa0:	611a      	str	r2, [r3, #16]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	40011000 	.word	0x40011000

08000fb0 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffb1 	bl	8000f28 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000fc6:	f000 f92d 	bl	8001224 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ffa8 	bl	8000f28 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000fd8:	f000 f924 	bl	8001224 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000fdc:	bf00      	nop
 8000fde:	f000 f8d7 	bl	8001190 <LCD_Busy>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1fa      	bne.n	8000fde <LCD_Write_Byte+0x2e>
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <LCD_Write_Cmd+0x24>)
 8001000:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001004:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffd1 	bl	8000fb0 <LCD_Write_Byte>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40011000 	.word	0x40011000

0800101c <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <LCD_Put_Char+0x20>)
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffbe 	bl	8000fb0 <LCD_Write_Byte>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40011000 	.word	0x40011000

08001040 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <LCD_Set_Cursor+0x1c>
		column--;
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	3b01      	subs	r3, #1
 800105a:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <LCD_Set_Cursor+0x28>
		line--;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	3b01      	subs	r3, #1
 8001066:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	461a      	mov	r2, r3
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	b2da      	uxtb	r2, r3
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	4413      	add	r3, r2
 8001078:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b80      	subs	r3, #128	; 0x80
 8001084:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffb3 	bl	8000ff4 <LCD_Write_Cmd>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e009      	b.n	80010b8 <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffb5 	bl	800101c <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	dc05      	bgt.n	80010ca <LCD_Put_Str+0x34>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ec      	bne.n	80010a4 <LCD_Put_Str+0xe>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
void LCD_Put_Num(int num){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b088      	sub	sp, #32
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	int p;
	int f = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
	char ch[ 5 ];

	for( int i = 0; i < 5; i++ ){
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e04d      	b.n	8001180 <LCD_Put_Num+0xae>
		p = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f1c3 0304 	rsb	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e008      	b.n	8001104 <LCD_Put_Num+0x32>
			p = p * 10;
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	3b01      	subs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dcf3      	bgt.n	80010f2 <LCD_Put_Num+0x20>
		ch[ i ] = ( num / p );
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
		if( num >= p && !f )
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	db04      	blt.n	8001132 <LCD_Put_Num+0x60>
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <LCD_Put_Num+0x60>
			f = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
		num = num - ch[ i ] * p;
 8001132:	f107 0208 	add.w	r2, r7, #8
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	607b      	str	r3, [r7, #4]
		ch[ i ] = ch[ i ] + 48;
 800114a:	f107 0208 	add.w	r2, r7, #8
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	3330      	adds	r3, #48	; 0x30
 8001156:	b2d9      	uxtb	r1, r3
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4413      	add	r3, r2
 8001160:	460a      	mov	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
		if( f )
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <LCD_Put_Num+0xa8>
			LCD_Put_Char( ch[ i ] );
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff51 	bl	800101c <LCD_Put_Char>
	for( int i = 0; i < 5; i++ ){
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b04      	cmp	r3, #4
 8001184:	ddae      	ble.n	80010e4 <LCD_Put_Num+0x12>
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * input floating                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF12_1;
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <LCD_Busy+0x8c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <LCD_Busy+0x8c>)
 800119a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800119e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_MODE12;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <LCD_Busy+0x8c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <LCD_Busy+0x8c>)
 80011a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011aa:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF12_0;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <LCD_Busy+0x8c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <LCD_Busy+0x8c>)
 80011b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b6:	6053      	str	r3, [r2, #4]
  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <LCD_Busy+0x8c>)
 80011ba:	4a19      	ldr	r2, [pc, #100]	; (8001220 <LCD_Busy+0x90>)
 80011bc:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 ffc8 	bl	8002154 <HAL_Delay>

  /* ***************************************************** */
  if((GPIOC->IDR & (1U << 12)) != 0 ){//		       if D7 is set, then
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <LCD_Busy+0x8c>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d011      	beq.n	80011f4 <LCD_Busy+0x64>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <LCD_Busy+0x8c>)
 80011d2:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80011d6:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <LCD_Busy+0x8c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <LCD_Busy+0x8c>)
 80011de:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011e2:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <LCD_Busy+0x8c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <LCD_Busy+0x8c>)
 80011ea:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80011ee:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e010      	b.n	8001216 <LCD_Busy+0x86>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <LCD_Busy+0x8c>)
 80011f6:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80011fa:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <LCD_Busy+0x8c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <LCD_Busy+0x8c>)
 8001202:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001206:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <LCD_Busy+0x8c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <LCD_Busy+0x8c>)
 800120e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001212:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 8001214:	2300      	movs	r3, #0
	}
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40011000 	.word	0x40011000
 8001220:	00400180 	.word	0x00400180

08001224 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <LCD_Pulse_EN+0x20>)
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122e:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 8001230:	2001      	movs	r0, #1
 8001232:	f000 ff8f 	bl	8002154 <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 8001236:	4b03      	ldr	r3, [pc, #12]	; (8001244 <LCD_Pulse_EN+0x20>)
 8001238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800123c:	611a      	str	r2, [r3, #16]
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40011000 	.word	0x40011000

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b0a0      	sub	sp, #128	; 0x80
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 ff4f 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f877 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f8b7 	bl	80013c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 800125a:	f000 f8ef 	bl	800143c <USER_RCC_Init>
  USER_GPIO_Init();
 800125e:	f000 f919 	bl	8001494 <USER_GPIO_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(msgQueue, 4, uint32_t);
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <main+0xd4>)
 8001264:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 800126e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f001 ff76 	bl	8003166 <osMessageCreate>
 800127a:	4603      	mov	r3, r0
 800127c:	4a28      	ldr	r2, [pc, #160]	; (8001320 <main+0xd8>)
 800127e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <main+0xdc>)
 8001282:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001294:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f001 ff03 	bl	80030a6 <osThreadCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <main+0xe0>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(MatricialTask, readMatricial, osPriorityNormal, 0, 128*2);
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <main+0xe4>)
 80012a8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadMatricialHandle = osThreadCreate(osThread(MatricialTask), NULL);
 80012ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fef0 	bl	80030a6 <osThreadCreate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <main+0xe8>)
 80012ca:	6013      	str	r3, [r2, #0]

  osThreadDef(ADCTask, readADC, osPriorityNormal, 0, 512);
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <main+0xec>)
 80012ce:	f107 041c 	add.w	r4, r7, #28
 80012d2:	461d      	mov	r5, r3
 80012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadADCHandle = osThreadCreate(osThread(ADCTask), NULL);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fedd 	bl	80030a6 <osThreadCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <main+0xf0>)
 80012f0:	6013      	str	r3, [r2, #0]

  osThreadDef(LCDTask, printLCD, osPriorityIdle, 0, 512);
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <main+0xf4>)
 80012f4:	463c      	mov	r4, r7
 80012f6:	461d      	mov	r5, r3
 80012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PrintLCDHandle = osThreadCreate(osThread(LCDTask), NULL);
 8001304:	463b      	mov	r3, r7
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fecc 	bl	80030a6 <osThreadCreate>
 800130e:	4603      	mov	r3, r0
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <main+0xf8>)
 8001312:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001314:	f001 fec0 	bl	8003098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001318:	e7fe      	b.n	8001318 <main+0xd0>
 800131a:	bf00      	nop
 800131c:	08008078 	.word	0x08008078
 8001320:	200004a4 	.word	0x200004a4
 8001324:	08008094 	.word	0x08008094
 8001328:	20000494 	.word	0x20000494
 800132c:	080080c0 	.word	0x080080c0
 8001330:	20000498 	.word	0x20000498
 8001334:	080080e4 	.word	0x080080e4
 8001338:	2000049c 	.word	0x2000049c
 800133c:	08008108 	.word	0x08008108
 8001340:	200004a0 	.word	0x200004a0

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	; 0x40
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 ff00 	bl	8006158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136a:	2301      	movs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2310      	movs	r3, #16
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001376:	2300      	movs	r3, #0
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800137a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 ffe9 	bl	800235c <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001390:	f000 fcdc 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fa56 	bl	8002860 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013ba:	f000 fcc7 	bl	8001d4c <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_GPIO_Init+0x70>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <MX_GPIO_Init+0x70>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_GPIO_Init+0x70>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_GPIO_Init+0x70>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <MX_GPIO_Init+0x70>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_GPIO_Init+0x70>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_GPIO_Init+0x70>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <MX_GPIO_Init+0x70>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_GPIO_Init+0x70>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_GPIO_Init+0x70>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <MX_GPIO_Init+0x70>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <MX_GPIO_Init+0x70>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000

0800143c <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

/* GENERAL FUNCTIONS */
void USER_RCC_Init(void){
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // I/O port A clock enable
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <USER_RCC_Init+0x54>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <USER_RCC_Init+0x54>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//		I/O port B clock enable
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <USER_RCC_Init+0x54>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <USER_RCC_Init+0x54>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <USER_RCC_Init+0x54>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <USER_RCC_Init+0x54>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6193      	str	r3, [r2, #24]
//  -------UART--------------
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <USER_RCC_Init+0x54>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <USER_RCC_Init+0x54>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6193      	str	r3, [r2, #24]
//  --------ADC--------------
  RCC->APB2ENR |=	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <USER_RCC_Init+0x54>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <USER_RCC_Init+0x54>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6193      	str	r3, [r2, #24]
  RCC->CFGR |=	 RCC_CFGR_ADCPRE;  //	ADC prescaler 1:8 for 8 MHz
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <USER_RCC_Init+0x54>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <USER_RCC_Init+0x54>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001486:	6053      	str	r3, [r2, #4]

}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000

08001494 <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	USER_GPIO_Init_UART();
 8001498:	f000 f806 	bl	80014a8 <USER_GPIO_Init_UART>
	USER_GPIO_Init_Matricial();
 800149c:	f000 f824 	bl	80014e8 <USER_GPIO_Init_Matricial>
	USER_GPIO_Init_ADC();
 80014a0:	f000 f8c2 	bl	8001628 <USER_GPIO_Init_ADC>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <USER_GPIO_Init_UART>:
void USER_GPIO_Init_UART(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRH &= ~GPIO_CRH_CNF9;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80014b6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80014c2:	6053      	str	r3, [r2, #4]

	// Pin PA10 (RX)
	GPIOA->CRH &= ~GPIO_CRH_CNF10;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014ce:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <USER_GPIO_Init_UART+0x3c>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6053      	str	r3, [r2, #4]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40010800 	.word	0x40010800

080014e8 <USER_GPIO_Init_Matricial>:

void USER_GPIO_Init_Matricial(void){
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	//PA5 -> 0, LD2 OFF
	GPIOA->BSRR = GPIO_BSRR_BR5;
 80014ec:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 80014ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014f2:	611a      	str	r2, [r3, #16]
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 80014fa:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80014fe:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150a:	6013      	str	r3, [r2, #0]

	//PA12 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE12 & ~GPIO_CRH_CNF12_0;
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a43      	ldr	r2, [pc, #268]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001512:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001516:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_1;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a40      	ldr	r2, [pc, #256]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800151e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001522:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR12;
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a3d      	ldr	r2, [pc, #244]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800152a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152e:	60d3      	str	r3, [r2, #12]
	//PA6 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE6 & ~GPIO_CRL_CNF6_0;
 8001530:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 800153c:	4b38      	ldr	r3, [pc, #224]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a37      	ldr	r2, [pc, #220]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001546:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR6;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a34      	ldr	r2, [pc, #208]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800154e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001552:	60d3      	str	r3, [r2, #12]
	//PA11 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE11 & ~GPIO_CRH_CNF11_0;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a31      	ldr	r2, [pc, #196]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800155a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800155e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156a:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR11;
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001572:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001576:	60d3      	str	r3, [r2, #12]
	//PA7 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE7 & ~GPIO_CRL_CNF7_0;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a28      	ldr	r2, [pc, #160]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800157e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001582:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 800158a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800158e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR7;
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a22      	ldr	r2, [pc, #136]	; (8001620 <USER_GPIO_Init_Matricial+0x138>)
 8001596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159a:	60d3      	str	r3, [r2, #12]

	//PB3 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS3;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 800159e:	2208      	movs	r2, #8
 80015a0:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE3_1 & ~GPIO_CRL_CNF3;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015a8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015ac:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6013      	str	r3, [r2, #0]
	//PB4 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS4;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015bc:	2210      	movs	r2, #16
 80015be:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE4_1 & ~GPIO_CRL_CNF4;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a17      	ldr	r2, [pc, #92]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015c6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80015ca:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE4_0;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
	//PB5 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS5;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015da:	2220      	movs	r2, #32
 80015dc:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE5_1 & ~GPIO_CRL_CNF5;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015e4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80015e8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE5_0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015f4:	6013      	str	r3, [r2, #0]
	//PB10 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BR10;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 80015f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015fc:	611a      	str	r2, [r3, #16]
	GPIOB->CRH &= ~GPIO_CRH_MODE10_1 & ~GPIO_CRH_CNF10;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 8001604:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001608:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE10_0;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <USER_GPIO_Init_Matricial+0x13c>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6053      	str	r3, [r2, #4]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00

08001628 <USER_GPIO_Init_ADC>:

void USER_GPIO_Init_ADC(){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	//PA0 (ADC12_IN0) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0;
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 8001632:	f023 030f 	bic.w	r3, r3, #15
 8001636:	6013      	str	r3, [r2, #0]
	//PA1 (TIM2_CH2) as alternate function push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1_1;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 800163e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001642:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF1_1 | GPIO_CRL_MODE1_0;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 800164a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800164e:	6013      	str	r3, [r2, #0]
	//PA2 (ADC12_IN2) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2;
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a03      	ldr	r2, [pc, #12]	; (8001664 <USER_GPIO_Init_ADC+0x3c>)
 8001656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40010800 	.word	0x40010800

08001668 <USER_USART1_Init>:

/* UART FUNCTIONS */

void USER_USART1_Init(void){
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  USART1->CR1 |= USART_CR1_UE; // USART enabled
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <USER_USART1_Init+0x5c>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <USER_USART1_Init+0x5c>)
 8001672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001676:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_M; // 1 start bit, 8 data bits
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <USER_USART1_Init+0x5c>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <USER_USART1_Init+0x5c>)
 800167e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001682:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_PCE; // Parity control disabled
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <USER_USART1_Init+0x5c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <USER_USART1_Init+0x5c>)
 800168a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800168e:	60d3      	str	r3, [r2, #12]
  USART1->CR2 &= ~USART_CR2_STOP; // 1 stop bit
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <USER_USART1_Init+0x5c>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <USER_USART1_Init+0x5c>)
 8001696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800169a:	6113      	str	r3, [r2, #16]
  USART1->BRR = 0x22C; // 115200 bps 34.72
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <USER_USART1_Init+0x5c>)
 800169e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80016a2:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_TE; // Transmitter enabled
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <USER_USART1_Init+0x5c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <USER_USART1_Init+0x5c>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;// receiver enabled
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <USER_USART1_Init+0x5c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <USER_USART1_Init+0x5c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40013800 	.word	0x40013800

080016c8 <barrido>:
	LCD_Cursor_ON( );//			cursor visible activo
	LCD_Clear( );//			borra la pantalla
}


void barrido(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	//ROWS
	//	  	 PA 12,6,11,7
	//	  First Column
	GPIOB->ODR &= ~GPIO_ODR_ODR3;
 80016cc:	4ba2      	ldr	r3, [pc, #648]	; (8001958 <barrido+0x290>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4aa1      	ldr	r2, [pc, #644]	; (8001958 <barrido+0x290>)
 80016d2:	f023 0308 	bic.w	r3, r3, #8
 80016d6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 80016d8:	4b9f      	ldr	r3, [pc, #636]	; (8001958 <barrido+0x290>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <barrido+0x290>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80016e4:	4b9c      	ldr	r3, [pc, #624]	; (8001958 <barrido+0x290>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a9b      	ldr	r2, [pc, #620]	; (8001958 <barrido+0x290>)
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <barrido+0x290>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a98      	ldr	r2, [pc, #608]	; (8001958 <barrido+0x290>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //1
 80016fc:	4b97      	ldr	r3, [pc, #604]	; (800195c <barrido+0x294>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d112      	bne.n	800172e <barrido+0x66>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <barrido+0x294>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a93      	ldr	r2, [pc, #588]	; (800195c <barrido+0x294>)
 800170e:	f083 0320 	eor.w	r3, r3, #32
 8001712:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Left\n\r");
 8001714:	4892      	ldr	r0, [pc, #584]	; (8001960 <barrido+0x298>)
 8001716:	f004 fbd9 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 800171a:	bf00      	nop
 800171c:	4b8f      	ldr	r3, [pc, #572]	; (800195c <barrido+0x294>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f9      	beq.n	800171c <barrido+0x54>
		HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f000 fd13 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //4
 800172e:	4b8b      	ldr	r3, [pc, #556]	; (800195c <barrido+0x294>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d112      	bne.n	8001760 <barrido+0x98>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <barrido+0x294>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	4a87      	ldr	r2, [pc, #540]	; (800195c <barrido+0x294>)
 8001740:	f083 0320 	eor.w	r3, r3, #32
 8001744:	60d3      	str	r3, [r2, #12]
		printf("Left\n\r");
 8001746:	4887      	ldr	r0, [pc, #540]	; (8001964 <barrido+0x29c>)
 8001748:	f004 fbc0 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 800174c:	bf00      	nop
 800174e:	4b83      	ldr	r3, [pc, #524]	; (800195c <barrido+0x294>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f9      	beq.n	800174e <barrido+0x86>
		HAL_Delay(10);
 800175a:	200a      	movs	r0, #10
 800175c:	f000 fcfa 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //7
 8001760:	4b7e      	ldr	r3, [pc, #504]	; (800195c <barrido+0x294>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <barrido+0xc4>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 800176c:	4b7b      	ldr	r3, [pc, #492]	; (800195c <barrido+0x294>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a7a      	ldr	r2, [pc, #488]	; (800195c <barrido+0x294>)
 8001772:	f083 0320 	eor.w	r3, r3, #32
 8001776:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8001778:	bf00      	nop
 800177a:	4b78      	ldr	r3, [pc, #480]	; (800195c <barrido+0x294>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f9      	beq.n	800177a <barrido+0xb2>
		HAL_Delay(10);
 8001786:	200a      	movs	r0, #10
 8001788:	f000 fce4 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //* delete
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <barrido+0x294>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10f      	bne.n	80017b8 <barrido+0xf0>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <barrido+0x294>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a6f      	ldr	r2, [pc, #444]	; (800195c <barrido+0x294>)
 800179e:	f083 0320 	eor.w	r3, r3, #32
 80017a2:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 80017a4:	bf00      	nop
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <barrido+0x294>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f9      	beq.n	80017a6 <barrido+0xde>
		HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f000 fcce 	bl	8002154 <HAL_Delay>
	}

	//ROWS
	//	  	 PA 12,6,11,7
	//Second Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 80017b8:	4b67      	ldr	r3, [pc, #412]	; (8001958 <barrido+0x290>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a66      	ldr	r2, [pc, #408]	; (8001958 <barrido+0x290>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR4;
 80017c4:	4b64      	ldr	r3, [pc, #400]	; (8001958 <barrido+0x290>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a63      	ldr	r2, [pc, #396]	; (8001958 <barrido+0x290>)
 80017ca:	f023 0310 	bic.w	r3, r3, #16
 80017ce:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80017d0:	4b61      	ldr	r3, [pc, #388]	; (8001958 <barrido+0x290>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <barrido+0x290>)
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 80017dc:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <barrido+0x290>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <barrido+0x290>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e6:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //2
 80017e8:	4b5c      	ldr	r3, [pc, #368]	; (800195c <barrido+0x294>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <barrido+0x152>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <barrido+0x294>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <barrido+0x294>)
 80017fa:	f083 0320 	eor.w	r3, r3, #32
 80017fe:	60d3      	str	r3, [r2, #12]
		printf("Forward\n\r");
 8001800:	4859      	ldr	r0, [pc, #356]	; (8001968 <barrido+0x2a0>)
 8001802:	f004 fb63 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8001806:	bf00      	nop
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <barrido+0x294>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f9      	beq.n	8001808 <barrido+0x140>
		HAL_Delay(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f000 fc9d 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //5
 800181a:	4b50      	ldr	r3, [pc, #320]	; (800195c <barrido+0x294>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <barrido+0x184>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <barrido+0x294>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a4c      	ldr	r2, [pc, #304]	; (800195c <barrido+0x294>)
 800182c:	f083 0320 	eor.w	r3, r3, #32
 8001830:	60d3      	str	r3, [r2, #12]
	  printf("Braking\n\r");
 8001832:	484e      	ldr	r0, [pc, #312]	; (800196c <barrido+0x2a4>)
 8001834:	f004 fb4a 	bl	8005ecc <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8001838:	bf00      	nop
 800183a:	4b48      	ldr	r3, [pc, #288]	; (800195c <barrido+0x294>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <barrido+0x172>
	  HAL_Delay(10);
 8001846:	200a      	movs	r0, #10
 8001848:	f000 fc84 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //8
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <barrido+0x294>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001854:	2b00      	cmp	r3, #0
 8001856:	d112      	bne.n	800187e <barrido+0x1b6>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <barrido+0x294>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a3f      	ldr	r2, [pc, #252]	; (800195c <barrido+0x294>)
 800185e:	f083 0320 	eor.w	r3, r3, #32
 8001862:	60d3      	str	r3, [r2, #12]
	  printf("Backward\n\r");
 8001864:	4842      	ldr	r0, [pc, #264]	; (8001970 <barrido+0x2a8>)
 8001866:	f004 fb31 	bl	8005ecc <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 800186a:	bf00      	nop
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <barrido+0x294>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f9      	beq.n	800186c <barrido+0x1a4>
	  HAL_Delay(10);
 8001878:	200a      	movs	r0, #10
 800187a:	f000 fc6b 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //0
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <barrido+0x294>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <barrido+0x1e2>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <barrido+0x294>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	4a33      	ldr	r2, [pc, #204]	; (800195c <barrido+0x294>)
 8001890:	f083 0320 	eor.w	r3, r3, #32
 8001894:	60d3      	str	r3, [r2, #12]
	  //printf("");
	  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8001896:	bf00      	nop
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <barrido+0x294>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f9      	beq.n	8001898 <barrido+0x1d0>
	  HAL_Delay(10);
 80018a4:	200a      	movs	r0, #10
 80018a6:	f000 fc55 	bl	8002154 <HAL_Delay>
	}

	//Third Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <barrido+0x290>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <barrido+0x290>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <barrido+0x290>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a27      	ldr	r2, [pc, #156]	; (8001958 <barrido+0x290>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR5;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <barrido+0x290>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <barrido+0x290>)
 80018c8:	f023 0320 	bic.w	r3, r3, #32
 80018cc:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <barrido+0x290>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <barrido+0x290>)
 80018d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d8:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //3
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <barrido+0x294>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d112      	bne.n	800190c <barrido+0x244>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <barrido+0x294>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <barrido+0x294>)
 80018ec:	f083 0320 	eor.w	r3, r3, #32
 80018f0:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Right\n\r");
 80018f2:	4820      	ldr	r0, [pc, #128]	; (8001974 <barrido+0x2ac>)
 80018f4:	f004 faea 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 80018f8:	bf00      	nop
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <barrido+0x294>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f9      	beq.n	80018fa <barrido+0x232>
		HAL_Delay(10);
 8001906:	200a      	movs	r0, #10
 8001908:	f000 fc24 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //6
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <barrido+0x294>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <barrido+0x276>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <barrido+0x294>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a0f      	ldr	r2, [pc, #60]	; (800195c <barrido+0x294>)
 800191e:	f083 0320 	eor.w	r3, r3, #32
 8001922:	60d3      	str	r3, [r2, #12]
		printf("Right\n\r");
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <barrido+0x2b0>)
 8001926:	f004 fad1 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 800192a:	bf00      	nop
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <barrido+0x294>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f9      	beq.n	800192c <barrido+0x264>
		HAL_Delay(10);
 8001938:	200a      	movs	r0, #10
 800193a:	f000 fc0b 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //9
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <barrido+0x294>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001946:	2b00      	cmp	r3, #0
 8001948:	d122      	bne.n	8001990 <barrido+0x2c8>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <barrido+0x294>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a03      	ldr	r2, [pc, #12]	; (800195c <barrido+0x294>)
 8001950:	f083 0320 	eor.w	r3, r3, #32
 8001954:	60d3      	str	r3, [r2, #12]
 8001956:	e011      	b.n	800197c <barrido+0x2b4>
 8001958:	40010c00 	.word	0x40010c00
 800195c:	40010800 	.word	0x40010800
 8001960:	08008124 	.word	0x08008124
 8001964:	08008138 	.word	0x08008138
 8001968:	08008140 	.word	0x08008140
 800196c:	0800814c 	.word	0x0800814c
 8001970:	08008158 	.word	0x08008158
 8001974:	08008164 	.word	0x08008164
 8001978:	08008178 	.word	0x08008178
		  //printf();
		  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 800197c:	bf00      	nop
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <barrido+0x3f0>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f9      	beq.n	800197e <barrido+0x2b6>
		  HAL_Delay(10);
 800198a:	200a      	movs	r0, #10
 800198c:	f000 fbe2 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //# space
 8001990:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <barrido+0x3f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <barrido+0x2f4>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 800199c:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <barrido+0x3f0>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <barrido+0x3f0>)
 80019a2:	f083 0320 	eor.w	r3, r3, #32
 80019a6:	60d3      	str	r3, [r2, #12]
		  //printf("");
		  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 80019a8:	bf00      	nop
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <barrido+0x3f0>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f9      	beq.n	80019aa <barrido+0x2e2>
		  HAL_Delay(10);
 80019b6:	200a      	movs	r0, #10
 80019b8:	f000 fbcc 	bl	8002154 <HAL_Delay>
	}

	//Fourth Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <barrido+0x3f4>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <barrido+0x3f4>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 80019c8:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <barrido+0x3f4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <barrido+0x3f4>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <barrido+0x3f4>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a38      	ldr	r2, [pc, #224]	; (8001abc <barrido+0x3f4>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR10;
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <barrido+0x3f4>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a35      	ldr	r2, [pc, #212]	; (8001abc <barrido+0x3f4>)
 80019e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019ea:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //A
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <barrido+0x3f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d112      	bne.n	8001a1e <barrido+0x356>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <barrido+0x3f0>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a2e      	ldr	r2, [pc, #184]	; (8001ab8 <barrido+0x3f0>)
 80019fe:	f083 0320 	eor.w	r3, r3, #32
 8001a02:	60d3      	str	r3, [r2, #12]
		printf("Drive Mode\n\r");
 8001a04:	482e      	ldr	r0, [pc, #184]	; (8001ac0 <barrido+0x3f8>)
 8001a06:	f004 fa61 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8001a0a:	bf00      	nop
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <barrido+0x3f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f9      	beq.n	8001a0c <barrido+0x344>
		HAL_Delay(10);
 8001a18:	200a      	movs	r0, #10
 8001a1a:	f000 fb9b 	bl	8002154 <HAL_Delay>
	  }
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //B
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <barrido+0x3f0>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d112      	bne.n	8001a50 <barrido+0x388>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <barrido+0x3f0>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <barrido+0x3f0>)
 8001a30:	f083 0320 	eor.w	r3, r3, #32
 8001a34:	60d3      	str	r3, [r2, #12]
		printf("Neutral Mode\n\r");
 8001a36:	4823      	ldr	r0, [pc, #140]	; (8001ac4 <barrido+0x3fc>)
 8001a38:	f004 fa48 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8001a3c:	bf00      	nop
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <barrido+0x3f0>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f9      	beq.n	8001a3e <barrido+0x376>
		HAL_Delay(10);
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f000 fb82 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //C
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <barrido+0x3f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d112      	bne.n	8001a82 <barrido+0x3ba>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <barrido+0x3f0>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <barrido+0x3f0>)
 8001a62:	f083 0320 	eor.w	r3, r3, #32
 8001a66:	60d3      	str	r3, [r2, #12]
		printf("Reverse Mode\n\r");
 8001a68:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <barrido+0x400>)
 8001a6a:	f004 fa2f 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8001a6e:	bf00      	nop
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <barrido+0x3f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f9      	beq.n	8001a70 <barrido+0x3a8>
		HAL_Delay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f000 fb69 	bl	8002154 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //D
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <barrido+0x3f0>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d112      	bne.n	8001ab4 <barrido+0x3ec>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <barrido+0x3f0>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <barrido+0x3f0>)
 8001a94:	f083 0320 	eor.w	r3, r3, #32
 8001a98:	60d3      	str	r3, [r2, #12]
		printf("D1 Mode\n\r");
 8001a9a:	480c      	ldr	r0, [pc, #48]	; (8001acc <barrido+0x404>)
 8001a9c:	f004 fa16 	bl	8005ecc <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8001aa0:	bf00      	nop
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <barrido+0x3f0>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f9      	beq.n	8001aa2 <barrido+0x3da>
		HAL_Delay(10);
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f000 fb50 	bl	8002154 <HAL_Delay>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	08008180 	.word	0x08008180
 8001ac4:	08008190 	.word	0x08008190
 8001ac8:	080081a0 	.word	0x080081a0
 8001acc:	080081b0 	.word	0x080081b0

08001ad0 <USER_ADC_Init>:

/* ADC FUNCTIONS */

void USER_ADC_Init(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <USER_ADC_Init+0x64>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <USER_ADC_Init+0x64>)
 8001ada:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001ade:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <USER_ADC_Init+0x64>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <USER_ADC_Init+0x64>)
 8001ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aea:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <USER_ADC_Init+0x64>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <USER_ADC_Init+0x64>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <USER_ADC_Init+0x64>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <USER_ADC_Init+0x64>)
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b0e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b16:	f023 031f 	bic.w	r3, r3, #31
 8001b1a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <USER_ADC_Init+0x64>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f000 fb13 	bl	8002154 <HAL_Delay>
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40012400 	.word	0x40012400

08001b38 <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <USER_ADC_Calibration+0x28>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <USER_ADC_Calibration+0x28>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 8001b48:	bf00      	nop
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <USER_ADC_Calibration+0x28>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <USER_ADC_Calibration+0x12>
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40012400 	.word	0x40012400

08001b64 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 8001b68:	bf00      	nop
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <USER_ADC_Read+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f9      	beq.n	8001b6a <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 8001b76:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <USER_ADC_Read+0x20>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	b29b      	uxth	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012400 	.word	0x40012400

08001b88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f001 fad4 	bl	800313e <osDelay>
 8001b96:	e7fb      	b.n	8001b90 <StartDefaultTask+0x8>

08001b98 <readMatricial>:
  }
  /* USER CODE END 5 */

}
void readMatricial(void const * argument){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t counter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
	uint32_t temp;
	/* Infinite loop */
	USER_USART1_Init();
 8001ba4:	f7ff fd60 	bl	8001668 <USER_USART1_Init>

	printf("Tt\r\n");
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <readMatricial+0x24>)
 8001baa:	f004 f9f5 	bl	8005f98 <puts>
	for(;;)
	{
	  barrido();
 8001bae:	f7ff fd8b 	bl	80016c8 <barrido>
	  osDelay(50);
 8001bb2:	2032      	movs	r0, #50	; 0x32
 8001bb4:	f001 fac3 	bl	800313e <osDelay>
	  barrido();
 8001bb8:	e7f9      	b.n	8001bae <readMatricial+0x16>
 8001bba:	bf00      	nop
 8001bbc:	080081bc 	.word	0x080081bc

08001bc0 <readADC>:
	  //osDelay(50 - (temp - (50 * counter++)));
	}
	/* USER CODE END 5 */
}

void readADC(void const * argument){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t counter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
	uint32_t temp;
	uint32_t msg;

	float dataADC = 0;
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
	float converted = 0;
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]

	USER_ADC_Init();
 8001bd8:	f7ff ff7a 	bl	8001ad0 <USER_ADC_Init>
	USER_ADC_Calibration();
 8001bdc:	f7ff ffac 	bl	8001b38 <USER_ADC_Calibration>
	ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <readADC+0xb0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <readADC+0xb0>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6093      	str	r3, [r2, #8]

	  /* Infinite loop */
	for(;;)
	{
	  dataADC = USER_ADC_Read();
 8001bec:	f7ff ffba 	bl	8001b64 <USER_ADC_Read>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f86e 	bl	8000cd4 <__aeabi_ui2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]
	  converted = 100*(dataADC/((pow(2,12)-1)));
 8001bfc:	6938      	ldr	r0, [r7, #16]
 8001bfe:	f7fe fc13 	bl	8000428 <__aeabi_f2d>
 8001c02:	a319      	add	r3, pc, #100	; (adr r3, 8001c68 <readADC+0xa8>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fd90 	bl	800072c <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <readADC+0xb4>)
 8001c1a:	f7fe fc5d 	bl	80004d8 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ff4f 	bl	8000ac8 <__aeabi_d2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]
	  msg = (uint32_t)floor(converted);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f006 f990 	bl	8007f60 <floor>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ff1e 	bl	8000a88 <__aeabi_d2uiz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60bb      	str	r3, [r7, #8]
	  osMessagePut(msgQueueHandle, msg, 0);
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <readADC+0xb8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 faad 	bl	80031b8 <osMessagePut>
//	  temp = osKernelSysTick() - (100 * counter++);
	  osDelay(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f001 fa6d 	bl	800313e <osDelay>
	{
 8001c64:	e7c2      	b.n	8001bec <readADC+0x2c>
 8001c66:	bf00      	nop
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40affe00 	.word	0x40affe00
 8001c70:	40012400 	.word	0x40012400
 8001c74:	40590000 	.word	0x40590000
 8001c78:	200004a4 	.word	0x200004a4

08001c7c <printLCD>:
	}
	  /* USER CODE END 5 */
}

void printLCD(void const * argument){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t counter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
	uint32_t temp;
	int valorAnterior = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
	int value, valorCambiado;
	osEvent r_event;

	LCD_Init( );//				inicializamos la libreria del LCD
 8001c8c:	f7ff f892 	bl	8000db4 <LCD_Init>
	LCD_Cursor_ON( );//			cursor visible activo
 8001c90:	200e      	movs	r0, #14
 8001c92:	f7ff f9af 	bl	8000ff4 <LCD_Write_Cmd>
	LCD_Clear( );//			borra la pantalla
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff f9ac 	bl	8000ff4 <LCD_Write_Cmd>
	LCD_Set_Cursor( 1,0);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff f9ce 	bl	8001040 <LCD_Set_Cursor>

	/* Infinite loop */
	for(;;)
	{
		r_event = osMessageGet(msgQueueHandle, 100);
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <printLCD+0xa0>)
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fac2 	bl	8003238 <osMessageGet>
		if( r_event.status == osEventMessage )
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d101      	bne.n	8001cbe <printLCD+0x42>
			value = r_event.value.v;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	623b      	str	r3, [r7, #32]

		 valorCambiado = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
			  // Comprobar si el valor ha cambiado
		 if (value < (valorAnterior - 3) || value > (valorAnterior + 3)) {
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	db04      	blt.n	8001cd6 <printLCD+0x5a>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3303      	adds	r3, #3
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dd01      	ble.n	8001cda <printLCD+0x5e>
				  valorCambiado = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
		 }
		if (valorCambiado) {
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <printLCD+0x96>
				  LCD_Clear();
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff f987 	bl	8000ff4 <LCD_Write_Cmd>
				  LCD_Set_Cursor(1, 0);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f9a9 	bl	8001040 <LCD_Set_Cursor>
				  LCD_Put_Str("V ->");
 8001cee:	480c      	ldr	r0, [pc, #48]	; (8001d20 <printLCD+0xa4>)
 8001cf0:	f7ff f9d1 	bl	8001096 <LCD_Put_Str>
				  LCD_Set_Cursor(2, 0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7ff f9a2 	bl	8001040 <LCD_Set_Cursor>
				  LCD_Put_Num(value);
 8001cfc:	6a38      	ldr	r0, [r7, #32]
 8001cfe:	f7ff f9e8 	bl	80010d2 <LCD_Put_Num>
				  LCD_Put_Str("%");
 8001d02:	4808      	ldr	r0, [pc, #32]	; (8001d24 <printLCD+0xa8>)
 8001d04:	f7ff f9c7 	bl	8001096 <LCD_Put_Str>
				  HAL_Delay(200);
 8001d08:	20c8      	movs	r0, #200	; 0xc8
 8001d0a:	f000 fa23 	bl	8002154 <HAL_Delay>
				  valorAnterior = value;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
			  }
//		temp = osKernelSysTick() - (100 * counter++);
		osDelay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f001 fa13 	bl	800313e <osDelay>
		r_event = osMessageGet(msgQueueHandle, 100);
 8001d18:	e7c4      	b.n	8001ca4 <printLCD+0x28>
 8001d1a:	bf00      	nop
 8001d1c:	200004a4 	.word	0x200004a4
 8001d20:	080081c0 	.word	0x080081c0
 8001d24:	080081c8 	.word	0x080081c8

08001d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d3a:	f000 f9ef 	bl	800211c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40000800 	.word	0x40000800

08001d4c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00f      	b.n	8001d8a <_write+0x32>
		while( ( USART1->SR & USART_SR_TXE ) == 0 ){}
 8001d6a:	bf00      	nop
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <_write+0x48>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f9      	beq.n	8001d6c <_write+0x14>
		USART1->DR = *ptr++;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_write+0x48>)
 8001d82:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbeb      	blt.n	8001d6a <_write+0x12>
	}
	return len;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40013800 	.word	0x40013800

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_MspInit+0x68>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_MspInit+0x68>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_MspInit+0x68>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_MspInit+0x68>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_MspInit+0x68>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_MspInit+0x68>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	f06f 0001 	mvn.w	r0, #1
 8001de2:	f000 fa90 	bl	8002306 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_MspInit+0x6c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_MspInit+0x6c>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000

08001e14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <HAL_InitTick+0xe8>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	; (8001efc <HAL_InitTick+0xe8>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_InitTick+0xe8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e42:	f107 0210 	add.w	r2, r7, #16
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fe63 	bl	8002b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e5c:	f000 fe48 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8001e60:	6378      	str	r0, [r7, #52]	; 0x34
 8001e62:	e004      	b.n	8001e6e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e64:	f000 fe44 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_InitTick+0xec>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_InitTick+0xf4>)
 8001e80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e88:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_InitTick+0xf0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001ea2:	4818      	ldr	r0, [pc, #96]	; (8001f04 <HAL_InitTick+0xf0>)
 8001ea4:	f000 fe86 	bl	8002bb4 <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11b      	bne.n	8001eee <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001eb6:	4813      	ldr	r0, [pc, #76]	; (8001f04 <HAL_InitTick+0xf0>)
 8001eb8:	f000 fed4 	bl	8002c64 <HAL_TIM_Base_Start_IT>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d111      	bne.n	8001eee <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eca:	201e      	movs	r0, #30
 8001ecc:	f000 fa37 	bl	800233e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	d808      	bhi.n	8001ee8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	201e      	movs	r0, #30
 8001edc:	f000 fa13 	bl	8002306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_InitTick+0xf8>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e002      	b.n	8001eee <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3738      	adds	r7, #56	; 0x38
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	200004a8 	.word	0x200004a8
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	20000004 	.word	0x20000004

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM4_IRQHandler+0x10>)
 8001f42:	f000 fee1 	bl	8002d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004a8 	.word	0x200004a8

08001f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <_kill>:

int _kill(int pid, int sig)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f68:	f004 f99e 	bl	80062a8 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2216      	movs	r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
  return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_exit>:

void _exit (int status)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f86:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffe7 	bl	8001f5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f90:	e7fe      	b.n	8001f90 <_exit+0x12>

08001f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e00a      	b.n	8001fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	4601      	mov	r1, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	b2ca      	uxtb	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf0      	blt.n	8001fa4 <_read+0x12>
  }

  return len;
 8001fc2:	687b      	ldr	r3, [r7, #4]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <_isatty>:

int _isatty(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f004 f924 	bl	80062a8 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20005000 	.word	0x20005000
 800208c:	00000400 	.word	0x00000400
 8002090:	200004f0 	.word	0x200004f0
 8002094:	20002b90 	.word	0x20002b90

08002098 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a4:	f7ff fff8 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a8:	480b      	ldr	r0, [pc, #44]	; (80020d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020aa:	490c      	ldr	r1, [pc, #48]	; (80020dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020c0:	4c09      	ldr	r4, [pc, #36]	; (80020e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ce:	f004 f8f1 	bl	80062b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d2:	f7ff f8b9 	bl	8001248 <main>
  bx lr
 80020d6:	4770      	bx	lr
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020e0:	080085b4 	.word	0x080085b4
  ldr r2, =_sbss
 80020e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80020e8:	20002b90 	.word	0x20002b90

080020ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC1_2_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_Init+0x28>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_Init+0x28>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 f8f5 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002106:	200f      	movs	r0, #15
 8002108:	f7ff fe84 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210c:	f7ff fe4a 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000

0800211c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_IncTick+0x1c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_IncTick+0x20>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_IncTick+0x20>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	20000008 	.word	0x20000008
 800213c:	200004f4 	.word	0x200004f4

08002140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_GetTick+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	200004f4 	.word	0x200004f4

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff0 	bl	8002140 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffe0 	bl	8002140 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4906      	ldr	r1, [pc, #24]	; (8002234 <__NVIC_EnableIRQ+0x34>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff4f 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff64 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ffb2 	bl	800228c <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff81 	bl	8002238 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff57 	bl	8002200 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e272      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <HAL_RCC_OscConfig+0x12c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d168      	bne.n	8002488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e24c      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76>
 80023c4:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0xbc>
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 8002418:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fe82 	bl	8002140 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fe7e 	bl	8002140 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e200      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xe4>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fe6e 	bl	8002140 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fe6a 	bl	8002140 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1ec      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x10c>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
 80024ae:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1c0      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fe23 	bl	8002140 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff fe1f 	bl	8002140 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1a1      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fe02 	bl	8002140 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff fdfe 	bl	8002140 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e180      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03a      	beq.n	80025e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff fde2 	bl	8002140 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff fdde 	bl	8002140 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e160      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 faea 	bl	8002b78 <RCC_Delay>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7ff fdc8 	bl	8002140 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff fdc4 	bl	8002140 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e146      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b92      	ldr	r3, [pc, #584]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a6 	beq.w	800273a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a87      	ldr	r2, [pc, #540]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b85      	ldr	r3, [pc, #532]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b82      	ldr	r3, [pc, #520]	; (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x4c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	; (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff fd85 	bl	8002140 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7ff fd81 	bl	8002140 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e103      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b75      	ldr	r3, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e02d      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x334>
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a69      	ldr	r2, [pc, #420]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b67      	ldr	r3, [pc, #412]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a66      	ldr	r2, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x356>
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a60      	ldr	r2, [pc, #384]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4b5e      	ldr	r3, [pc, #376]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a5d      	ldr	r2, [pc, #372]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a5a      	ldr	r2, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	4b58      	ldr	r3, [pc, #352]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a57      	ldr	r2, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff fd35 	bl	8002140 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7ff fd31 	bl	8002140 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0b1      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b4b      	ldr	r3, [pc, #300]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x37e>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fd1f 	bl	8002140 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7ff fd1b 	bl	8002140 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e09b      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a3b      	ldr	r2, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8087 	beq.w	8002852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d061      	beq.n	8002814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x4cc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff fcef 	bl	8002140 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff fceb 	bl	8002140 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e06d      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4921      	ldr	r1, [pc, #132]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a19      	ldr	r1, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	430b      	orrs	r3, r1
 80027b2:	491b      	ldr	r1, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff fcbf 	bl	8002140 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7ff fcbb 	bl	8002140 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e03d      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
 80027e4:	e035      	b.n	8002852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fca8 	bl	8002140 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff fca4 	bl	8002140 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e026      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x498>
 8002812:	e01e      	b.n	8002852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e019      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x500>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0d0      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4965      	ldr	r1, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d040      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e073      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4936      	ldr	r1, [pc, #216]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7ff fbf6 	bl	8002140 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7ff fbf2 	bl	8002140 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e053      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d210      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4922      	ldr	r1, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1cc>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fa00 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08008214 	.word	0x08008214
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x30>
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x36>
 8002a62:	e027      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	e027      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0c5b      	lsrs	r3, r3, #17
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	fb03 f202 	mul.w	r2, r3, r2
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e004      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	613b      	str	r3, [r7, #16]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	693b      	ldr	r3, [r7, #16]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	007a1200 	.word	0x007a1200
 8002ad0:	0800822c 	.word	0x0800822c
 8002ad4:	0800823c 	.word	0x0800823c
 8002ad8:	003d0900 	.word	0x003d0900

08002adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000000 	.word	0x20000000

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af4:	f7ff fff2 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08008224 	.word	0x08008224

08002b18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	220f      	movs	r2, #15
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_GetClockConfig+0x58>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_RCC_GetClockConfig+0x58>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetClockConfig+0x58>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b4c:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_RCC_GetClockConfig+0x58>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40022000 	.word	0x40022000

08002b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <RCC_Delay+0x34>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <RCC_Delay+0x38>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a5b      	lsrs	r3, r3, #9
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b94:	bf00      	nop
  }
  while (Delay --);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	60fa      	str	r2, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f9      	bne.n	8002b94 <RCC_Delay+0x1c>
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e041      	b.n	8002c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f839 	bl	8002c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f000 f9b4 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e03a      	b.n	8002cf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_Base_Start_IT+0x98>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x58>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d010      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800

08002d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8ed 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8e0 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8ef 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0204 	mvn.w	r2, #4
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8c3 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8b6 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8c5 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0208 	mvn.w	r2, #8
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2204      	movs	r2, #4
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f899 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f88c 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f89b 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0210 	mvn.w	r2, #16
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2208      	movs	r2, #8
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f86f 	bl	8002f2a <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f862 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f871 	bl	8002f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0201 	mvn.w	r2, #1
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe ff4e 	bl	8001d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8bf 	bl	8003036 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f835 	bl	8002f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0220 	mvn.w	r2, #32
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f88a 	bl	8003024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a29      	ldr	r2, [pc, #164]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a26      	ldr	r2, [pc, #152]	; (800301c <TIM_Base_SetConfig+0xbc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <TIM_Base_SetConfig+0xc0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d007      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <TIM_Base_SetConfig+0xbc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <TIM_Base_SetConfig+0xc0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <TIM_Base_SetConfig+0xb8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800

08003024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305a:	2b84      	cmp	r3, #132	; 0x84
 800305c:	d005      	beq.n	800306a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800305e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	3303      	adds	r3, #3
 8003068:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800307c:	f3ef 8305 	mrs	r3, IPSR
 8003080:	607b      	str	r3, [r7, #4]
  return(result);
 8003082:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800309c:	f001 f908 	bl	80042b0 <vTaskStartScheduler>
  
  return osOK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a8:	b089      	sub	sp, #36	; 0x24
 80030aa:	af04      	add	r7, sp, #16
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <osThreadCreate+0x54>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685c      	ldr	r4, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691e      	ldr	r6, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ffb8 	bl	8003048 <makeFreeRtosPriority>
 80030d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030e2:	9202      	str	r2, [sp, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	9100      	str	r1, [sp, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4632      	mov	r2, r6
 80030ec:	4629      	mov	r1, r5
 80030ee:	4620      	mov	r0, r4
 80030f0:	f000 ff08 	bl	8003f04 <xTaskCreateStatic>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e01c      	b.n	8003134 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685c      	ldr	r4, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003106:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ff9a 	bl	8003048 <makeFreeRtosPriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	9200      	str	r2, [sp, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4632      	mov	r2, r6
 8003122:	4629      	mov	r1, r5
 8003124:	4620      	mov	r0, r4
 8003126:	f000 ff49 	bl	8003fbc <xTaskCreate>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003134:	68fb      	ldr	r3, [r7, #12]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800313e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <osDelay+0x16>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	e000      	b.n	8003156 <osDelay+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f876 	bl	8004248 <vTaskDelay>
  
  return osOK;
 800315c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b085      	sub	sp, #20
 800316a:	af02      	add	r7, sp, #8
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d011      	beq.n	800319c <osMessageCreate+0x36>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2400      	movs	r4, #0
 8003192:	9400      	str	r4, [sp, #0]
 8003194:	f000 f9dc 	bl	8003550 <xQueueGenericCreateStatic>
 8003198:	4603      	mov	r3, r0
 800319a:	e008      	b.n	80031ae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	4619      	mov	r1, r3
 80031a8:	f000 fa49 	bl	800363e <xQueueGenericCreate>
 80031ac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
	...

080031b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <osMessagePut+0x1e>
    ticks = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80031d6:	f7ff ff4e 	bl	8003076 <inHandlerMode>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d018      	beq.n	8003212 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80031e0:	f107 0210 	add.w	r2, r7, #16
 80031e4:	f107 0108 	add.w	r1, r7, #8
 80031e8:	2300      	movs	r3, #0
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fb82 	bl	80038f4 <xQueueGenericSendFromISR>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <osMessagePut+0x42>
      return osErrorOS;
 80031f6:	23ff      	movs	r3, #255	; 0xff
 80031f8:	e018      	b.n	800322c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <osMessagePut+0x72>
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <osMessagePut+0x7c>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	e00b      	b.n	800322a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003212:	f107 0108 	add.w	r1, r7, #8
 8003216:	2300      	movs	r3, #0
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa6c 	bl	80036f8 <xQueueGenericSend>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <osMessagePut+0x72>
      return osErrorOS;
 8003226:	23ff      	movs	r3, #255	; 0xff
 8003228:	e000      	b.n	800322c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b08b      	sub	sp, #44	; 0x2c
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	617b      	str	r3, [r7, #20]
    return event;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	461c      	mov	r4, r3
 800325a:	f107 0314 	add.w	r3, r7, #20
 800325e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003266:	e054      	b.n	8003312 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	e009      	b.n	8003294 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <osMessageGet+0x5c>
      ticks = 1;
 8003290:	2301      	movs	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003294:	f7ff feef 	bl	8003076 <inHandlerMode>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01c      	beq.n	80032d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800329e:	f107 0220 	add.w	r2, r7, #32
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	68b8      	ldr	r0, [r7, #8]
 80032ac:	f000 fc9a 	bl	8003be4 <xQueueReceiveFromISR>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80032b6:	2310      	movs	r3, #16
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e001      	b.n	80032c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01d      	beq.n	8003302 <osMessageGet+0xca>
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <osMessageGet+0xe4>)
 80032c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	e014      	b.n	8003302 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	3304      	adds	r3, #4
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f000 fb9e 	bl	8003a24 <xQueueReceive>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80032ee:	2310      	movs	r3, #16
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e006      	b.n	8003302 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <osMessageGet+0xc6>
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <osMessageGet+0xc8>
 80032fe:	2340      	movs	r3, #64	; 0x40
 8003300:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	461c      	mov	r4, r3
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800330e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	372c      	adds	r7, #44	; 0x2c
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}
 800331a:	bf00      	nop
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f103 0208 	add.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f103 0208 	add.w	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0208 	add.w	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d103      	bne.n	80033dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e00c      	b.n	80033f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3308      	adds	r3, #8
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e002      	b.n	80033ea <vListInsert+0x2e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d2f6      	bcs.n	80033e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6852      	ldr	r2, [r2, #4]
 800344c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d103      	bne.n	8003460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034aa:	f001 fd17 	bl	8004edc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	3b01      	subs	r3, #1
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	22ff      	movs	r2, #255	; 0xff
 80034f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d114      	bne.n	800352a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3310      	adds	r3, #16
 800350c:	4618      	mov	r0, r3
 800350e:	f001 f927 	bl	8004760 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <xQueueGenericReset+0xcc>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	e009      	b.n	800353e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3310      	adds	r3, #16
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fef6 	bl	8003320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fef1 	bl	8003320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800353e:	f001 fcfd 	bl	8004f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <xQueueGenericCreateStatic+0x52>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <xQueueGenericCreateStatic+0x56>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xQueueGenericCreateStatic+0x58>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	623b      	str	r3, [r7, #32]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xQueueGenericCreateStatic+0x7e>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericCreateStatic+0x82>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericCreateStatic+0x84>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	61fb      	str	r3, [r7, #28]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035ee:	2348      	movs	r3, #72	; 0x48
 80035f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b48      	cmp	r3, #72	; 0x48
 80035f6:	d00a      	beq.n	800360e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61bb      	str	r3, [r7, #24]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003620:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f843 	bl	80036ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003636:	4618      	mov	r0, r3
 8003638:	3730      	adds	r7, #48	; 0x30
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800363e:	b580      	push	{r7, lr}
 8003640:	b08a      	sub	sp, #40	; 0x28
 8003642:	af02      	add	r7, sp, #8
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	613b      	str	r3, [r7, #16]
}
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e004      	b.n	800367e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3348      	adds	r3, #72	; 0x48
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fd2a 	bl	80050dc <pvPortMalloc>
 8003688:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00f      	beq.n	80036b0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	3348      	adds	r3, #72	; 0x48
 8003694:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800369e:	79fa      	ldrb	r2, [r7, #7]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f805 	bl	80036ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80036b0:	69bb      	ldr	r3, [r7, #24]
	}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e002      	b.n	80036dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036e8:	2101      	movs	r1, #1
 80036ea:	69b8      	ldr	r0, [r7, #24]
 80036ec:	f7ff fec8 	bl	8003480 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08e      	sub	sp, #56	; 0x38
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueGenericSend+0x32>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <xQueueGenericSend+0x40>
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <xQueueGenericSend+0x44>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <xQueueGenericSend+0x46>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <xQueueGenericSend+0x60>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d103      	bne.n	8003766 <xQueueGenericSend+0x6e>
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <xQueueGenericSend+0x72>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <xQueueGenericSend+0x74>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericSend+0x8e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	623b      	str	r3, [r7, #32]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003786:	f001 f9af 	bl	8004ae8 <xTaskGetSchedulerState>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <xQueueGenericSend+0x9e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <xQueueGenericSend+0xa2>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueGenericSend+0xa4>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	61fb      	str	r3, [r7, #28]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037b6:	f001 fb91 	bl	8004edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <xQueueGenericSend+0xd4>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d129      	bne.n	8003820 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d2:	f000 fa87 	bl	8003ce4 <prvCopyDataToQueue>
 80037d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 ffbb 	bl	8004760 <xTaskRemoveFromEventList>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037f0:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <xQueueGenericSend+0x1f8>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	e00a      	b.n	8003818 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003808:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <xQueueGenericSend+0x1f8>)
 800380a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003818:	f001 fb90 	bl	8004f3c <vPortExitCritical>
				return pdPASS;
 800381c:	2301      	movs	r3, #1
 800381e:	e063      	b.n	80038e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003826:	f001 fb89 	bl	8004f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800382a:	2300      	movs	r3, #0
 800382c:	e05c      	b.n	80038e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fff3 	bl	8004824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800383e:	2301      	movs	r3, #1
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003842:	f001 fb7b 	bl	8004f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003846:	f000 fd9d 	bl	8004384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800384a:	f001 fb47 	bl	8004edc <vPortEnterCritical>
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003854:	b25b      	sxtb	r3, r3
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d103      	bne.n	8003864 <xQueueGenericSend+0x16c>
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386a:	b25b      	sxtb	r3, r3
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d103      	bne.n	800387a <xQueueGenericSend+0x182>
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387a:	f001 fb5f 	bl	8004f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800387e:	1d3a      	adds	r2, r7, #4
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 ffe2 	bl	8004850 <xTaskCheckForTimeOut>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d124      	bne.n	80038dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003894:	f000 fb1e 	bl	8003ed4 <prvIsQueueFull>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	3310      	adds	r3, #16
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 ff36 	bl	8004718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ae:	f000 faa9 	bl	8003e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038b2:	f000 fd75 	bl	80043a0 <xTaskResumeAll>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f47f af7c 	bne.w	80037b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <xQueueGenericSend+0x1f8>)
 80038c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	e772      	b.n	80037b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038d2:	f000 fa97 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038d6:	f000 fd63 	bl	80043a0 <xTaskResumeAll>
 80038da:	e76c      	b.n	80037b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038de:	f000 fa91 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038e2:	f000 fd5d 	bl	80043a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038e6:	2300      	movs	r3, #0
		}
	}
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3738      	adds	r7, #56	; 0x38
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	; 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <xQueueGenericSendFromISR+0x3c>
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <xQueueGenericSendFromISR+0x40>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <xQueueGenericSendFromISR+0x42>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	623b      	str	r3, [r7, #32]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <xQueueGenericSendFromISR+0x6a>
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <xQueueGenericSendFromISR+0x6e>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueGenericSendFromISR+0x70>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	61fb      	str	r3, [r7, #28]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800397e:	f001 fb6f 	bl	8005060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003982:	f3ef 8211 	mrs	r2, BASEPRI
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	61ba      	str	r2, [r7, #24]
 8003998:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800399a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <xQueueGenericSendFromISR+0xbc>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d12c      	bne.n	8003a0a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c0:	f000 f990 	bl	8003ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d112      	bne.n	80039f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	3324      	adds	r3, #36	; 0x24
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fec0 	bl	8004760 <xTaskRemoveFromEventList>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00b      	beq.n	8003a04 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e007      	b.n	8003a04 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	b25a      	sxtb	r2, r3
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a04:	2301      	movs	r3, #1
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a08:	e001      	b.n	8003a0e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3738      	adds	r7, #56	; 0x38
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <xQueueReceive+0x30>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	623b      	str	r3, [r7, #32]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <xQueueReceive+0x3e>
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <xQueueReceive+0x42>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueReceive+0x44>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xQueueReceive+0x5e>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61fb      	str	r3, [r7, #28]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a82:	f001 f831 	bl	8004ae8 <xTaskGetSchedulerState>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <xQueueReceive+0x6e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <xQueueReceive+0x72>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueReceive+0x74>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueReceive+0x8e>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	61bb      	str	r3, [r7, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab2:	f001 fa13 	bl	8004edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01f      	beq.n	8003b02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac6:	f000 f977 	bl	8003db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	3310      	adds	r3, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fe3e 	bl	8004760 <xTaskRemoveFromEventList>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <xQueueReceive+0x1bc>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003afa:	f001 fa1f 	bl	8004f3c <vPortExitCritical>
				return pdPASS;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e069      	b.n	8003bd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b08:	f001 fa18 	bl	8004f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e062      	b.n	8003bd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fe82 	bl	8004824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b24:	f001 fa0a 	bl	8004f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b28:	f000 fc2c 	bl	8004384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2c:	f001 f9d6 	bl	8004edc <vPortEnterCritical>
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d103      	bne.n	8003b46 <xQueueReceive+0x122>
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d103      	bne.n	8003b5c <xQueueReceive+0x138>
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5c:	f001 f9ee 	bl	8004f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b60:	1d3a      	adds	r2, r7, #4
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fe71 	bl	8004850 <xTaskCheckForTimeOut>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d123      	bne.n	8003bbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	f000 f997 	bl	8003ea8 <prvIsQueueEmpty>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d017      	beq.n	8003bb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fdc5 	bl	8004718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b90:	f000 f938 	bl	8003e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b94:	f000 fc04 	bl	80043a0 <xTaskResumeAll>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d189      	bne.n	8003ab2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <xQueueReceive+0x1bc>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e780      	b.n	8003ab2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb2:	f000 f927 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb6:	f000 fbf3 	bl	80043a0 <xTaskResumeAll>
 8003bba:	e77a      	b.n	8003ab2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbe:	f000 f921 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc2:	f000 fbed 	bl	80043a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc8:	f000 f96e 	bl	8003ea8 <prvIsQueueEmpty>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f43f af6f 	beq.w	8003ab2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3730      	adds	r7, #48	; 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	; 0x38
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	623b      	str	r3, [r7, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <xQueueReceiveFromISR+0x3a>
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <xQueueReceiveFromISR+0x3e>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueReceiveFromISR+0x40>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	61fb      	str	r3, [r7, #28]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c3e:	f001 fa0f 	bl	8005060 <vPortValidateInterruptPriority>
	__asm volatile
 8003c42:	f3ef 8211 	mrs	r2, BASEPRI
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	61ba      	str	r2, [r7, #24]
 8003c58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02f      	beq.n	8003cca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c78:	f000 f89e 	bl	8003db8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d112      	bne.n	8003cb4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	3310      	adds	r3, #16
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd60 	bl	8004760 <xTaskRemoveFromEventList>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00e      	beq.n	8003cc4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e007      	b.n	8003cc4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	b25a      	sxtb	r2, r3
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc8:	e001      	b.n	8003cce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f383 8811 	msr	BASEPRI, r3
}
 8003cd8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3738      	adds	r7, #56	; 0x38
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d14d      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff08 	bl	8004b24 <xTaskPriorityDisinherit>
 8003d14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	e043      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d119      	bne.n	8003d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6898      	ldr	r0, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	f002 faf5 	bl	800631e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d32b      	bcc.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	e026      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68d8      	ldr	r0, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	461a      	mov	r2, r3
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	f002 fadb 	bl	800631e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	425b      	negs	r3, r3
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d207      	bcs.n	8003d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d105      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dae:	697b      	ldr	r3, [r7, #20]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d303      	bcc.n	8003dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	461a      	mov	r2, r3
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f002 fa91 	bl	800631e <memcpy>
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e0c:	f001 f866 	bl	8004edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e18:	e011      	b.n	8003e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3324      	adds	r3, #36	; 0x24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fc9a 	bl	8004760 <xTaskRemoveFromEventList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e32:	f000 fd6f 	bl	8004914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dce9      	bgt.n	8003e1a <prvUnlockQueue+0x16>
 8003e46:	e000      	b.n	8003e4a <prvUnlockQueue+0x46>
					break;
 8003e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e52:	f001 f873 	bl	8004f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e56:	f001 f841 	bl	8004edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e62:	e011      	b.n	8003e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fc75 	bl	8004760 <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e7c:	f000 fd4a 	bl	8004914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dce9      	bgt.n	8003e64 <prvUnlockQueue+0x60>
 8003e90:	e000      	b.n	8003e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e9c:	f001 f84e 	bl	8004f3c <vPortExitCritical>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 f814 	bl	8004edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e001      	b.n	8003ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ec6:	f001 f839 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003edc:	f000 fffe 	bl	8004edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d102      	bne.n	8003ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 f821 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10a      	bne.n	8003f2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	623b      	str	r3, [r7, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTaskCreateStatic+0x46>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61fb      	str	r3, [r7, #28]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f4a:	23a0      	movs	r3, #160	; 0xa0
 8003f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2ba0      	cmp	r3, #160	; 0xa0
 8003f52:	d00a      	beq.n	8003f6a <xTaskCreateStatic+0x66>
	__asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	61bb      	str	r3, [r7, #24]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01e      	beq.n	8003fae <xTaskCreateStatic+0xaa>
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01b      	beq.n	8003fae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9303      	str	r3, [sp, #12]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f851 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa8:	f000 f8e4 	bl	8004174 <prvAddNewTaskToReadyList>
 8003fac:	e001      	b.n	8003fb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb2:	697b      	ldr	r3, [r7, #20]
	}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af04      	add	r7, sp, #16
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f883 	bl	80050dc <pvPortMalloc>
 8003fd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fde:	20a0      	movs	r0, #160	; 0xa0
 8003fe0:	f001 f87c 	bl	80050dc <pvPortMalloc>
 8003fe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff2:	e005      	b.n	8004000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff4:	6978      	ldr	r0, [r7, #20]
 8003ff6:	f001 f935 	bl	8005264 <vPortFree>
 8003ffa:	e001      	b.n	8004000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d017      	beq.n	8004036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	2300      	movs	r3, #0
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	9302      	str	r3, [sp, #8]
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f80f 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402a:	69f8      	ldr	r0, [r7, #28]
 800402c:	f000 f8a2 	bl	8004174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004030:	2301      	movs	r3, #1
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e002      	b.n	800403c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800403c:	69bb      	ldr	r3, [r7, #24]
	}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004060:	3b01      	subs	r3, #1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <prvInitialiseNewTask+0x48>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	617b      	str	r3, [r7, #20]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e012      	b.n	80040bc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	7819      	ldrb	r1, [r3, #0]
 800409e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	3334      	adds	r3, #52	; 0x34
 80040a6:	460a      	mov	r2, r1
 80040a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d9e9      	bls.n	8004096 <prvInitialiseNewTask+0x4e>
 80040c2:	e000      	b.n	80040c6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80040c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	2b06      	cmp	r3, #6
 80040d2:	d901      	bls.n	80040d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040d4:	2306      	movs	r3, #6
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	2200      	movs	r2, #0
 80040e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f935 	bl	800335e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	3318      	adds	r3, #24
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f930 	bl	800335e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f1c3 0207 	rsb	r2, r3, #7
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	334c      	adds	r3, #76	; 0x4c
 8004128:	224c      	movs	r2, #76	; 0x4c
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f002 f813 	bl	8006158 <memset>
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <prvInitialiseNewTask+0x120>)
 8004136:	651a      	str	r2, [r3, #80]	; 0x50
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <prvInitialiseNewTask+0x124>)
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <prvInitialiseNewTask+0x128>)
 8004142:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	69b8      	ldr	r0, [r7, #24]
 800414a:	f000 fdd7 	bl	8004cfc <pxPortInitialiseStack>
 800414e:	4602      	mov	r2, r0
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20002a44 	.word	0x20002a44
 800416c:	20002aac 	.word	0x20002aac
 8004170:	20002b14 	.word	0x20002b14

08004174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800417c:	f000 feae 	bl	8004edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <prvAddNewTaskToReadyList+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a29      	ldr	r2, [pc, #164]	; (800422c <prvAddNewTaskToReadyList+0xb8>)
 8004188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <prvAddNewTaskToReadyList+0xbc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <prvAddNewTaskToReadyList+0xbc>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <prvAddNewTaskToReadyList+0xb8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d110      	bne.n	80041c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041a0:	f000 fbdc 	bl	800495c <prvInitialiseTaskLists>
 80041a4:	e00d      	b.n	80041c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041a6:	4b23      	ldr	r3, [pc, #140]	; (8004234 <prvAddNewTaskToReadyList+0xc0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <prvAddNewTaskToReadyList+0xbc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d802      	bhi.n	80041c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <prvAddNewTaskToReadyList+0xbc>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <prvAddNewTaskToReadyList+0xc4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <prvAddNewTaskToReadyList+0xc4>)
 80041ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	2201      	movs	r2, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <prvAddNewTaskToReadyList+0xc8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	4a18      	ldr	r2, [pc, #96]	; (800423c <prvAddNewTaskToReadyList+0xc8>)
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a15      	ldr	r2, [pc, #84]	; (8004240 <prvAddNewTaskToReadyList+0xcc>)
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7ff f8be 	bl	8003376 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041fa:	f000 fe9f 	bl	8004f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <prvAddNewTaskToReadyList+0xc0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvAddNewTaskToReadyList+0xbc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	429a      	cmp	r2, r3
 8004212:	d207      	bcs.n	8004224 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <prvAddNewTaskToReadyList+0xd0>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	200005f8 	.word	0x200005f8
 8004230:	200004f8 	.word	0x200004f8
 8004234:	20000604 	.word	0x20000604
 8004238:	20000614 	.word	0x20000614
 800423c:	20000600 	.word	0x20000600
 8004240:	200004fc 	.word	0x200004fc
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d017      	beq.n	800428a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <vTaskDelay+0x60>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <vTaskDelay+0x30>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004278:	f000 f884 	bl	8004384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800427c:	2100      	movs	r1, #0
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fcd6 	bl	8004c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004284:	f000 f88c 	bl	80043a0 <xTaskResumeAll>
 8004288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <vTaskDelay+0x64>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000620 	.word	0x20000620
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042be:	463a      	mov	r2, r7
 80042c0:	1d39      	adds	r1, r7, #4
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc fd5c 	bl	8000d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	9202      	str	r2, [sp, #8]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	460a      	mov	r2, r1
 80042de:	4921      	ldr	r1, [pc, #132]	; (8004364 <vTaskStartScheduler+0xb4>)
 80042e0:	4821      	ldr	r0, [pc, #132]	; (8004368 <vTaskStartScheduler+0xb8>)
 80042e2:	f7ff fe0f 	bl	8003f04 <xTaskCreateStatic>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <vTaskStartScheduler+0xbc>)
 80042ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042ec:	4b1f      	ldr	r3, [pc, #124]	; (800436c <vTaskStartScheduler+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042f4:	2301      	movs	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e001      	b.n	80042fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d11b      	bne.n	800433c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
}
 8004316:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <vTaskStartScheduler+0xc0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	334c      	adds	r3, #76	; 0x4c
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <vTaskStartScheduler+0xc4>)
 8004320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <vTaskStartScheduler+0xc8>)
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <vTaskStartScheduler+0xcc>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <vTaskStartScheduler+0xd0>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004336:	f000 fd5f 	bl	8004df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800433a:	e00e      	b.n	800435a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d10a      	bne.n	800435a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	60fb      	str	r3, [r7, #12]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <vTaskStartScheduler+0xa8>
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	080081cc 	.word	0x080081cc
 8004368:	0800492d 	.word	0x0800492d
 800436c:	2000061c 	.word	0x2000061c
 8004370:	200004f8 	.word	0x200004f8
 8004374:	20000068 	.word	0x20000068
 8004378:	20000618 	.word	0x20000618
 800437c:	20000604 	.word	0x20000604
 8004380:	200005fc 	.word	0x200005fc

08004384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <vTaskSuspendAll+0x18>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	4a03      	ldr	r2, [pc, #12]	; (800439c <vTaskSuspendAll+0x18>)
 8004390:	6013      	str	r3, [r2, #0]
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	20000620 	.word	0x20000620

080043a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <xTaskResumeAll+0x114>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <xTaskResumeAll+0x2c>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	603b      	str	r3, [r7, #0]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043cc:	f000 fd86 	bl	8004edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043d0:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <xTaskResumeAll+0x114>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4a37      	ldr	r2, [pc, #220]	; (80044b4 <xTaskResumeAll+0x114>)
 80043d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043da:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <xTaskResumeAll+0x114>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d161      	bne.n	80044a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043e2:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <xTaskResumeAll+0x118>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d05d      	beq.n	80044a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ea:	e02e      	b.n	800444a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043ec:	4b33      	ldr	r3, [pc, #204]	; (80044bc <xTaskResumeAll+0x11c>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3318      	adds	r3, #24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff f817 	bl	800342c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3304      	adds	r3, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f812 	bl	800342c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <xTaskResumeAll+0x120>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <xTaskResumeAll+0x120>)
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a27      	ldr	r2, [pc, #156]	; (80044c4 <xTaskResumeAll+0x124>)
 8004428:	441a      	add	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7fe ffa0 	bl	8003376 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443a:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <xTaskResumeAll+0x128>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <xTaskResumeAll+0x12c>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <xTaskResumeAll+0x11c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1cc      	bne.n	80043ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004458:	f000 fb22 	bl	8004aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <xTaskResumeAll+0x130>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004468:	f000 f836 	bl	80044d8 <xTaskIncrementTick>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <xTaskResumeAll+0x12c>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3b01      	subs	r3, #1
 800447c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f1      	bne.n	8004468 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <xTaskResumeAll+0x130>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <xTaskResumeAll+0x12c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <xTaskResumeAll+0x134>)
 8004498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f000 fd49 	bl	8004f3c <vPortExitCritical>

	return xAlreadyYielded;
 80044aa:	68bb      	ldr	r3, [r7, #8]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000620 	.word	0x20000620
 80044b8:	200005f8 	.word	0x200005f8
 80044bc:	200005b8 	.word	0x200005b8
 80044c0:	20000600 	.word	0x20000600
 80044c4:	200004fc 	.word	0x200004fc
 80044c8:	200004f8 	.word	0x200004f8
 80044cc:	2000060c 	.word	0x2000060c
 80044d0:	20000608 	.word	0x20000608
 80044d4:	e000ed04 	.word	0xe000ed04

080044d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e2:	4b51      	ldr	r3, [pc, #324]	; (8004628 <xTaskIncrementTick+0x150>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 808d 	bne.w	8004606 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <xTaskIncrementTick+0x154>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044f4:	4a4d      	ldr	r2, [pc, #308]	; (800462c <xTaskIncrementTick+0x154>)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d120      	bne.n	8004542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <xTaskIncrementTick+0x158>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <xTaskIncrementTick+0x48>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	603b      	str	r3, [r7, #0]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xTaskIncrementTick+0x46>
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <xTaskIncrementTick+0x158>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b43      	ldr	r3, [pc, #268]	; (8004634 <xTaskIncrementTick+0x15c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a41      	ldr	r2, [pc, #260]	; (8004630 <xTaskIncrementTick+0x158>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4a41      	ldr	r2, [pc, #260]	; (8004634 <xTaskIncrementTick+0x15c>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b40      	ldr	r3, [pc, #256]	; (8004638 <xTaskIncrementTick+0x160>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <xTaskIncrementTick+0x160>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	f000 faaf 	bl	8004aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <xTaskIncrementTick+0x164>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	429a      	cmp	r2, r3
 800454a:	d34d      	bcc.n	80045e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <xTaskIncrementTick+0x158>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <xTaskIncrementTick+0x82>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xTaskIncrementTick+0x84>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d004      	beq.n	800456a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <xTaskIncrementTick+0x164>)
 8004562:	f04f 32ff 	mov.w	r2, #4294967295
 8004566:	601a      	str	r2, [r3, #0]
					break;
 8004568:	e03e      	b.n	80045e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <xTaskIncrementTick+0x158>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d203      	bcs.n	800458a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004582:	4a2e      	ldr	r2, [pc, #184]	; (800463c <xTaskIncrementTick+0x164>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6013      	str	r3, [r2, #0]
						break;
 8004588:	e02e      	b.n	80045e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe ff4c 	bl	800342c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3318      	adds	r3, #24
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe ff43 	bl	800342c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	2201      	movs	r2, #1
 80045ac:	409a      	lsls	r2, r3
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <xTaskIncrementTick+0x168>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <xTaskIncrementTick+0x168>)
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <xTaskIncrementTick+0x16c>)
 80045c6:	441a      	add	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f7fe fed1 	bl	8003376 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <xTaskIncrementTick+0x170>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3b4      	bcc.n	800454c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045e2:	2301      	movs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e6:	e7b1      	b.n	800454c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <xTaskIncrementTick+0x170>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	4915      	ldr	r1, [pc, #84]	; (8004644 <xTaskIncrementTick+0x16c>)
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d907      	bls.n	8004610 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e004      	b.n	8004610 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <xTaskIncrementTick+0x174>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a0f      	ldr	r2, [pc, #60]	; (800464c <xTaskIncrementTick+0x174>)
 800460e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <xTaskIncrementTick+0x178>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800461c:	697b      	ldr	r3, [r7, #20]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000620 	.word	0x20000620
 800462c:	200005fc 	.word	0x200005fc
 8004630:	200005b0 	.word	0x200005b0
 8004634:	200005b4 	.word	0x200005b4
 8004638:	20000610 	.word	0x20000610
 800463c:	20000618 	.word	0x20000618
 8004640:	20000600 	.word	0x20000600
 8004644:	200004fc 	.word	0x200004fc
 8004648:	200004f8 	.word	0x200004f8
 800464c:	20000608 	.word	0x20000608
 8004650:	2000060c 	.word	0x2000060c

08004654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <vTaskSwitchContext+0xac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <vTaskSwitchContext+0xb0>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004668:	e044      	b.n	80046f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <vTaskSwitchContext+0xb0>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <vTaskSwitchContext+0xb4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800467e:	7afb      	ldrb	r3, [r7, #11]
 8004680:	f1c3 031f 	rsb	r3, r3, #31
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	4921      	ldr	r1, [pc, #132]	; (800470c <vTaskSwitchContext+0xb8>)
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	607b      	str	r3, [r7, #4]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vTaskSwitchContext+0x5a>
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4a14      	ldr	r2, [pc, #80]	; (800470c <vTaskSwitchContext+0xb8>)
 80046bc:	4413      	add	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3308      	adds	r3, #8
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d104      	bne.n	80046e0 <vTaskSwitchContext+0x8c>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <vTaskSwitchContext+0xbc>)
 80046e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <vTaskSwitchContext+0xbc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	334c      	adds	r3, #76	; 0x4c
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <vTaskSwitchContext+0xc0>)
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000620 	.word	0x20000620
 8004704:	2000060c 	.word	0x2000060c
 8004708:	20000600 	.word	0x20000600
 800470c:	200004fc 	.word	0x200004fc
 8004710:	200004f8 	.word	0x200004f8
 8004714:	20000068 	.word	0x20000068

08004718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800473e:	4b07      	ldr	r3, [pc, #28]	; (800475c <vTaskPlaceOnEventList+0x44>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3318      	adds	r3, #24
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fe38 	bl	80033bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800474c:	2101      	movs	r1, #1
 800474e:	6838      	ldr	r0, [r7, #0]
 8004750:	f000 fa6e 	bl	8004c30 <prvAddCurrentTaskToDelayedList>
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200004f8 	.word	0x200004f8

08004760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	3318      	adds	r3, #24
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fe4b 	bl	800342c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <xTaskRemoveFromEventList+0xac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11c      	bne.n	80047d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fe42 	bl	800342c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <xTaskRemoveFromEventList+0xb0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	4a16      	ldr	r2, [pc, #88]	; (8004810 <xTaskRemoveFromEventList+0xb0>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <xTaskRemoveFromEventList+0xb4>)
 80047c8:	441a      	add	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f7fe fdd0 	bl	8003376 <vListInsertEnd>
 80047d6:	e005      	b.n	80047e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3318      	adds	r3, #24
 80047dc:	4619      	mov	r1, r3
 80047de:	480e      	ldr	r0, [pc, #56]	; (8004818 <xTaskRemoveFromEventList+0xb8>)
 80047e0:	f7fe fdc9 	bl	8003376 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <xTaskRemoveFromEventList+0xbc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d905      	bls.n	80047fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <xTaskRemoveFromEventList+0xc0>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e001      	b.n	8004802 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000620 	.word	0x20000620
 8004810:	20000600 	.word	0x20000600
 8004814:	200004fc 	.word	0x200004fc
 8004818:	200005b8 	.word	0x200005b8
 800481c:	200004f8 	.word	0x200004f8
 8004820:	2000060c 	.word	0x2000060c

08004824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <vTaskInternalSetTimeOutState+0x24>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004834:	4b05      	ldr	r3, [pc, #20]	; (800484c <vTaskInternalSetTimeOutState+0x28>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	605a      	str	r2, [r3, #4]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000610 	.word	0x20000610
 800484c:	200005fc 	.word	0x200005fc

08004850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	613b      	str	r3, [r7, #16]
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004892:	f000 fb23 	bl	8004edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <xTaskCheckForTimeOut+0xbc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d102      	bne.n	80048b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e023      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <xTaskCheckForTimeOut+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d007      	beq.n	80048d2 <xTaskCheckForTimeOut+0x82>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e015      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d20b      	bcs.n	80048f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff9b 	bl	8004824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e004      	b.n	80048fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048fe:	f000 fb1d 	bl	8004f3c <vPortExitCritical>

	return xReturn;
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200005fc 	.word	0x200005fc
 8004910:	20000610 	.word	0x20000610

08004914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <vTaskMissedYield+0x14>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	2000060c 	.word	0x2000060c

0800492c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004934:	f000 f852 	bl	80049dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <prvIdleTask+0x28>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d9f9      	bls.n	8004934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <prvIdleTask+0x2c>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004950:	e7f0      	b.n	8004934 <prvIdleTask+0x8>
 8004952:	bf00      	nop
 8004954:	200004fc 	.word	0x200004fc
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	e00c      	b.n	8004982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <prvInitialiseTaskLists+0x60>)
 8004974:	4413      	add	r3, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fcd2 	bl	8003320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3301      	adds	r3, #1
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d9ef      	bls.n	8004968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <prvInitialiseTaskLists+0x64>)
 800498a:	f7fe fcc9 	bl	8003320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800498e:	480d      	ldr	r0, [pc, #52]	; (80049c4 <prvInitialiseTaskLists+0x68>)
 8004990:	f7fe fcc6 	bl	8003320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004994:	480c      	ldr	r0, [pc, #48]	; (80049c8 <prvInitialiseTaskLists+0x6c>)
 8004996:	f7fe fcc3 	bl	8003320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800499a:	480c      	ldr	r0, [pc, #48]	; (80049cc <prvInitialiseTaskLists+0x70>)
 800499c:	f7fe fcc0 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049a0:	480b      	ldr	r0, [pc, #44]	; (80049d0 <prvInitialiseTaskLists+0x74>)
 80049a2:	f7fe fcbd 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <prvInitialiseTaskLists+0x78>)
 80049a8:	4a05      	ldr	r2, [pc, #20]	; (80049c0 <prvInitialiseTaskLists+0x64>)
 80049aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <prvInitialiseTaskLists+0x7c>)
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <prvInitialiseTaskLists+0x68>)
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200004fc 	.word	0x200004fc
 80049c0:	20000588 	.word	0x20000588
 80049c4:	2000059c 	.word	0x2000059c
 80049c8:	200005b8 	.word	0x200005b8
 80049cc:	200005cc 	.word	0x200005cc
 80049d0:	200005e4 	.word	0x200005e4
 80049d4:	200005b0 	.word	0x200005b0
 80049d8:	200005b4 	.word	0x200005b4

080049dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e2:	e019      	b.n	8004a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049e4:	f000 fa7a 	bl	8004edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <prvCheckTasksWaitingTermination+0x50>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fd19 	bl	800342c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049fa:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <prvCheckTasksWaitingTermination+0x54>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <prvCheckTasksWaitingTermination+0x54>)
 8004a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a0e:	f000 fa95 	bl	8004f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f810 	bl	8004a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <prvCheckTasksWaitingTermination+0x58>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e1      	bne.n	80049e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200005cc 	.word	0x200005cc
 8004a30:	200005f8 	.word	0x200005f8
 8004a34:	200005e0 	.word	0x200005e0

08004a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	334c      	adds	r3, #76	; 0x4c
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fba3 	bl	8006190 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d108      	bne.n	8004a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fc03 	bl	8005264 <vPortFree>
				vPortFree( pxTCB );
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fc00 	bl	8005264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a64:	e018      	b.n	8004a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d103      	bne.n	8004a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fbf7 	bl	8005264 <vPortFree>
	}
 8004a76:	e00f      	b.n	8004a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d00a      	beq.n	8004a98 <prvDeleteTCB+0x60>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
}
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <prvDeleteTCB+0x5e>
	}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <prvResetNextTaskUnblockTime+0x40>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <prvResetNextTaskUnblockTime+0x14>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <prvResetNextTaskUnblockTime+0x16>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <prvResetNextTaskUnblockTime+0x44>)
 8004abc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ac2:	e008      	b.n	8004ad6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <prvResetNextTaskUnblockTime+0x40>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <prvResetNextTaskUnblockTime+0x44>)
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	200005b0 	.word	0x200005b0
 8004ae4:	20000618 	.word	0x20000618

08004ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <xTaskGetSchedulerState+0x34>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004af6:	2301      	movs	r3, #1
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	e008      	b.n	8004b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <xTaskGetSchedulerState+0x38>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b04:	2302      	movs	r3, #2
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	e001      	b.n	8004b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b0e:	687b      	ldr	r3, [r7, #4]
	}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000604 	.word	0x20000604
 8004b20:	20000620 	.word	0x20000620

08004b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06e      	beq.n	8004c18 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b3a:	4b3a      	ldr	r3, [pc, #232]	; (8004c24 <xTaskPriorityDisinherit+0x100>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d00a      	beq.n	8004b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60bb      	str	r3, [r7, #8]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d044      	beq.n	8004c18 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d140      	bne.n	8004c18 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fc46 	bl	800342c <uxListRemove>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d115      	bne.n	8004bd2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	491f      	ldr	r1, [pc, #124]	; (8004c28 <xTaskPriorityDisinherit+0x104>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <xTaskPriorityDisinherit+0xae>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <xTaskPriorityDisinherit+0x108>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <xTaskPriorityDisinherit+0x108>)
 8004bd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f1c3 0207 	rsb	r2, r3, #7
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	2201      	movs	r2, #1
 8004bec:	409a      	lsls	r2, r3
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <xTaskPriorityDisinherit+0x108>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <xTaskPriorityDisinherit+0x108>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <xTaskPriorityDisinherit+0x104>)
 8004c06:	441a      	add	r2, r3
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f7fe fbb1 	bl	8003376 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c18:	697b      	ldr	r3, [r7, #20]
	}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200004f8 	.word	0x200004f8
 8004c28:	200004fc 	.word	0x200004fc
 8004c2c:	20000600 	.word	0x20000600

08004c30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c40:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fbf0 	bl	800342c <uxListRemove>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c52:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	2201      	movs	r2, #1
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4013      	ands	r3, r2
 8004c66:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d10a      	bne.n	8004c88 <prvAddCurrentTaskToDelayedList+0x58>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	481a      	ldr	r0, [pc, #104]	; (8004cec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c82:	f7fe fb78 	bl	8003376 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c86:	e026      	b.n	8004cd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c90:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d209      	bcs.n	8004cb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b0f      	ldr	r3, [pc, #60]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fe fb85 	bl	80033bc <vListInsert>
}
 8004cb2:	e010      	b.n	8004cd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fe fb7b 	bl	80033bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d202      	bcs.n	8004cd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cd0:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6013      	str	r3, [r2, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200005fc 	.word	0x200005fc
 8004ce4:	200004f8 	.word	0x200004f8
 8004ce8:	20000600 	.word	0x20000600
 8004cec:	200005e4 	.word	0x200005e4
 8004cf0:	200005b4 	.word	0x200005b4
 8004cf4:	200005b0 	.word	0x200005b0
 8004cf8:	20000618 	.word	0x20000618

08004cfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3b04      	subs	r3, #4
 8004d0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b04      	subs	r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d2c:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <pxPortInitialiseStack+0x54>)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b14      	subs	r3, #20
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b20      	subs	r3, #32
 8004d42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d44:	68fb      	ldr	r3, [r7, #12]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	08004d55 	.word	0x08004d55

08004d54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <prvTaskExitError+0x54>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d00a      	beq.n	8004d7e <prvTaskExitError+0x2a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <prvTaskExitError+0x28>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
}
 8004d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d92:	bf00      	nop
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0fc      	beq.n	8004d94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	00000000 	.word	0x00000000

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dce:	4770      	bx	lr

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	200004f8 	.word	0x200004f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <prvPortStartFirstTask+0x1c>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	b662      	cpsie	i
 8004de4:	b661      	cpsie	f
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	df00      	svc	0
 8004df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004df2:	bf00      	nop
 8004df4:	e000ed08 	.word	0xe000ed08

08004df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <xPortStartScheduler+0xd0>)
 8004e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <xPortStartScheduler+0xd4>)
 8004e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e28:	2207      	movs	r2, #7
 8004e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e2c:	e009      	b.n	8004e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d0ef      	beq.n	8004e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e4e:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00a      	beq.n	8004e70 <xPortStartScheduler+0x78>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60bb      	str	r3, [r7, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e70:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ea6:	f000 f8b9 	bl	800501c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <xPortStartScheduler+0xe0>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eb0:	f7ff ff92 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eb4:	f7ff fbce 	bl	8004654 <vTaskSwitchContext>
	prvTaskExitError();
 8004eb8:	f7ff ff4c 	bl	8004d54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	e000e400 	.word	0xe000e400
 8004ecc:	20000624 	.word	0x20000624
 8004ed0:	20000628 	.word	0x20000628
 8004ed4:	e000ed20 	.word	0xe000ed20
 8004ed8:	2000000c 	.word	0x2000000c

08004edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
}
 8004ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <vPortEnterCritical+0x58>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <vPortEnterCritical+0x58>)
 8004efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <vPortEnterCritical+0x58>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10f      	bne.n	8004f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <vPortEnterCritical+0x5c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vPortEnterCritical+0x4a>
	}
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000000c 	.word	0x2000000c
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <vPortExitCritical+0x24>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <vPortExitCritical+0x42>
 8004f72:	2300      	movs	r3, #0
 8004f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f383 8811 	msr	BASEPRI, r3
}
 8004f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	2000000c 	.word	0x2000000c
 8004f8c:	00000000 	.word	0x00000000

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fa0:	6010      	str	r0, [r2, #0]
 8004fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004faa:	f380 8811 	msr	BASEPRI, r0
 8004fae:	f7ff fb51 	bl	8004654 <vTaskSwitchContext>
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fc6:	f380 8809 	msr	PSP, r0
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	4770      	bx	lr

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	200004f8 	.word	0x200004f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f7ff fa71 	bl	80044d8 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <SysTick_Handler+0x40>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <vPortSetupTimerInterrupt+0x30>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <vPortSetupTimerInterrupt+0x38>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <vPortSetupTimerInterrupt+0x3c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <vPortSetupTimerInterrupt+0x40>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <vPortSetupTimerInterrupt+0x30>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	e000e010 	.word	0xe000e010
 8005050:	e000e018 	.word	0xe000e018
 8005054:	20000000 	.word	0x20000000
 8005058:	10624dd3 	.word	0x10624dd3
 800505c:	e000e014 	.word	0xe000e014

08005060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005066:	f3ef 8305 	mrs	r3, IPSR
 800506a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d914      	bls.n	800509c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <vPortValidateInterruptPriority+0x6c>)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <vPortValidateInterruptPriority+0x70>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	7afa      	ldrb	r2, [r7, #11]
 8005082:	429a      	cmp	r2, r3
 8005084:	d20a      	bcs.n	800509c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	607b      	str	r3, [r7, #4]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <vPortValidateInterruptPriority+0x74>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <vPortValidateInterruptPriority+0x78>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d90a      	bls.n	80050c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	603b      	str	r3, [r7, #0]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <vPortValidateInterruptPriority+0x60>
	}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	e000e3f0 	.word	0xe000e3f0
 80050d0:	20000624 	.word	0x20000624
 80050d4:	e000ed0c 	.word	0xe000ed0c
 80050d8:	20000628 	.word	0x20000628

080050dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050e8:	f7ff f94c 	bl	8004384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050ec:	4b58      	ldr	r3, [pc, #352]	; (8005250 <pvPortMalloc+0x174>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050f4:	f000 f910 	bl	8005318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050f8:	4b56      	ldr	r3, [pc, #344]	; (8005254 <pvPortMalloc+0x178>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 808e 	bne.w	8005222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01d      	beq.n	8005148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800510c:	2208      	movs	r2, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f023 0307 	bic.w	r3, r3, #7
 8005124:	3308      	adds	r3, #8
 8005126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <pvPortMalloc+0x6c>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	617b      	str	r3, [r7, #20]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d069      	beq.n	8005222 <pvPortMalloc+0x146>
 800514e:	4b42      	ldr	r3, [pc, #264]	; (8005258 <pvPortMalloc+0x17c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d864      	bhi.n	8005222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005158:	4b40      	ldr	r3, [pc, #256]	; (800525c <pvPortMalloc+0x180>)
 800515a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800515c:	4b3f      	ldr	r3, [pc, #252]	; (800525c <pvPortMalloc+0x180>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005162:	e004      	b.n	800516e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d903      	bls.n	8005180 <pvPortMalloc+0xa4>
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f1      	bne.n	8005164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005180:	4b33      	ldr	r3, [pc, #204]	; (8005250 <pvPortMalloc+0x174>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	429a      	cmp	r2, r3
 8005188:	d04b      	beq.n	8005222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2208      	movs	r2, #8
 8005190:	4413      	add	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	2308      	movs	r3, #8
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d91f      	bls.n	80051ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <pvPortMalloc+0xf8>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	613b      	str	r3, [r7, #16]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051e6:	69b8      	ldr	r0, [r7, #24]
 80051e8:	f000 f8f8 	bl	80053dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <pvPortMalloc+0x17c>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <pvPortMalloc+0x17c>)
 80051f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051fa:	4b17      	ldr	r3, [pc, #92]	; (8005258 <pvPortMalloc+0x17c>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <pvPortMalloc+0x184>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d203      	bcs.n	800520e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <pvPortMalloc+0x17c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <pvPortMalloc+0x184>)
 800520c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <pvPortMalloc+0x178>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	431a      	orrs	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005222:	f7ff f8bd 	bl	80043a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <pvPortMalloc+0x16a>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <pvPortMalloc+0x168>
	return pvReturn;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20002a34 	.word	0x20002a34
 8005254:	20002a40 	.word	0x20002a40
 8005258:	20002a38 	.word	0x20002a38
 800525c:	20002a2c 	.word	0x20002a2c
 8005260:	20002a3c 	.word	0x20002a3c

08005264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d048      	beq.n	8005308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005276:	2308      	movs	r3, #8
 8005278:	425b      	negs	r3, r3
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <vPortFree+0xac>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <vPortFree+0x44>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <vPortFree+0x62>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60bb      	str	r3, [r7, #8]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <vPortFree+0xac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d019      	beq.n	8005308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d115      	bne.n	8005308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortFree+0xac>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052ec:	f7ff f84a 	bl	8004384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b07      	ldr	r3, [pc, #28]	; (8005314 <vPortFree+0xb0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	4a06      	ldr	r2, [pc, #24]	; (8005314 <vPortFree+0xb0>)
 80052fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f000 f86c 	bl	80053dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005304:	f7ff f84c 	bl	80043a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005308:	bf00      	nop
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20002a40 	.word	0x20002a40
 8005314:	20002a38 	.word	0x20002a38

08005318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800531e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005324:	4b27      	ldr	r3, [pc, #156]	; (80053c4 <prvHeapInit+0xac>)
 8005326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3307      	adds	r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0307 	bic.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <prvHeapInit+0xac>)
 8005348:	4413      	add	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <prvHeapInit+0xb0>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005356:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <prvHeapInit+0xb0>)
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005364:	2208      	movs	r2, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <prvHeapInit+0xb4>)
 8005378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <prvHeapInit+0xb4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <prvHeapInit+0xb4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <prvHeapInit+0xb4>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <prvHeapInit+0xb8>)
 80053a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <prvHeapInit+0xbc>)
 80053ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <prvHeapInit+0xc0>)
 80053b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053b6:	601a      	str	r2, [r3, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	2000062c 	.word	0x2000062c
 80053c8:	20002a2c 	.word	0x20002a2c
 80053cc:	20002a34 	.word	0x20002a34
 80053d0:	20002a3c 	.word	0x20002a3c
 80053d4:	20002a38 	.word	0x20002a38
 80053d8:	20002a40 	.word	0x20002a40

080053dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e4:	4b27      	ldr	r3, [pc, #156]	; (8005484 <prvInsertBlockIntoFreeList+0xa8>)
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e002      	b.n	80053f0 <prvInsertBlockIntoFreeList+0x14>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d8f7      	bhi.n	80053ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4413      	add	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d108      	bne.n	800541e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	441a      	add	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d118      	bne.n	8005464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b14      	ldr	r3, [pc, #80]	; (8005488 <prvInsertBlockIntoFreeList+0xac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d00d      	beq.n	800545a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	441a      	add	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e008      	b.n	800546c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <prvInsertBlockIntoFreeList+0xac>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e003      	b.n	800546c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d002      	beq.n	800547a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20002a2c 	.word	0x20002a2c
 8005488:	20002a34 	.word	0x20002a34

0800548c <__cvt>:
 800548c:	2b00      	cmp	r3, #0
 800548e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005492:	461f      	mov	r7, r3
 8005494:	bfbb      	ittet	lt
 8005496:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800549a:	461f      	movlt	r7, r3
 800549c:	2300      	movge	r3, #0
 800549e:	232d      	movlt	r3, #45	; 0x2d
 80054a0:	b088      	sub	sp, #32
 80054a2:	4614      	mov	r4, r2
 80054a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054a8:	7013      	strb	r3, [r2, #0]
 80054aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80054b0:	f023 0820 	bic.w	r8, r3, #32
 80054b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054b8:	d005      	beq.n	80054c6 <__cvt+0x3a>
 80054ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054be:	d100      	bne.n	80054c2 <__cvt+0x36>
 80054c0:	3501      	adds	r5, #1
 80054c2:	2302      	movs	r3, #2
 80054c4:	e000      	b.n	80054c8 <__cvt+0x3c>
 80054c6:	2303      	movs	r3, #3
 80054c8:	aa07      	add	r2, sp, #28
 80054ca:	9204      	str	r2, [sp, #16]
 80054cc:	aa06      	add	r2, sp, #24
 80054ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054d2:	e9cd 3500 	strd	r3, r5, [sp]
 80054d6:	4622      	mov	r2, r4
 80054d8:	463b      	mov	r3, r7
 80054da:	f000 ffb9 	bl	8006450 <_dtoa_r>
 80054de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054e2:	4606      	mov	r6, r0
 80054e4:	d102      	bne.n	80054ec <__cvt+0x60>
 80054e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054e8:	07db      	lsls	r3, r3, #31
 80054ea:	d522      	bpl.n	8005532 <__cvt+0xa6>
 80054ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054f0:	eb06 0905 	add.w	r9, r6, r5
 80054f4:	d110      	bne.n	8005518 <__cvt+0x8c>
 80054f6:	7833      	ldrb	r3, [r6, #0]
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d10a      	bne.n	8005512 <__cvt+0x86>
 80054fc:	2200      	movs	r2, #0
 80054fe:	2300      	movs	r3, #0
 8005500:	4620      	mov	r0, r4
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8005508:	b918      	cbnz	r0, 8005512 <__cvt+0x86>
 800550a:	f1c5 0501 	rsb	r5, r5, #1
 800550e:	f8ca 5000 	str.w	r5, [sl]
 8005512:	f8da 3000 	ldr.w	r3, [sl]
 8005516:	4499      	add	r9, r3
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	4620      	mov	r0, r4
 800551e:	4639      	mov	r1, r7
 8005520:	f7fb fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8005524:	b108      	cbz	r0, 800552a <__cvt+0x9e>
 8005526:	f8cd 901c 	str.w	r9, [sp, #28]
 800552a:	2230      	movs	r2, #48	; 0x30
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	454b      	cmp	r3, r9
 8005530:	d307      	bcc.n	8005542 <__cvt+0xb6>
 8005532:	4630      	mov	r0, r6
 8005534:	9b07      	ldr	r3, [sp, #28]
 8005536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005538:	1b9b      	subs	r3, r3, r6
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	b008      	add	sp, #32
 800553e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	9107      	str	r1, [sp, #28]
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e7f0      	b.n	800552c <__cvt+0xa0>

0800554a <__exponent>:
 800554a:	4603      	mov	r3, r0
 800554c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800554e:	2900      	cmp	r1, #0
 8005550:	f803 2b02 	strb.w	r2, [r3], #2
 8005554:	bfb6      	itet	lt
 8005556:	222d      	movlt	r2, #45	; 0x2d
 8005558:	222b      	movge	r2, #43	; 0x2b
 800555a:	4249      	neglt	r1, r1
 800555c:	2909      	cmp	r1, #9
 800555e:	7042      	strb	r2, [r0, #1]
 8005560:	dd2a      	ble.n	80055b8 <__exponent+0x6e>
 8005562:	f10d 0207 	add.w	r2, sp, #7
 8005566:	4617      	mov	r7, r2
 8005568:	260a      	movs	r6, #10
 800556a:	fb91 f5f6 	sdiv	r5, r1, r6
 800556e:	4694      	mov	ip, r2
 8005570:	fb06 1415 	mls	r4, r6, r5, r1
 8005574:	3430      	adds	r4, #48	; 0x30
 8005576:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800557a:	460c      	mov	r4, r1
 800557c:	2c63      	cmp	r4, #99	; 0x63
 800557e:	4629      	mov	r1, r5
 8005580:	f102 32ff 	add.w	r2, r2, #4294967295
 8005584:	dcf1      	bgt.n	800556a <__exponent+0x20>
 8005586:	3130      	adds	r1, #48	; 0x30
 8005588:	f1ac 0402 	sub.w	r4, ip, #2
 800558c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005590:	4622      	mov	r2, r4
 8005592:	1c41      	adds	r1, r0, #1
 8005594:	42ba      	cmp	r2, r7
 8005596:	d30a      	bcc.n	80055ae <__exponent+0x64>
 8005598:	f10d 0209 	add.w	r2, sp, #9
 800559c:	eba2 020c 	sub.w	r2, r2, ip
 80055a0:	42bc      	cmp	r4, r7
 80055a2:	bf88      	it	hi
 80055a4:	2200      	movhi	r2, #0
 80055a6:	4413      	add	r3, r2
 80055a8:	1a18      	subs	r0, r3, r0
 80055aa:	b003      	add	sp, #12
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80055b6:	e7ed      	b.n	8005594 <__exponent+0x4a>
 80055b8:	2330      	movs	r3, #48	; 0x30
 80055ba:	3130      	adds	r1, #48	; 0x30
 80055bc:	7083      	strb	r3, [r0, #2]
 80055be:	70c1      	strb	r1, [r0, #3]
 80055c0:	1d03      	adds	r3, r0, #4
 80055c2:	e7f1      	b.n	80055a8 <__exponent+0x5e>

080055c4 <_printf_float>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	b091      	sub	sp, #68	; 0x44
 80055ca:	460c      	mov	r4, r1
 80055cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80055d0:	4616      	mov	r6, r2
 80055d2:	461f      	mov	r7, r3
 80055d4:	4605      	mov	r5, r0
 80055d6:	f000 fdc7 	bl	8006168 <_localeconv_r>
 80055da:	6803      	ldr	r3, [r0, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	9309      	str	r3, [sp, #36]	; 0x24
 80055e0:	f7fa fdb6 	bl	8000150 <strlen>
 80055e4:	2300      	movs	r3, #0
 80055e6:	930e      	str	r3, [sp, #56]	; 0x38
 80055e8:	f8d8 3000 	ldr.w	r3, [r8]
 80055ec:	900a      	str	r0, [sp, #40]	; 0x28
 80055ee:	3307      	adds	r3, #7
 80055f0:	f023 0307 	bic.w	r3, r3, #7
 80055f4:	f103 0208 	add.w	r2, r3, #8
 80055f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80055fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005600:	f8c8 2000 	str.w	r2, [r8]
 8005604:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005608:	4652      	mov	r2, sl
 800560a:	4643      	mov	r3, r8
 800560c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005610:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005614:	930b      	str	r3, [sp, #44]	; 0x2c
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	4650      	mov	r0, sl
 800561c:	4b9c      	ldr	r3, [pc, #624]	; (8005890 <_printf_float+0x2cc>)
 800561e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005620:	f7fb f9f4 	bl	8000a0c <__aeabi_dcmpun>
 8005624:	bb70      	cbnz	r0, 8005684 <_printf_float+0xc0>
 8005626:	f04f 32ff 	mov.w	r2, #4294967295
 800562a:	4650      	mov	r0, sl
 800562c:	4b98      	ldr	r3, [pc, #608]	; (8005890 <_printf_float+0x2cc>)
 800562e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005630:	f7fb f9ce 	bl	80009d0 <__aeabi_dcmple>
 8005634:	bb30      	cbnz	r0, 8005684 <_printf_float+0xc0>
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	4650      	mov	r0, sl
 800563c:	4641      	mov	r1, r8
 800563e:	f7fb f9bd 	bl	80009bc <__aeabi_dcmplt>
 8005642:	b110      	cbz	r0, 800564a <_printf_float+0x86>
 8005644:	232d      	movs	r3, #45	; 0x2d
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564a:	4a92      	ldr	r2, [pc, #584]	; (8005894 <_printf_float+0x2d0>)
 800564c:	4b92      	ldr	r3, [pc, #584]	; (8005898 <_printf_float+0x2d4>)
 800564e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005652:	bf94      	ite	ls
 8005654:	4690      	movls	r8, r2
 8005656:	4698      	movhi	r8, r3
 8005658:	2303      	movs	r3, #3
 800565a:	f04f 0a00 	mov.w	sl, #0
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	f02b 0304 	bic.w	r3, fp, #4
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	4633      	mov	r3, r6
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	9700      	str	r7, [sp, #0]
 800566e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005670:	f000 f9d6 	bl	8005a20 <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	f040 8090 	bne.w	800579a <_printf_float+0x1d6>
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	b011      	add	sp, #68	; 0x44
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4652      	mov	r2, sl
 8005686:	4643      	mov	r3, r8
 8005688:	4650      	mov	r0, sl
 800568a:	4641      	mov	r1, r8
 800568c:	f7fb f9be 	bl	8000a0c <__aeabi_dcmpun>
 8005690:	b148      	cbz	r0, 80056a6 <_printf_float+0xe2>
 8005692:	f1b8 0f00 	cmp.w	r8, #0
 8005696:	bfb8      	it	lt
 8005698:	232d      	movlt	r3, #45	; 0x2d
 800569a:	4a80      	ldr	r2, [pc, #512]	; (800589c <_printf_float+0x2d8>)
 800569c:	bfb8      	it	lt
 800569e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056a2:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <_printf_float+0x2dc>)
 80056a4:	e7d3      	b.n	800564e <_printf_float+0x8a>
 80056a6:	6863      	ldr	r3, [r4, #4]
 80056a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	d142      	bne.n	8005736 <_printf_float+0x172>
 80056b0:	2306      	movs	r3, #6
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	9206      	str	r2, [sp, #24]
 80056b8:	aa0e      	add	r2, sp, #56	; 0x38
 80056ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80056be:	aa0d      	add	r2, sp, #52	; 0x34
 80056c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80056c4:	9203      	str	r2, [sp, #12]
 80056c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80056ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	6863      	ldr	r3, [r4, #4]
 80056d2:	4652      	mov	r2, sl
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4628      	mov	r0, r5
 80056d8:	4643      	mov	r3, r8
 80056da:	910b      	str	r1, [sp, #44]	; 0x2c
 80056dc:	f7ff fed6 	bl	800548c <__cvt>
 80056e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056e2:	4680      	mov	r8, r0
 80056e4:	2947      	cmp	r1, #71	; 0x47
 80056e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056e8:	d108      	bne.n	80056fc <_printf_float+0x138>
 80056ea:	1cc8      	adds	r0, r1, #3
 80056ec:	db02      	blt.n	80056f4 <_printf_float+0x130>
 80056ee:	6863      	ldr	r3, [r4, #4]
 80056f0:	4299      	cmp	r1, r3
 80056f2:	dd40      	ble.n	8005776 <_printf_float+0x1b2>
 80056f4:	f1a9 0902 	sub.w	r9, r9, #2
 80056f8:	fa5f f989 	uxtb.w	r9, r9
 80056fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005700:	d81f      	bhi.n	8005742 <_printf_float+0x17e>
 8005702:	464a      	mov	r2, r9
 8005704:	3901      	subs	r1, #1
 8005706:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800570a:	910d      	str	r1, [sp, #52]	; 0x34
 800570c:	f7ff ff1d 	bl	800554a <__exponent>
 8005710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005712:	4682      	mov	sl, r0
 8005714:	1813      	adds	r3, r2, r0
 8005716:	2a01      	cmp	r2, #1
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	dc02      	bgt.n	8005722 <_printf_float+0x15e>
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	07d2      	lsls	r2, r2, #31
 8005720:	d501      	bpl.n	8005726 <_printf_float+0x162>
 8005722:	3301      	adds	r3, #1
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800572a:	2b00      	cmp	r3, #0
 800572c:	d09b      	beq.n	8005666 <_printf_float+0xa2>
 800572e:	232d      	movs	r3, #45	; 0x2d
 8005730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005734:	e797      	b.n	8005666 <_printf_float+0xa2>
 8005736:	2947      	cmp	r1, #71	; 0x47
 8005738:	d1bc      	bne.n	80056b4 <_printf_float+0xf0>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ba      	bne.n	80056b4 <_printf_float+0xf0>
 800573e:	2301      	movs	r3, #1
 8005740:	e7b7      	b.n	80056b2 <_printf_float+0xee>
 8005742:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005746:	d118      	bne.n	800577a <_printf_float+0x1b6>
 8005748:	2900      	cmp	r1, #0
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	dd0b      	ble.n	8005766 <_printf_float+0x1a2>
 800574e:	6121      	str	r1, [r4, #16]
 8005750:	b913      	cbnz	r3, 8005758 <_printf_float+0x194>
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	07d0      	lsls	r0, r2, #31
 8005756:	d502      	bpl.n	800575e <_printf_float+0x19a>
 8005758:	3301      	adds	r3, #1
 800575a:	440b      	add	r3, r1
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	f04f 0a00 	mov.w	sl, #0
 8005762:	65a1      	str	r1, [r4, #88]	; 0x58
 8005764:	e7df      	b.n	8005726 <_printf_float+0x162>
 8005766:	b913      	cbnz	r3, 800576e <_printf_float+0x1aa>
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	07d2      	lsls	r2, r2, #31
 800576c:	d501      	bpl.n	8005772 <_printf_float+0x1ae>
 800576e:	3302      	adds	r3, #2
 8005770:	e7f4      	b.n	800575c <_printf_float+0x198>
 8005772:	2301      	movs	r3, #1
 8005774:	e7f2      	b.n	800575c <_printf_float+0x198>
 8005776:	f04f 0967 	mov.w	r9, #103	; 0x67
 800577a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800577c:	4299      	cmp	r1, r3
 800577e:	db05      	blt.n	800578c <_printf_float+0x1c8>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	6121      	str	r1, [r4, #16]
 8005784:	07d8      	lsls	r0, r3, #31
 8005786:	d5ea      	bpl.n	800575e <_printf_float+0x19a>
 8005788:	1c4b      	adds	r3, r1, #1
 800578a:	e7e7      	b.n	800575c <_printf_float+0x198>
 800578c:	2900      	cmp	r1, #0
 800578e:	bfcc      	ite	gt
 8005790:	2201      	movgt	r2, #1
 8005792:	f1c1 0202 	rsble	r2, r1, #2
 8005796:	4413      	add	r3, r2
 8005798:	e7e0      	b.n	800575c <_printf_float+0x198>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	055a      	lsls	r2, r3, #21
 800579e:	d407      	bmi.n	80057b0 <_printf_float+0x1ec>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	4642      	mov	r2, r8
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	d12b      	bne.n	8005806 <_printf_float+0x242>
 80057ae:	e764      	b.n	800567a <_printf_float+0xb6>
 80057b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057b4:	f240 80dd 	bls.w	8005972 <_printf_float+0x3ae>
 80057b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	f7fb f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d033      	beq.n	8005830 <_printf_float+0x26c>
 80057c8:	2301      	movs	r3, #1
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <_printf_float+0x2e0>)
 80057d0:	47b8      	blx	r7
 80057d2:	3001      	adds	r0, #1
 80057d4:	f43f af51 	beq.w	800567a <_printf_float+0xb6>
 80057d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057dc:	429a      	cmp	r2, r3
 80057de:	db02      	blt.n	80057e6 <_printf_float+0x222>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07d8      	lsls	r0, r3, #31
 80057e4:	d50f      	bpl.n	8005806 <_printf_float+0x242>
 80057e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	f43f af42 	beq.w	800567a <_printf_float+0xb6>
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	f104 091a 	add.w	r9, r4, #26
 80057fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005800:	3b01      	subs	r3, #1
 8005802:	4543      	cmp	r3, r8
 8005804:	dc09      	bgt.n	800581a <_printf_float+0x256>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	079b      	lsls	r3, r3, #30
 800580a:	f100 8104 	bmi.w	8005a16 <_printf_float+0x452>
 800580e:	68e0      	ldr	r0, [r4, #12]
 8005810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005812:	4298      	cmp	r0, r3
 8005814:	bfb8      	it	lt
 8005816:	4618      	movlt	r0, r3
 8005818:	e731      	b.n	800567e <_printf_float+0xba>
 800581a:	2301      	movs	r3, #1
 800581c:	464a      	mov	r2, r9
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f af28 	beq.w	800567a <_printf_float+0xb6>
 800582a:	f108 0801 	add.w	r8, r8, #1
 800582e:	e7e6      	b.n	80057fe <_printf_float+0x23a>
 8005830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc38      	bgt.n	80058a8 <_printf_float+0x2e4>
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <_printf_float+0x2e0>)
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f af1a 	beq.w	800567a <_printf_float+0xb6>
 8005846:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800584a:	4313      	orrs	r3, r2
 800584c:	d102      	bne.n	8005854 <_printf_float+0x290>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	07d9      	lsls	r1, r3, #31
 8005852:	d5d8      	bpl.n	8005806 <_printf_float+0x242>
 8005854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af0b 	beq.w	800567a <_printf_float+0xb6>
 8005864:	f04f 0900 	mov.w	r9, #0
 8005868:	f104 0a1a 	add.w	sl, r4, #26
 800586c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800586e:	425b      	negs	r3, r3
 8005870:	454b      	cmp	r3, r9
 8005872:	dc01      	bgt.n	8005878 <_printf_float+0x2b4>
 8005874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005876:	e794      	b.n	80057a2 <_printf_float+0x1de>
 8005878:	2301      	movs	r3, #1
 800587a:	4652      	mov	r2, sl
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f aef9 	beq.w	800567a <_printf_float+0xb6>
 8005888:	f109 0901 	add.w	r9, r9, #1
 800588c:	e7ee      	b.n	800586c <_printf_float+0x2a8>
 800588e:	bf00      	nop
 8005890:	7fefffff 	.word	0x7fefffff
 8005894:	0800823e 	.word	0x0800823e
 8005898:	08008242 	.word	0x08008242
 800589c:	08008246 	.word	0x08008246
 80058a0:	0800824a 	.word	0x0800824a
 80058a4:	0800824e 	.word	0x0800824e
 80058a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bfa8      	it	ge
 80058b0:	461a      	movge	r2, r3
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	4691      	mov	r9, r2
 80058b6:	dc37      	bgt.n	8005928 <_printf_float+0x364>
 80058b8:	f04f 0b00 	mov.w	fp, #0
 80058bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c0:	f104 021a 	add.w	r2, r4, #26
 80058c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80058c8:	ebaa 0309 	sub.w	r3, sl, r9
 80058cc:	455b      	cmp	r3, fp
 80058ce:	dc33      	bgt.n	8005938 <_printf_float+0x374>
 80058d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058d4:	429a      	cmp	r2, r3
 80058d6:	db3b      	blt.n	8005950 <_printf_float+0x38c>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d438      	bmi.n	8005950 <_printf_float+0x38c>
 80058de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80058e2:	eba2 0903 	sub.w	r9, r2, r3
 80058e6:	eba2 020a 	sub.w	r2, r2, sl
 80058ea:	4591      	cmp	r9, r2
 80058ec:	bfa8      	it	ge
 80058ee:	4691      	movge	r9, r2
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	dc34      	bgt.n	8005960 <_printf_float+0x39c>
 80058f6:	f04f 0800 	mov.w	r8, #0
 80058fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fe:	f104 0a1a 	add.w	sl, r4, #26
 8005902:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	eba3 0309 	sub.w	r3, r3, r9
 800590c:	4543      	cmp	r3, r8
 800590e:	f77f af7a 	ble.w	8005806 <_printf_float+0x242>
 8005912:	2301      	movs	r3, #1
 8005914:	4652      	mov	r2, sl
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f aeac 	beq.w	800567a <_printf_float+0xb6>
 8005922:	f108 0801 	add.w	r8, r8, #1
 8005926:	e7ec      	b.n	8005902 <_printf_float+0x33e>
 8005928:	4613      	mov	r3, r2
 800592a:	4631      	mov	r1, r6
 800592c:	4642      	mov	r2, r8
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d1c0      	bne.n	80058b8 <_printf_float+0x2f4>
 8005936:	e6a0      	b.n	800567a <_printf_float+0xb6>
 8005938:	2301      	movs	r3, #1
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae99 	beq.w	800567a <_printf_float+0xb6>
 8005948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800594a:	f10b 0b01 	add.w	fp, fp, #1
 800594e:	e7b9      	b.n	80058c4 <_printf_float+0x300>
 8005950:	4631      	mov	r1, r6
 8005952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	d1bf      	bne.n	80058de <_printf_float+0x31a>
 800595e:	e68c      	b.n	800567a <_printf_float+0xb6>
 8005960:	464b      	mov	r3, r9
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	eb08 020a 	add.w	r2, r8, sl
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	d1c2      	bne.n	80058f6 <_printf_float+0x332>
 8005970:	e683      	b.n	800567a <_printf_float+0xb6>
 8005972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005974:	2a01      	cmp	r2, #1
 8005976:	dc01      	bgt.n	800597c <_printf_float+0x3b8>
 8005978:	07db      	lsls	r3, r3, #31
 800597a:	d539      	bpl.n	80059f0 <_printf_float+0x42c>
 800597c:	2301      	movs	r3, #1
 800597e:	4642      	mov	r2, r8
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f ae77 	beq.w	800567a <_printf_float+0xb6>
 800598c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae6f 	beq.w	800567a <_printf_float+0xb6>
 800599c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80059a8:	f7fa fffe 	bl	80009a8 <__aeabi_dcmpeq>
 80059ac:	b9d8      	cbnz	r0, 80059e6 <_printf_float+0x422>
 80059ae:	f109 33ff 	add.w	r3, r9, #4294967295
 80059b2:	f108 0201 	add.w	r2, r8, #1
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d10e      	bne.n	80059de <_printf_float+0x41a>
 80059c0:	e65b      	b.n	800567a <_printf_float+0xb6>
 80059c2:	2301      	movs	r3, #1
 80059c4:	464a      	mov	r2, r9
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae54 	beq.w	800567a <_printf_float+0xb6>
 80059d2:	f108 0801 	add.w	r8, r8, #1
 80059d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d8:	3b01      	subs	r3, #1
 80059da:	4543      	cmp	r3, r8
 80059dc:	dcf1      	bgt.n	80059c2 <_printf_float+0x3fe>
 80059de:	4653      	mov	r3, sl
 80059e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059e4:	e6de      	b.n	80057a4 <_printf_float+0x1e0>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	f104 091a 	add.w	r9, r4, #26
 80059ee:	e7f2      	b.n	80059d6 <_printf_float+0x412>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4642      	mov	r2, r8
 80059f4:	e7df      	b.n	80059b6 <_printf_float+0x3f2>
 80059f6:	2301      	movs	r3, #1
 80059f8:	464a      	mov	r2, r9
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae3a 	beq.w	800567a <_printf_float+0xb6>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a0e:	1a5b      	subs	r3, r3, r1
 8005a10:	4543      	cmp	r3, r8
 8005a12:	dcf0      	bgt.n	80059f6 <_printf_float+0x432>
 8005a14:	e6fb      	b.n	800580e <_printf_float+0x24a>
 8005a16:	f04f 0800 	mov.w	r8, #0
 8005a1a:	f104 0919 	add.w	r9, r4, #25
 8005a1e:	e7f4      	b.n	8005a0a <_printf_float+0x446>

08005a20 <_printf_common>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	690b      	ldr	r3, [r1, #16]
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bfb8      	it	lt
 8005a32:	4613      	movlt	r3, r2
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a40:	b10a      	cbz	r2, 8005a46 <_printf_common+0x26>
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	6833      	ldrmi	r3, [r6, #0]
 8005a4e:	3302      	addmi	r3, #2
 8005a50:	6033      	strmi	r3, [r6, #0]
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	f015 0506 	ands.w	r5, r5, #6
 8005a58:	d106      	bne.n	8005a68 <_printf_common+0x48>
 8005a5a:	f104 0a19 	add.w	sl, r4, #25
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dc2b      	bgt.n	8005ac0 <_printf_common+0xa0>
 8005a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a6c:	1e13      	subs	r3, r2, #0
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	0692      	lsls	r2, r2, #26
 8005a76:	d430      	bmi.n	8005ada <_printf_common+0xba>
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d023      	beq.n	8005ace <_printf_common+0xae>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	6922      	ldr	r2, [r4, #16]
 8005a8a:	f003 0306 	and.w	r3, r3, #6
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	bf14      	ite	ne
 8005a92:	2500      	movne	r5, #0
 8005a94:	6833      	ldreq	r3, [r6, #0]
 8005a96:	f04f 0600 	mov.w	r6, #0
 8005a9a:	bf08      	it	eq
 8005a9c:	68e5      	ldreq	r5, [r4, #12]
 8005a9e:	f104 041a 	add.w	r4, r4, #26
 8005aa2:	bf08      	it	eq
 8005aa4:	1aed      	subeq	r5, r5, r3
 8005aa6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005aaa:	bf08      	it	eq
 8005aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	bfc4      	itt	gt
 8005ab4:	1a9b      	subgt	r3, r3, r2
 8005ab6:	18ed      	addgt	r5, r5, r3
 8005ab8:	42b5      	cmp	r5, r6
 8005aba:	d11a      	bne.n	8005af2 <_printf_common+0xd2>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e008      	b.n	8005ad2 <_printf_common+0xb2>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c0      	blx	r8
 8005aca:	3001      	adds	r0, #1
 8005acc:	d103      	bne.n	8005ad6 <_printf_common+0xb6>
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	e7c1      	b.n	8005a5e <_printf_common+0x3e>
 8005ada:	2030      	movs	r0, #48	; 0x30
 8005adc:	18e1      	adds	r1, r4, r3
 8005ade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae8:	4422      	add	r2, r4
 8005aea:	3302      	adds	r3, #2
 8005aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005af0:	e7c2      	b.n	8005a78 <_printf_common+0x58>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4622      	mov	r2, r4
 8005af6:	4649      	mov	r1, r9
 8005af8:	4638      	mov	r0, r7
 8005afa:	47c0      	blx	r8
 8005afc:	3001      	adds	r0, #1
 8005afe:	d0e6      	beq.n	8005ace <_printf_common+0xae>
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7d9      	b.n	8005ab8 <_printf_common+0x98>

08005b04 <_printf_i>:
 8005b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	7e0f      	ldrb	r7, [r1, #24]
 8005b0a:	4691      	mov	r9, r2
 8005b0c:	2f78      	cmp	r7, #120	; 0x78
 8005b0e:	4680      	mov	r8, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	469a      	mov	sl, r3
 8005b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b1a:	d807      	bhi.n	8005b2c <_printf_i+0x28>
 8005b1c:	2f62      	cmp	r7, #98	; 0x62
 8005b1e:	d80a      	bhi.n	8005b36 <_printf_i+0x32>
 8005b20:	2f00      	cmp	r7, #0
 8005b22:	f000 80d5 	beq.w	8005cd0 <_printf_i+0x1cc>
 8005b26:	2f58      	cmp	r7, #88	; 0x58
 8005b28:	f000 80c1 	beq.w	8005cae <_printf_i+0x1aa>
 8005b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b34:	e03a      	b.n	8005bac <_printf_i+0xa8>
 8005b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b3a:	2b15      	cmp	r3, #21
 8005b3c:	d8f6      	bhi.n	8005b2c <_printf_i+0x28>
 8005b3e:	a101      	add	r1, pc, #4	; (adr r1, 8005b44 <_printf_i+0x40>)
 8005b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005b2d 	.word	0x08005b2d
 8005b50:	08005b2d 	.word	0x08005b2d
 8005b54:	08005b2d 	.word	0x08005b2d
 8005b58:	08005b2d 	.word	0x08005b2d
 8005b5c:	08005bb1 	.word	0x08005bb1
 8005b60:	08005b2d 	.word	0x08005b2d
 8005b64:	08005b2d 	.word	0x08005b2d
 8005b68:	08005b2d 	.word	0x08005b2d
 8005b6c:	08005b2d 	.word	0x08005b2d
 8005b70:	08005cb7 	.word	0x08005cb7
 8005b74:	08005bdd 	.word	0x08005bdd
 8005b78:	08005c71 	.word	0x08005c71
 8005b7c:	08005b2d 	.word	0x08005b2d
 8005b80:	08005b2d 	.word	0x08005b2d
 8005b84:	08005cd9 	.word	0x08005cd9
 8005b88:	08005b2d 	.word	0x08005b2d
 8005b8c:	08005bdd 	.word	0x08005bdd
 8005b90:	08005b2d 	.word	0x08005b2d
 8005b94:	08005b2d 	.word	0x08005b2d
 8005b98:	08005c79 	.word	0x08005c79
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	602a      	str	r2, [r5, #0]
 8005ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0a0      	b.n	8005cf2 <_printf_i+0x1ee>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	682b      	ldr	r3, [r5, #0]
 8005bb4:	0607      	lsls	r7, r0, #24
 8005bb6:	f103 0104 	add.w	r1, r3, #4
 8005bba:	6029      	str	r1, [r5, #0]
 8005bbc:	d501      	bpl.n	8005bc2 <_printf_i+0xbe>
 8005bbe:	681e      	ldr	r6, [r3, #0]
 8005bc0:	e003      	b.n	8005bca <_printf_i+0xc6>
 8005bc2:	0646      	lsls	r6, r0, #25
 8005bc4:	d5fb      	bpl.n	8005bbe <_printf_i+0xba>
 8005bc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	da03      	bge.n	8005bd6 <_printf_i+0xd2>
 8005bce:	232d      	movs	r3, #45	; 0x2d
 8005bd0:	4276      	negs	r6, r6
 8005bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd6:	230a      	movs	r3, #10
 8005bd8:	4859      	ldr	r0, [pc, #356]	; (8005d40 <_printf_i+0x23c>)
 8005bda:	e012      	b.n	8005c02 <_printf_i+0xfe>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	6820      	ldr	r0, [r4, #0]
 8005be0:	1d19      	adds	r1, r3, #4
 8005be2:	6029      	str	r1, [r5, #0]
 8005be4:	0605      	lsls	r5, r0, #24
 8005be6:	d501      	bpl.n	8005bec <_printf_i+0xe8>
 8005be8:	681e      	ldr	r6, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <_printf_i+0xee>
 8005bec:	0641      	lsls	r1, r0, #25
 8005bee:	d5fb      	bpl.n	8005be8 <_printf_i+0xe4>
 8005bf0:	881e      	ldrh	r6, [r3, #0]
 8005bf2:	2f6f      	cmp	r7, #111	; 0x6f
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2308      	moveq	r3, #8
 8005bf8:	230a      	movne	r3, #10
 8005bfa:	4851      	ldr	r0, [pc, #324]	; (8005d40 <_printf_i+0x23c>)
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c02:	6865      	ldr	r5, [r4, #4]
 8005c04:	2d00      	cmp	r5, #0
 8005c06:	bfa8      	it	ge
 8005c08:	6821      	ldrge	r1, [r4, #0]
 8005c0a:	60a5      	str	r5, [r4, #8]
 8005c0c:	bfa4      	itt	ge
 8005c0e:	f021 0104 	bicge.w	r1, r1, #4
 8005c12:	6021      	strge	r1, [r4, #0]
 8005c14:	b90e      	cbnz	r6, 8005c1a <_printf_i+0x116>
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	d04b      	beq.n	8005cb2 <_printf_i+0x1ae>
 8005c1a:	4615      	mov	r5, r2
 8005c1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c20:	fb03 6711 	mls	r7, r3, r1, r6
 8005c24:	5dc7      	ldrb	r7, [r0, r7]
 8005c26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c2a:	4637      	mov	r7, r6
 8005c2c:	42bb      	cmp	r3, r7
 8005c2e:	460e      	mov	r6, r1
 8005c30:	d9f4      	bls.n	8005c1c <_printf_i+0x118>
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d10b      	bne.n	8005c4e <_printf_i+0x14a>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	07de      	lsls	r6, r3, #31
 8005c3a:	d508      	bpl.n	8005c4e <_printf_i+0x14a>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6861      	ldr	r1, [r4, #4]
 8005c40:	4299      	cmp	r1, r3
 8005c42:	bfde      	ittt	le
 8005c44:	2330      	movle	r3, #48	; 0x30
 8005c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c4e:	1b52      	subs	r2, r2, r5
 8005c50:	6122      	str	r2, [r4, #16]
 8005c52:	464b      	mov	r3, r9
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f8cd a000 	str.w	sl, [sp]
 8005c5c:	aa03      	add	r2, sp, #12
 8005c5e:	f7ff fedf 	bl	8005a20 <_printf_common>
 8005c62:	3001      	adds	r0, #1
 8005c64:	d14a      	bne.n	8005cfc <_printf_i+0x1f8>
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	b004      	add	sp, #16
 8005c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	f043 0320 	orr.w	r3, r3, #32
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	2778      	movs	r7, #120	; 0x78
 8005c7a:	4832      	ldr	r0, [pc, #200]	; (8005d44 <_printf_i+0x240>)
 8005c7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	6829      	ldr	r1, [r5, #0]
 8005c84:	061f      	lsls	r7, r3, #24
 8005c86:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c8a:	d402      	bmi.n	8005c92 <_printf_i+0x18e>
 8005c8c:	065f      	lsls	r7, r3, #25
 8005c8e:	bf48      	it	mi
 8005c90:	b2b6      	uxthmi	r6, r6
 8005c92:	07df      	lsls	r7, r3, #31
 8005c94:	bf48      	it	mi
 8005c96:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9a:	6029      	str	r1, [r5, #0]
 8005c9c:	bf48      	it	mi
 8005c9e:	6023      	strmi	r3, [r4, #0]
 8005ca0:	b91e      	cbnz	r6, 8005caa <_printf_i+0x1a6>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f023 0320 	bic.w	r3, r3, #32
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	2310      	movs	r3, #16
 8005cac:	e7a6      	b.n	8005bfc <_printf_i+0xf8>
 8005cae:	4824      	ldr	r0, [pc, #144]	; (8005d40 <_printf_i+0x23c>)
 8005cb0:	e7e4      	b.n	8005c7c <_printf_i+0x178>
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	e7bd      	b.n	8005c32 <_printf_i+0x12e>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	6826      	ldr	r6, [r4, #0]
 8005cba:	1d18      	adds	r0, r3, #4
 8005cbc:	6961      	ldr	r1, [r4, #20]
 8005cbe:	6028      	str	r0, [r5, #0]
 8005cc0:	0635      	lsls	r5, r6, #24
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	d501      	bpl.n	8005cca <_printf_i+0x1c6>
 8005cc6:	6019      	str	r1, [r3, #0]
 8005cc8:	e002      	b.n	8005cd0 <_printf_i+0x1cc>
 8005cca:	0670      	lsls	r0, r6, #25
 8005ccc:	d5fb      	bpl.n	8005cc6 <_printf_i+0x1c2>
 8005cce:	8019      	strh	r1, [r3, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4615      	mov	r5, r2
 8005cd4:	6123      	str	r3, [r4, #16]
 8005cd6:	e7bc      	b.n	8005c52 <_printf_i+0x14e>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	681d      	ldr	r5, [r3, #0]
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 fb0c 	bl	8006302 <memchr>
 8005cea:	b108      	cbz	r0, 8005cf0 <_printf_i+0x1ec>
 8005cec:	1b40      	subs	r0, r0, r5
 8005cee:	6060      	str	r0, [r4, #4]
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	6123      	str	r3, [r4, #16]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfa:	e7aa      	b.n	8005c52 <_printf_i+0x14e>
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	47d0      	blx	sl
 8005d06:	3001      	adds	r0, #1
 8005d08:	d0ad      	beq.n	8005c66 <_printf_i+0x162>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	079b      	lsls	r3, r3, #30
 8005d0e:	d413      	bmi.n	8005d38 <_printf_i+0x234>
 8005d10:	68e0      	ldr	r0, [r4, #12]
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	4298      	cmp	r0, r3
 8005d16:	bfb8      	it	lt
 8005d18:	4618      	movlt	r0, r3
 8005d1a:	e7a6      	b.n	8005c6a <_printf_i+0x166>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4632      	mov	r2, r6
 8005d20:	4649      	mov	r1, r9
 8005d22:	4640      	mov	r0, r8
 8005d24:	47d0      	blx	sl
 8005d26:	3001      	adds	r0, #1
 8005d28:	d09d      	beq.n	8005c66 <_printf_i+0x162>
 8005d2a:	3501      	adds	r5, #1
 8005d2c:	68e3      	ldr	r3, [r4, #12]
 8005d2e:	9903      	ldr	r1, [sp, #12]
 8005d30:	1a5b      	subs	r3, r3, r1
 8005d32:	42ab      	cmp	r3, r5
 8005d34:	dcf2      	bgt.n	8005d1c <_printf_i+0x218>
 8005d36:	e7eb      	b.n	8005d10 <_printf_i+0x20c>
 8005d38:	2500      	movs	r5, #0
 8005d3a:	f104 0619 	add.w	r6, r4, #25
 8005d3e:	e7f5      	b.n	8005d2c <_printf_i+0x228>
 8005d40:	08008250 	.word	0x08008250
 8005d44:	08008261 	.word	0x08008261

08005d48 <std>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6083      	str	r3, [r0, #8]
 8005d58:	8181      	strh	r1, [r0, #12]
 8005d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d5c:	81c2      	strh	r2, [r0, #14]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	; 0x5c
 8005d66:	f000 f9f7 	bl	8006158 <memset>
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <std+0x58>)
 8005d6c:	6224      	str	r4, [r4, #32]
 8005d6e:	6263      	str	r3, [r4, #36]	; 0x24
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <std+0x5c>)
 8005d72:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <std+0x60>)
 8005d76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <std+0x64>)
 8005d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <std+0x68>)
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	d006      	beq.n	8005d90 <std+0x48>
 8005d82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d86:	4294      	cmp	r4, r2
 8005d88:	d002      	beq.n	8005d90 <std+0x48>
 8005d8a:	33d0      	adds	r3, #208	; 0xd0
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	d105      	bne.n	8005d9c <std+0x54>
 8005d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 bab0 	b.w	80062fc <__retarget_lock_init_recursive>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	08005fa9 	.word	0x08005fa9
 8005da4:	08005fcb 	.word	0x08005fcb
 8005da8:	08006003 	.word	0x08006003
 8005dac:	08006027 	.word	0x08006027
 8005db0:	20002a44 	.word	0x20002a44

08005db4 <stdio_exit_handler>:
 8005db4:	4a02      	ldr	r2, [pc, #8]	; (8005dc0 <stdio_exit_handler+0xc>)
 8005db6:	4903      	ldr	r1, [pc, #12]	; (8005dc4 <stdio_exit_handler+0x10>)
 8005db8:	4803      	ldr	r0, [pc, #12]	; (8005dc8 <stdio_exit_handler+0x14>)
 8005dba:	f000 b869 	b.w	8005e90 <_fwalk_sglue>
 8005dbe:	bf00      	nop
 8005dc0:	20000010 	.word	0x20000010
 8005dc4:	08007c89 	.word	0x08007c89
 8005dc8:	2000001c 	.word	0x2000001c

08005dcc <cleanup_stdio>:
 8005dcc:	6841      	ldr	r1, [r0, #4]
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <cleanup_stdio+0x34>)
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	d001      	beq.n	8005ddc <cleanup_stdio+0x10>
 8005dd8:	f001 ff56 	bl	8007c88 <_fflush_r>
 8005ddc:	68a1      	ldr	r1, [r4, #8]
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <cleanup_stdio+0x38>)
 8005de0:	4299      	cmp	r1, r3
 8005de2:	d002      	beq.n	8005dea <cleanup_stdio+0x1e>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f001 ff4f 	bl	8007c88 <_fflush_r>
 8005dea:	68e1      	ldr	r1, [r4, #12]
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <cleanup_stdio+0x3c>)
 8005dee:	4299      	cmp	r1, r3
 8005df0:	d004      	beq.n	8005dfc <cleanup_stdio+0x30>
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f001 bf46 	b.w	8007c88 <_fflush_r>
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	20002a44 	.word	0x20002a44
 8005e04:	20002aac 	.word	0x20002aac
 8005e08:	20002b14 	.word	0x20002b14

08005e0c <global_stdio_init.part.0>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <global_stdio_init.part.0+0x30>)
 8005e10:	4c0b      	ldr	r4, [pc, #44]	; (8005e40 <global_stdio_init.part.0+0x34>)
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <global_stdio_init.part.0+0x38>)
 8005e14:	4620      	mov	r0, r4
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	2104      	movs	r1, #4
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7ff ff94 	bl	8005d48 <std>
 8005e20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e24:	2201      	movs	r2, #1
 8005e26:	2109      	movs	r1, #9
 8005e28:	f7ff ff8e 	bl	8005d48 <std>
 8005e2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e30:	2202      	movs	r2, #2
 8005e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e36:	2112      	movs	r1, #18
 8005e38:	f7ff bf86 	b.w	8005d48 <std>
 8005e3c:	20002b7c 	.word	0x20002b7c
 8005e40:	20002a44 	.word	0x20002a44
 8005e44:	08005db5 	.word	0x08005db5

08005e48 <__sfp_lock_acquire>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__sfp_lock_acquire+0x8>)
 8005e4a:	f000 ba58 	b.w	80062fe <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20002b85 	.word	0x20002b85

08005e54 <__sfp_lock_release>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__sfp_lock_release+0x8>)
 8005e56:	f000 ba53 	b.w	8006300 <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20002b85 	.word	0x20002b85

08005e60 <__sinit>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	f7ff fff0 	bl	8005e48 <__sfp_lock_acquire>
 8005e68:	6a23      	ldr	r3, [r4, #32]
 8005e6a:	b11b      	cbz	r3, 8005e74 <__sinit+0x14>
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f7ff bff0 	b.w	8005e54 <__sfp_lock_release>
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <__sinit+0x28>)
 8005e76:	6223      	str	r3, [r4, #32]
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <__sinit+0x2c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f5      	bne.n	8005e6c <__sinit+0xc>
 8005e80:	f7ff ffc4 	bl	8005e0c <global_stdio_init.part.0>
 8005e84:	e7f2      	b.n	8005e6c <__sinit+0xc>
 8005e86:	bf00      	nop
 8005e88:	08005dcd 	.word	0x08005dcd
 8005e8c:	20002b7c 	.word	0x20002b7c

08005e90 <_fwalk_sglue>:
 8005e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e94:	4607      	mov	r7, r0
 8005e96:	4688      	mov	r8, r1
 8005e98:	4614      	mov	r4, r2
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ea4:	d505      	bpl.n	8005eb2 <_fwalk_sglue+0x22>
 8005ea6:	6824      	ldr	r4, [r4, #0]
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d1f7      	bne.n	8005e9c <_fwalk_sglue+0xc>
 8005eac:	4630      	mov	r0, r6
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d907      	bls.n	8005ec8 <_fwalk_sglue+0x38>
 8005eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	d003      	beq.n	8005ec8 <_fwalk_sglue+0x38>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	47c0      	blx	r8
 8005ec6:	4306      	orrs	r6, r0
 8005ec8:	3568      	adds	r5, #104	; 0x68
 8005eca:	e7e9      	b.n	8005ea0 <_fwalk_sglue+0x10>

08005ecc <iprintf>:
 8005ecc:	b40f      	push	{r0, r1, r2, r3}
 8005ece:	b507      	push	{r0, r1, r2, lr}
 8005ed0:	4906      	ldr	r1, [pc, #24]	; (8005eec <iprintf+0x20>)
 8005ed2:	ab04      	add	r3, sp, #16
 8005ed4:	6808      	ldr	r0, [r1, #0]
 8005ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eda:	6881      	ldr	r1, [r0, #8]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	f001 fd37 	bl	8007950 <_vfiprintf_r>
 8005ee2:	b003      	add	sp, #12
 8005ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee8:	b004      	add	sp, #16
 8005eea:	4770      	bx	lr
 8005eec:	20000068 	.word	0x20000068

08005ef0 <_puts_r>:
 8005ef0:	6a03      	ldr	r3, [r0, #32]
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	6884      	ldr	r4, [r0, #8]
 8005efa:	b90b      	cbnz	r3, 8005f00 <_puts_r+0x10>
 8005efc:	f7ff ffb0 	bl	8005e60 <__sinit>
 8005f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d405      	bmi.n	8005f12 <_puts_r+0x22>
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	0598      	lsls	r0, r3, #22
 8005f0a:	d402      	bmi.n	8005f12 <_puts_r+0x22>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f0e:	f000 f9f6 	bl	80062fe <__retarget_lock_acquire_recursive>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	0719      	lsls	r1, r3, #28
 8005f16:	d513      	bpl.n	8005f40 <_puts_r+0x50>
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	b18b      	cbz	r3, 8005f40 <_puts_r+0x50>
 8005f1c:	3e01      	subs	r6, #1
 8005f1e:	68a3      	ldr	r3, [r4, #8]
 8005f20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f24:	3b01      	subs	r3, #1
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	b9e9      	cbnz	r1, 8005f66 <_puts_r+0x76>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da2e      	bge.n	8005f8c <_puts_r+0x9c>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	210a      	movs	r1, #10
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f87b 	bl	800602e <__swbuf_r>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d007      	beq.n	8005f4c <_puts_r+0x5c>
 8005f3c:	250a      	movs	r5, #10
 8005f3e:	e007      	b.n	8005f50 <_puts_r+0x60>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f8b0 	bl	80060a8 <__swsetup_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d0e7      	beq.n	8005f1c <_puts_r+0x2c>
 8005f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f52:	07da      	lsls	r2, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_puts_r+0x72>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	059b      	lsls	r3, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_puts_r+0x72>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5e:	f000 f9cf 	bl	8006300 <__retarget_lock_release_recursive>
 8005f62:	4628      	mov	r0, r5
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da04      	bge.n	8005f74 <_puts_r+0x84>
 8005f6a:	69a2      	ldr	r2, [r4, #24]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	dc06      	bgt.n	8005f7e <_puts_r+0x8e>
 8005f70:	290a      	cmp	r1, #10
 8005f72:	d004      	beq.n	8005f7e <_puts_r+0x8e>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	6022      	str	r2, [r4, #0]
 8005f7a:	7019      	strb	r1, [r3, #0]
 8005f7c:	e7cf      	b.n	8005f1e <_puts_r+0x2e>
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 f854 	bl	800602e <__swbuf_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	d1c9      	bne.n	8005f1e <_puts_r+0x2e>
 8005f8a:	e7df      	b.n	8005f4c <_puts_r+0x5c>
 8005f8c:	250a      	movs	r5, #10
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	701d      	strb	r5, [r3, #0]
 8005f96:	e7db      	b.n	8005f50 <_puts_r+0x60>

08005f98 <puts>:
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <puts+0xc>)
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfa7 	b.w	8005ef0 <_puts_r>
 8005fa2:	bf00      	nop
 8005fa4:	20000068 	.word	0x20000068

08005fa8 <__sread>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	460c      	mov	r4, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	f000 f956 	bl	8006260 <_read_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	bfab      	itete	ge
 8005fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fba:	89a3      	ldrhlt	r3, [r4, #12]
 8005fbc:	181b      	addge	r3, r3, r0
 8005fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fc2:	bfac      	ite	ge
 8005fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fc6:	81a3      	strhlt	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__swrite>:
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	461f      	mov	r7, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	05db      	lsls	r3, r3, #23
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4616      	mov	r6, r2
 8005fda:	d505      	bpl.n	8005fe8 <__swrite+0x1e>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f92a 	bl	800623c <_lseek_r>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	4632      	mov	r2, r6
 8005fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 b941 	b.w	8006284 <_write_r>

08006002 <__sseek>:
 8006002:	b510      	push	{r4, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 f917 	bl	800623c <_lseek_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	bf15      	itete	ne
 8006014:	6560      	strne	r0, [r4, #84]	; 0x54
 8006016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800601a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800601e:	81a3      	strheq	r3, [r4, #12]
 8006020:	bf18      	it	ne
 8006022:	81a3      	strhne	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__sclose>:
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 b8a1 	b.w	8006170 <_close_r>

0800602e <__swbuf_r>:
 800602e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006030:	460e      	mov	r6, r1
 8006032:	4614      	mov	r4, r2
 8006034:	4605      	mov	r5, r0
 8006036:	b118      	cbz	r0, 8006040 <__swbuf_r+0x12>
 8006038:	6a03      	ldr	r3, [r0, #32]
 800603a:	b90b      	cbnz	r3, 8006040 <__swbuf_r+0x12>
 800603c:	f7ff ff10 	bl	8005e60 <__sinit>
 8006040:	69a3      	ldr	r3, [r4, #24]
 8006042:	60a3      	str	r3, [r4, #8]
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	071a      	lsls	r2, r3, #28
 8006048:	d525      	bpl.n	8006096 <__swbuf_r+0x68>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	b31b      	cbz	r3, 8006096 <__swbuf_r+0x68>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	6922      	ldr	r2, [r4, #16]
 8006052:	b2f6      	uxtb	r6, r6
 8006054:	1a98      	subs	r0, r3, r2
 8006056:	6963      	ldr	r3, [r4, #20]
 8006058:	4637      	mov	r7, r6
 800605a:	4283      	cmp	r3, r0
 800605c:	dc04      	bgt.n	8006068 <__swbuf_r+0x3a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f001 fe11 	bl	8007c88 <_fflush_r>
 8006066:	b9e0      	cbnz	r0, 80060a2 <__swbuf_r+0x74>
 8006068:	68a3      	ldr	r3, [r4, #8]
 800606a:	3b01      	subs	r3, #1
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	6022      	str	r2, [r4, #0]
 8006074:	701e      	strb	r6, [r3, #0]
 8006076:	6962      	ldr	r2, [r4, #20]
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	d004      	beq.n	8006088 <__swbuf_r+0x5a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	07db      	lsls	r3, r3, #31
 8006082:	d506      	bpl.n	8006092 <__swbuf_r+0x64>
 8006084:	2e0a      	cmp	r6, #10
 8006086:	d104      	bne.n	8006092 <__swbuf_r+0x64>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f001 fdfc 	bl	8007c88 <_fflush_r>
 8006090:	b938      	cbnz	r0, 80060a2 <__swbuf_r+0x74>
 8006092:	4638      	mov	r0, r7
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f000 f805 	bl	80060a8 <__swsetup_r>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0d5      	beq.n	800604e <__swbuf_r+0x20>
 80060a2:	f04f 37ff 	mov.w	r7, #4294967295
 80060a6:	e7f4      	b.n	8006092 <__swbuf_r+0x64>

080060a8 <__swsetup_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <__swsetup_r+0xac>)
 80060ac:	4605      	mov	r5, r0
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	460c      	mov	r4, r1
 80060b2:	b118      	cbz	r0, 80060bc <__swsetup_r+0x14>
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	b90b      	cbnz	r3, 80060bc <__swsetup_r+0x14>
 80060b8:	f7ff fed2 	bl	8005e60 <__sinit>
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060c2:	0718      	lsls	r0, r3, #28
 80060c4:	d422      	bmi.n	800610c <__swsetup_r+0x64>
 80060c6:	06d9      	lsls	r1, r3, #27
 80060c8:	d407      	bmi.n	80060da <__swsetup_r+0x32>
 80060ca:	2309      	movs	r3, #9
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	e034      	b.n	8006144 <__swsetup_r+0x9c>
 80060da:	0758      	lsls	r0, r3, #29
 80060dc:	d512      	bpl.n	8006104 <__swsetup_r+0x5c>
 80060de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e0:	b141      	cbz	r1, 80060f4 <__swsetup_r+0x4c>
 80060e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060e6:	4299      	cmp	r1, r3
 80060e8:	d002      	beq.n	80060f0 <__swsetup_r+0x48>
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 ff94 	bl	8007018 <_free_r>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6363      	str	r3, [r4, #52]	; 0x34
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	2300      	movs	r3, #0
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f043 0308 	orr.w	r3, r3, #8
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b94b      	cbnz	r3, 8006124 <__swsetup_r+0x7c>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d003      	beq.n	8006124 <__swsetup_r+0x7c>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f001 fdff 	bl	8007d22 <__smakebuf_r>
 8006124:	89a0      	ldrh	r0, [r4, #12]
 8006126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800612a:	f010 0301 	ands.w	r3, r0, #1
 800612e:	d00a      	beq.n	8006146 <__swsetup_r+0x9e>
 8006130:	2300      	movs	r3, #0
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	6963      	ldr	r3, [r4, #20]
 8006136:	425b      	negs	r3, r3
 8006138:	61a3      	str	r3, [r4, #24]
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	b943      	cbnz	r3, 8006150 <__swsetup_r+0xa8>
 800613e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006142:	d1c4      	bne.n	80060ce <__swsetup_r+0x26>
 8006144:	bd38      	pop	{r3, r4, r5, pc}
 8006146:	0781      	lsls	r1, r0, #30
 8006148:	bf58      	it	pl
 800614a:	6963      	ldrpl	r3, [r4, #20]
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	e7f4      	b.n	800613a <__swsetup_r+0x92>
 8006150:	2000      	movs	r0, #0
 8006152:	e7f7      	b.n	8006144 <__swsetup_r+0x9c>
 8006154:	20000068 	.word	0x20000068

08006158 <memset>:
 8006158:	4603      	mov	r3, r0
 800615a:	4402      	add	r2, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	d100      	bne.n	8006162 <memset+0xa>
 8006160:	4770      	bx	lr
 8006162:	f803 1b01 	strb.w	r1, [r3], #1
 8006166:	e7f9      	b.n	800615c <memset+0x4>

08006168 <_localeconv_r>:
 8006168:	4800      	ldr	r0, [pc, #0]	; (800616c <_localeconv_r+0x4>)
 800616a:	4770      	bx	lr
 800616c:	2000015c 	.word	0x2000015c

08006170 <_close_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	2300      	movs	r3, #0
 8006174:	4d05      	ldr	r5, [pc, #20]	; (800618c <_close_r+0x1c>)
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fb ff26 	bl	8001fcc <_close>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_close_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_close_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20002b80 	.word	0x20002b80

08006190 <_reclaim_reent>:
 8006190:	4b29      	ldr	r3, [pc, #164]	; (8006238 <_reclaim_reent+0xa8>)
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4604      	mov	r4, r0
 8006198:	4283      	cmp	r3, r0
 800619a:	d04b      	beq.n	8006234 <_reclaim_reent+0xa4>
 800619c:	69c3      	ldr	r3, [r0, #28]
 800619e:	b143      	cbz	r3, 80061b2 <_reclaim_reent+0x22>
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d144      	bne.n	8006230 <_reclaim_reent+0xa0>
 80061a6:	69e3      	ldr	r3, [r4, #28]
 80061a8:	6819      	ldr	r1, [r3, #0]
 80061aa:	b111      	cbz	r1, 80061b2 <_reclaim_reent+0x22>
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 ff33 	bl	8007018 <_free_r>
 80061b2:	6961      	ldr	r1, [r4, #20]
 80061b4:	b111      	cbz	r1, 80061bc <_reclaim_reent+0x2c>
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 ff2e 	bl	8007018 <_free_r>
 80061bc:	69e1      	ldr	r1, [r4, #28]
 80061be:	b111      	cbz	r1, 80061c6 <_reclaim_reent+0x36>
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 ff29 	bl	8007018 <_free_r>
 80061c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061c8:	b111      	cbz	r1, 80061d0 <_reclaim_reent+0x40>
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 ff24 	bl	8007018 <_free_r>
 80061d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d2:	b111      	cbz	r1, 80061da <_reclaim_reent+0x4a>
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 ff1f 	bl	8007018 <_free_r>
 80061da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061dc:	b111      	cbz	r1, 80061e4 <_reclaim_reent+0x54>
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 ff1a 	bl	8007018 <_free_r>
 80061e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061e6:	b111      	cbz	r1, 80061ee <_reclaim_reent+0x5e>
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 ff15 	bl	8007018 <_free_r>
 80061ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80061f0:	b111      	cbz	r1, 80061f8 <_reclaim_reent+0x68>
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 ff10 	bl	8007018 <_free_r>
 80061f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061fa:	b111      	cbz	r1, 8006202 <_reclaim_reent+0x72>
 80061fc:	4620      	mov	r0, r4
 80061fe:	f000 ff0b 	bl	8007018 <_free_r>
 8006202:	6a23      	ldr	r3, [r4, #32]
 8006204:	b1b3      	cbz	r3, 8006234 <_reclaim_reent+0xa4>
 8006206:	4620      	mov	r0, r4
 8006208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800620c:	4718      	bx	r3
 800620e:	5949      	ldr	r1, [r1, r5]
 8006210:	b941      	cbnz	r1, 8006224 <_reclaim_reent+0x94>
 8006212:	3504      	adds	r5, #4
 8006214:	69e3      	ldr	r3, [r4, #28]
 8006216:	2d80      	cmp	r5, #128	; 0x80
 8006218:	68d9      	ldr	r1, [r3, #12]
 800621a:	d1f8      	bne.n	800620e <_reclaim_reent+0x7e>
 800621c:	4620      	mov	r0, r4
 800621e:	f000 fefb 	bl	8007018 <_free_r>
 8006222:	e7c0      	b.n	80061a6 <_reclaim_reent+0x16>
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fef6 	bl	8007018 <_free_r>
 800622c:	4631      	mov	r1, r6
 800622e:	e7ef      	b.n	8006210 <_reclaim_reent+0x80>
 8006230:	2500      	movs	r5, #0
 8006232:	e7ef      	b.n	8006214 <_reclaim_reent+0x84>
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	bf00      	nop
 8006238:	20000068 	.word	0x20000068

0800623c <_lseek_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4604      	mov	r4, r0
 8006240:	4608      	mov	r0, r1
 8006242:	4611      	mov	r1, r2
 8006244:	2200      	movs	r2, #0
 8006246:	4d05      	ldr	r5, [pc, #20]	; (800625c <_lseek_r+0x20>)
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fb fee2 	bl	8002014 <_lseek>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_lseek_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_lseek_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20002b80 	.word	0x20002b80

08006260 <_read_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	2200      	movs	r2, #0
 800626a:	4d05      	ldr	r5, [pc, #20]	; (8006280 <_read_r+0x20>)
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fb fe8f 	bl	8001f92 <_read>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_read_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_read_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20002b80 	.word	0x20002b80

08006284 <_write_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	2200      	movs	r2, #0
 800628e:	4d05      	ldr	r5, [pc, #20]	; (80062a4 <_write_r+0x20>)
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fb fd60 	bl	8001d58 <_write>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_write_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_write_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20002b80 	.word	0x20002b80

080062a8 <__errno>:
 80062a8:	4b01      	ldr	r3, [pc, #4]	; (80062b0 <__errno+0x8>)
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20000068 	.word	0x20000068

080062b4 <__libc_init_array>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	2600      	movs	r6, #0
 80062b8:	4d0c      	ldr	r5, [pc, #48]	; (80062ec <__libc_init_array+0x38>)
 80062ba:	4c0d      	ldr	r4, [pc, #52]	; (80062f0 <__libc_init_array+0x3c>)
 80062bc:	1b64      	subs	r4, r4, r5
 80062be:	10a4      	asrs	r4, r4, #2
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	d109      	bne.n	80062d8 <__libc_init_array+0x24>
 80062c4:	f001 fecc 	bl	8008060 <_init>
 80062c8:	2600      	movs	r6, #0
 80062ca:	4d0a      	ldr	r5, [pc, #40]	; (80062f4 <__libc_init_array+0x40>)
 80062cc:	4c0a      	ldr	r4, [pc, #40]	; (80062f8 <__libc_init_array+0x44>)
 80062ce:	1b64      	subs	r4, r4, r5
 80062d0:	10a4      	asrs	r4, r4, #2
 80062d2:	42a6      	cmp	r6, r4
 80062d4:	d105      	bne.n	80062e2 <__libc_init_array+0x2e>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062dc:	4798      	blx	r3
 80062de:	3601      	adds	r6, #1
 80062e0:	e7ee      	b.n	80062c0 <__libc_init_array+0xc>
 80062e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e6:	4798      	blx	r3
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7f2      	b.n	80062d2 <__libc_init_array+0x1e>
 80062ec:	080085ac 	.word	0x080085ac
 80062f0:	080085ac 	.word	0x080085ac
 80062f4:	080085ac 	.word	0x080085ac
 80062f8:	080085b0 	.word	0x080085b0

080062fc <__retarget_lock_init_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_acquire_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__retarget_lock_release_recursive>:
 8006300:	4770      	bx	lr

08006302 <memchr>:
 8006302:	4603      	mov	r3, r0
 8006304:	b510      	push	{r4, lr}
 8006306:	b2c9      	uxtb	r1, r1
 8006308:	4402      	add	r2, r0
 800630a:	4293      	cmp	r3, r2
 800630c:	4618      	mov	r0, r3
 800630e:	d101      	bne.n	8006314 <memchr+0x12>
 8006310:	2000      	movs	r0, #0
 8006312:	e003      	b.n	800631c <memchr+0x1a>
 8006314:	7804      	ldrb	r4, [r0, #0]
 8006316:	3301      	adds	r3, #1
 8006318:	428c      	cmp	r4, r1
 800631a:	d1f6      	bne.n	800630a <memchr+0x8>
 800631c:	bd10      	pop	{r4, pc}

0800631e <memcpy>:
 800631e:	440a      	add	r2, r1
 8006320:	4291      	cmp	r1, r2
 8006322:	f100 33ff 	add.w	r3, r0, #4294967295
 8006326:	d100      	bne.n	800632a <memcpy+0xc>
 8006328:	4770      	bx	lr
 800632a:	b510      	push	{r4, lr}
 800632c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006330:	4291      	cmp	r1, r2
 8006332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006336:	d1f9      	bne.n	800632c <memcpy+0xe>
 8006338:	bd10      	pop	{r4, pc}

0800633a <quorem>:
 800633a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633e:	6903      	ldr	r3, [r0, #16]
 8006340:	690c      	ldr	r4, [r1, #16]
 8006342:	4607      	mov	r7, r0
 8006344:	42a3      	cmp	r3, r4
 8006346:	db7f      	blt.n	8006448 <quorem+0x10e>
 8006348:	3c01      	subs	r4, #1
 800634a:	f100 0514 	add.w	r5, r0, #20
 800634e:	f101 0814 	add.w	r8, r1, #20
 8006352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800635c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006360:	3301      	adds	r3, #1
 8006362:	429a      	cmp	r2, r3
 8006364:	fbb2 f6f3 	udiv	r6, r2, r3
 8006368:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800636c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006370:	d331      	bcc.n	80063d6 <quorem+0x9c>
 8006372:	f04f 0e00 	mov.w	lr, #0
 8006376:	4640      	mov	r0, r8
 8006378:	46ac      	mov	ip, r5
 800637a:	46f2      	mov	sl, lr
 800637c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006380:	b293      	uxth	r3, r2
 8006382:	fb06 e303 	mla	r3, r6, r3, lr
 8006386:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800638a:	0c1a      	lsrs	r2, r3, #16
 800638c:	b29b      	uxth	r3, r3
 800638e:	fb06 220e 	mla	r2, r6, lr, r2
 8006392:	ebaa 0303 	sub.w	r3, sl, r3
 8006396:	f8dc a000 	ldr.w	sl, [ip]
 800639a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800639e:	fa1f fa8a 	uxth.w	sl, sl
 80063a2:	4453      	add	r3, sl
 80063a4:	f8dc a000 	ldr.w	sl, [ip]
 80063a8:	b292      	uxth	r2, r2
 80063aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063b8:	4581      	cmp	r9, r0
 80063ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063be:	f84c 3b04 	str.w	r3, [ip], #4
 80063c2:	d2db      	bcs.n	800637c <quorem+0x42>
 80063c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063c8:	b92b      	cbnz	r3, 80063d6 <quorem+0x9c>
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	429d      	cmp	r5, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	d32d      	bcc.n	8006430 <quorem+0xf6>
 80063d4:	613c      	str	r4, [r7, #16]
 80063d6:	4638      	mov	r0, r7
 80063d8:	f001 f994 	bl	8007704 <__mcmp>
 80063dc:	2800      	cmp	r0, #0
 80063de:	db23      	blt.n	8006428 <quorem+0xee>
 80063e0:	4629      	mov	r1, r5
 80063e2:	2000      	movs	r0, #0
 80063e4:	3601      	adds	r6, #1
 80063e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80063ea:	f8d1 c000 	ldr.w	ip, [r1]
 80063ee:	b293      	uxth	r3, r2
 80063f0:	1ac3      	subs	r3, r0, r3
 80063f2:	0c12      	lsrs	r2, r2, #16
 80063f4:	fa1f f08c 	uxth.w	r0, ip
 80063f8:	4403      	add	r3, r0
 80063fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006408:	45c1      	cmp	r9, r8
 800640a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800640e:	f841 3b04 	str.w	r3, [r1], #4
 8006412:	d2e8      	bcs.n	80063e6 <quorem+0xac>
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641c:	b922      	cbnz	r2, 8006428 <quorem+0xee>
 800641e:	3b04      	subs	r3, #4
 8006420:	429d      	cmp	r5, r3
 8006422:	461a      	mov	r2, r3
 8006424:	d30a      	bcc.n	800643c <quorem+0x102>
 8006426:	613c      	str	r4, [r7, #16]
 8006428:	4630      	mov	r0, r6
 800642a:	b003      	add	sp, #12
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	3b04      	subs	r3, #4
 8006434:	2a00      	cmp	r2, #0
 8006436:	d1cd      	bne.n	80063d4 <quorem+0x9a>
 8006438:	3c01      	subs	r4, #1
 800643a:	e7c8      	b.n	80063ce <quorem+0x94>
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	3b04      	subs	r3, #4
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1f0      	bne.n	8006426 <quorem+0xec>
 8006444:	3c01      	subs	r4, #1
 8006446:	e7eb      	b.n	8006420 <quorem+0xe6>
 8006448:	2000      	movs	r0, #0
 800644a:	e7ee      	b.n	800642a <quorem+0xf0>
 800644c:	0000      	movs	r0, r0
	...

08006450 <_dtoa_r>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	4616      	mov	r6, r2
 8006456:	461f      	mov	r7, r3
 8006458:	69c4      	ldr	r4, [r0, #28]
 800645a:	b099      	sub	sp, #100	; 0x64
 800645c:	4605      	mov	r5, r0
 800645e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006462:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006466:	b974      	cbnz	r4, 8006486 <_dtoa_r+0x36>
 8006468:	2010      	movs	r0, #16
 800646a:	f000 fe1d 	bl	80070a8 <malloc>
 800646e:	4602      	mov	r2, r0
 8006470:	61e8      	str	r0, [r5, #28]
 8006472:	b920      	cbnz	r0, 800647e <_dtoa_r+0x2e>
 8006474:	21ef      	movs	r1, #239	; 0xef
 8006476:	4bac      	ldr	r3, [pc, #688]	; (8006728 <_dtoa_r+0x2d8>)
 8006478:	48ac      	ldr	r0, [pc, #688]	; (800672c <_dtoa_r+0x2dc>)
 800647a:	f001 fcc1 	bl	8007e00 <__assert_func>
 800647e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006482:	6004      	str	r4, [r0, #0]
 8006484:	60c4      	str	r4, [r0, #12]
 8006486:	69eb      	ldr	r3, [r5, #28]
 8006488:	6819      	ldr	r1, [r3, #0]
 800648a:	b151      	cbz	r1, 80064a2 <_dtoa_r+0x52>
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	2301      	movs	r3, #1
 8006490:	4093      	lsls	r3, r2
 8006492:	604a      	str	r2, [r1, #4]
 8006494:	608b      	str	r3, [r1, #8]
 8006496:	4628      	mov	r0, r5
 8006498:	f000 fefa 	bl	8007290 <_Bfree>
 800649c:	2200      	movs	r2, #0
 800649e:	69eb      	ldr	r3, [r5, #28]
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	1e3b      	subs	r3, r7, #0
 80064a4:	bfaf      	iteee	ge
 80064a6:	2300      	movge	r3, #0
 80064a8:	2201      	movlt	r2, #1
 80064aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064ae:	9305      	strlt	r3, [sp, #20]
 80064b0:	bfa8      	it	ge
 80064b2:	f8c8 3000 	strge.w	r3, [r8]
 80064b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064ba:	4b9d      	ldr	r3, [pc, #628]	; (8006730 <_dtoa_r+0x2e0>)
 80064bc:	bfb8      	it	lt
 80064be:	f8c8 2000 	strlt.w	r2, [r8]
 80064c2:	ea33 0309 	bics.w	r3, r3, r9
 80064c6:	d119      	bne.n	80064fc <_dtoa_r+0xac>
 80064c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064d4:	4333      	orrs	r3, r6
 80064d6:	f000 8589 	beq.w	8006fec <_dtoa_r+0xb9c>
 80064da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064dc:	b953      	cbnz	r3, 80064f4 <_dtoa_r+0xa4>
 80064de:	4b95      	ldr	r3, [pc, #596]	; (8006734 <_dtoa_r+0x2e4>)
 80064e0:	e023      	b.n	800652a <_dtoa_r+0xda>
 80064e2:	4b95      	ldr	r3, [pc, #596]	; (8006738 <_dtoa_r+0x2e8>)
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	3308      	adds	r3, #8
 80064e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	9803      	ldr	r0, [sp, #12]
 80064ee:	b019      	add	sp, #100	; 0x64
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4b8f      	ldr	r3, [pc, #572]	; (8006734 <_dtoa_r+0x2e4>)
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	3303      	adds	r3, #3
 80064fa:	e7f5      	b.n	80064e8 <_dtoa_r+0x98>
 80064fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006500:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	f7fa fa4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006510:	4680      	mov	r8, r0
 8006512:	b160      	cbz	r0, 800652e <_dtoa_r+0xde>
 8006514:	2301      	movs	r3, #1
 8006516:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8562 	beq.w	8006fe6 <_dtoa_r+0xb96>
 8006522:	4b86      	ldr	r3, [pc, #536]	; (800673c <_dtoa_r+0x2ec>)
 8006524:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	3b01      	subs	r3, #1
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	e7de      	b.n	80064ec <_dtoa_r+0x9c>
 800652e:	ab16      	add	r3, sp, #88	; 0x58
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	ab17      	add	r3, sp, #92	; 0x5c
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4628      	mov	r0, r5
 8006538:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800653c:	f001 f98a 	bl	8007854 <__d2b>
 8006540:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006544:	4682      	mov	sl, r0
 8006546:	2c00      	cmp	r4, #0
 8006548:	d07e      	beq.n	8006648 <_dtoa_r+0x1f8>
 800654a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006550:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006558:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800655c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006560:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006564:	4619      	mov	r1, r3
 8006566:	2200      	movs	r2, #0
 8006568:	4b75      	ldr	r3, [pc, #468]	; (8006740 <_dtoa_r+0x2f0>)
 800656a:	f7f9 fdfd 	bl	8000168 <__aeabi_dsub>
 800656e:	a368      	add	r3, pc, #416	; (adr r3, 8006710 <_dtoa_r+0x2c0>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	a367      	add	r3, pc, #412	; (adr r3, 8006718 <_dtoa_r+0x2c8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fdf5 	bl	800016c <__adddf3>
 8006582:	4606      	mov	r6, r0
 8006584:	4620      	mov	r0, r4
 8006586:	460f      	mov	r7, r1
 8006588:	f7f9 ff3c 	bl	8000404 <__aeabi_i2d>
 800658c:	a364      	add	r3, pc, #400	; (adr r3, 8006720 <_dtoa_r+0x2d0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 ffa1 	bl	80004d8 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7f9 fde5 	bl	800016c <__adddf3>
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	f7fa fa47 	bl	8000a38 <__aeabi_d2iz>
 80065aa:	2200      	movs	r2, #0
 80065ac:	4683      	mov	fp, r0
 80065ae:	2300      	movs	r3, #0
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	f7fa fa02 	bl	80009bc <__aeabi_dcmplt>
 80065b8:	b148      	cbz	r0, 80065ce <_dtoa_r+0x17e>
 80065ba:	4658      	mov	r0, fp
 80065bc:	f7f9 ff22 	bl	8000404 <__aeabi_i2d>
 80065c0:	4632      	mov	r2, r6
 80065c2:	463b      	mov	r3, r7
 80065c4:	f7fa f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80065c8:	b908      	cbnz	r0, 80065ce <_dtoa_r+0x17e>
 80065ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065ce:	f1bb 0f16 	cmp.w	fp, #22
 80065d2:	d857      	bhi.n	8006684 <_dtoa_r+0x234>
 80065d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065d8:	4b5a      	ldr	r3, [pc, #360]	; (8006744 <_dtoa_r+0x2f4>)
 80065da:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7fa f9eb 	bl	80009bc <__aeabi_dcmplt>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d04e      	beq.n	8006688 <_dtoa_r+0x238>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065f4:	1b1b      	subs	r3, r3, r4
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	bf46      	itte	mi
 80065fa:	f1c3 0901 	rsbmi	r9, r3, #1
 80065fe:	2300      	movmi	r3, #0
 8006600:	f04f 0900 	movpl.w	r9, #0
 8006604:	9209      	str	r2, [sp, #36]	; 0x24
 8006606:	bf48      	it	mi
 8006608:	9309      	strmi	r3, [sp, #36]	; 0x24
 800660a:	f1bb 0f00 	cmp.w	fp, #0
 800660e:	db3d      	blt.n	800668c <_dtoa_r+0x23c>
 8006610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006612:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006616:	445b      	add	r3, fp
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	2300      	movs	r3, #0
 800661c:	930a      	str	r3, [sp, #40]	; 0x28
 800661e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006620:	2b09      	cmp	r3, #9
 8006622:	d867      	bhi.n	80066f4 <_dtoa_r+0x2a4>
 8006624:	2b05      	cmp	r3, #5
 8006626:	bfc4      	itt	gt
 8006628:	3b04      	subgt	r3, #4
 800662a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800662c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800662e:	bfc8      	it	gt
 8006630:	2400      	movgt	r4, #0
 8006632:	f1a3 0302 	sub.w	r3, r3, #2
 8006636:	bfd8      	it	le
 8006638:	2401      	movle	r4, #1
 800663a:	2b03      	cmp	r3, #3
 800663c:	f200 8086 	bhi.w	800674c <_dtoa_r+0x2fc>
 8006640:	e8df f003 	tbb	[pc, r3]
 8006644:	5637392c 	.word	0x5637392c
 8006648:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800664c:	441c      	add	r4, r3
 800664e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006652:	2b20      	cmp	r3, #32
 8006654:	bfc1      	itttt	gt
 8006656:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800665a:	fa09 f903 	lslgt.w	r9, r9, r3
 800665e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006662:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006666:	bfd6      	itet	le
 8006668:	f1c3 0320 	rsble	r3, r3, #32
 800666c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006670:	fa06 f003 	lslle.w	r0, r6, r3
 8006674:	f7f9 feb6 	bl	80003e4 <__aeabi_ui2d>
 8006678:	2201      	movs	r2, #1
 800667a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800667e:	3c01      	subs	r4, #1
 8006680:	9213      	str	r2, [sp, #76]	; 0x4c
 8006682:	e76f      	b.n	8006564 <_dtoa_r+0x114>
 8006684:	2301      	movs	r3, #1
 8006686:	e7b3      	b.n	80065f0 <_dtoa_r+0x1a0>
 8006688:	900f      	str	r0, [sp, #60]	; 0x3c
 800668a:	e7b2      	b.n	80065f2 <_dtoa_r+0x1a2>
 800668c:	f1cb 0300 	rsb	r3, fp, #0
 8006690:	930a      	str	r3, [sp, #40]	; 0x28
 8006692:	2300      	movs	r3, #0
 8006694:	eba9 090b 	sub.w	r9, r9, fp
 8006698:	930e      	str	r3, [sp, #56]	; 0x38
 800669a:	e7c0      	b.n	800661e <_dtoa_r+0x1ce>
 800669c:	2300      	movs	r3, #0
 800669e:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc55      	bgt.n	8006752 <_dtoa_r+0x302>
 80066a6:	2301      	movs	r3, #1
 80066a8:	461a      	mov	r2, r3
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	9223      	str	r2, [sp, #140]	; 0x8c
 80066b0:	e00b      	b.n	80066ca <_dtoa_r+0x27a>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e7f3      	b.n	800669e <_dtoa_r+0x24e>
 80066b6:	2300      	movs	r3, #0
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066bc:	445b      	add	r3, fp
 80066be:	9306      	str	r3, [sp, #24]
 80066c0:	3301      	adds	r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	9308      	str	r3, [sp, #32]
 80066c6:	bfb8      	it	lt
 80066c8:	2301      	movlt	r3, #1
 80066ca:	2100      	movs	r1, #0
 80066cc:	2204      	movs	r2, #4
 80066ce:	69e8      	ldr	r0, [r5, #28]
 80066d0:	f102 0614 	add.w	r6, r2, #20
 80066d4:	429e      	cmp	r6, r3
 80066d6:	d940      	bls.n	800675a <_dtoa_r+0x30a>
 80066d8:	6041      	str	r1, [r0, #4]
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 fd98 	bl	8007210 <_Balloc>
 80066e0:	9003      	str	r0, [sp, #12]
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d13c      	bne.n	8006760 <_dtoa_r+0x310>
 80066e6:	4602      	mov	r2, r0
 80066e8:	f240 11af 	movw	r1, #431	; 0x1af
 80066ec:	4b16      	ldr	r3, [pc, #88]	; (8006748 <_dtoa_r+0x2f8>)
 80066ee:	e6c3      	b.n	8006478 <_dtoa_r+0x28>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7e1      	b.n	80066b8 <_dtoa_r+0x268>
 80066f4:	2401      	movs	r4, #1
 80066f6:	2300      	movs	r3, #0
 80066f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80066fa:	9322      	str	r3, [sp, #136]	; 0x88
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	2200      	movs	r2, #0
 8006702:	9306      	str	r3, [sp, #24]
 8006704:	9308      	str	r3, [sp, #32]
 8006706:	2312      	movs	r3, #18
 8006708:	e7d1      	b.n	80066ae <_dtoa_r+0x25e>
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w
 8006710:	636f4361 	.word	0x636f4361
 8006714:	3fd287a7 	.word	0x3fd287a7
 8006718:	8b60c8b3 	.word	0x8b60c8b3
 800671c:	3fc68a28 	.word	0x3fc68a28
 8006720:	509f79fb 	.word	0x509f79fb
 8006724:	3fd34413 	.word	0x3fd34413
 8006728:	0800827f 	.word	0x0800827f
 800672c:	08008296 	.word	0x08008296
 8006730:	7ff00000 	.word	0x7ff00000
 8006734:	0800827b 	.word	0x0800827b
 8006738:	08008272 	.word	0x08008272
 800673c:	0800824f 	.word	0x0800824f
 8006740:	3ff80000 	.word	0x3ff80000
 8006744:	08008380 	.word	0x08008380
 8006748:	080082ee 	.word	0x080082ee
 800674c:	2301      	movs	r3, #1
 800674e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006750:	e7d4      	b.n	80066fc <_dtoa_r+0x2ac>
 8006752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006754:	9306      	str	r3, [sp, #24]
 8006756:	9308      	str	r3, [sp, #32]
 8006758:	e7b7      	b.n	80066ca <_dtoa_r+0x27a>
 800675a:	3101      	adds	r1, #1
 800675c:	0052      	lsls	r2, r2, #1
 800675e:	e7b7      	b.n	80066d0 <_dtoa_r+0x280>
 8006760:	69eb      	ldr	r3, [r5, #28]
 8006762:	9a03      	ldr	r2, [sp, #12]
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	9b08      	ldr	r3, [sp, #32]
 8006768:	2b0e      	cmp	r3, #14
 800676a:	f200 80a8 	bhi.w	80068be <_dtoa_r+0x46e>
 800676e:	2c00      	cmp	r4, #0
 8006770:	f000 80a5 	beq.w	80068be <_dtoa_r+0x46e>
 8006774:	f1bb 0f00 	cmp.w	fp, #0
 8006778:	dd34      	ble.n	80067e4 <_dtoa_r+0x394>
 800677a:	4b9a      	ldr	r3, [pc, #616]	; (80069e4 <_dtoa_r+0x594>)
 800677c:	f00b 020f 	and.w	r2, fp, #15
 8006780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006784:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006788:	e9d3 3400 	ldrd	r3, r4, [r3]
 800678c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006790:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006794:	d016      	beq.n	80067c4 <_dtoa_r+0x374>
 8006796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800679a:	4b93      	ldr	r3, [pc, #588]	; (80069e8 <_dtoa_r+0x598>)
 800679c:	2703      	movs	r7, #3
 800679e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067a2:	f7f9 ffc3 	bl	800072c <__aeabi_ddiv>
 80067a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067aa:	f004 040f 	and.w	r4, r4, #15
 80067ae:	4e8e      	ldr	r6, [pc, #568]	; (80069e8 <_dtoa_r+0x598>)
 80067b0:	b954      	cbnz	r4, 80067c8 <_dtoa_r+0x378>
 80067b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ba:	f7f9 ffb7 	bl	800072c <__aeabi_ddiv>
 80067be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067c2:	e029      	b.n	8006818 <_dtoa_r+0x3c8>
 80067c4:	2702      	movs	r7, #2
 80067c6:	e7f2      	b.n	80067ae <_dtoa_r+0x35e>
 80067c8:	07e1      	lsls	r1, r4, #31
 80067ca:	d508      	bpl.n	80067de <_dtoa_r+0x38e>
 80067cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067dc:	3701      	adds	r7, #1
 80067de:	1064      	asrs	r4, r4, #1
 80067e0:	3608      	adds	r6, #8
 80067e2:	e7e5      	b.n	80067b0 <_dtoa_r+0x360>
 80067e4:	f000 80a5 	beq.w	8006932 <_dtoa_r+0x4e2>
 80067e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067ec:	f1cb 0400 	rsb	r4, fp, #0
 80067f0:	4b7c      	ldr	r3, [pc, #496]	; (80069e4 <_dtoa_r+0x594>)
 80067f2:	f004 020f 	and.w	r2, r4, #15
 80067f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 fe6b 	bl	80004d8 <__aeabi_dmul>
 8006802:	2702      	movs	r7, #2
 8006804:	2300      	movs	r3, #0
 8006806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800680a:	4e77      	ldr	r6, [pc, #476]	; (80069e8 <_dtoa_r+0x598>)
 800680c:	1124      	asrs	r4, r4, #4
 800680e:	2c00      	cmp	r4, #0
 8006810:	f040 8084 	bne.w	800691c <_dtoa_r+0x4cc>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1d2      	bne.n	80067be <_dtoa_r+0x36e>
 8006818:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800681c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 8087 	beq.w	8006936 <_dtoa_r+0x4e6>
 8006828:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800682c:	2200      	movs	r2, #0
 800682e:	4b6f      	ldr	r3, [pc, #444]	; (80069ec <_dtoa_r+0x59c>)
 8006830:	f7fa f8c4 	bl	80009bc <__aeabi_dcmplt>
 8006834:	2800      	cmp	r0, #0
 8006836:	d07e      	beq.n	8006936 <_dtoa_r+0x4e6>
 8006838:	9b08      	ldr	r3, [sp, #32]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d07b      	beq.n	8006936 <_dtoa_r+0x4e6>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dd38      	ble.n	80068b6 <_dtoa_r+0x466>
 8006844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006848:	2200      	movs	r2, #0
 800684a:	4b69      	ldr	r3, [pc, #420]	; (80069f0 <_dtoa_r+0x5a0>)
 800684c:	f7f9 fe44 	bl	80004d8 <__aeabi_dmul>
 8006850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006854:	9c06      	ldr	r4, [sp, #24]
 8006856:	f10b 38ff 	add.w	r8, fp, #4294967295
 800685a:	3701      	adds	r7, #1
 800685c:	4638      	mov	r0, r7
 800685e:	f7f9 fdd1 	bl	8000404 <__aeabi_i2d>
 8006862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006866:	f7f9 fe37 	bl	80004d8 <__aeabi_dmul>
 800686a:	2200      	movs	r2, #0
 800686c:	4b61      	ldr	r3, [pc, #388]	; (80069f4 <_dtoa_r+0x5a4>)
 800686e:	f7f9 fc7d 	bl	800016c <__adddf3>
 8006872:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006876:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800687a:	9611      	str	r6, [sp, #68]	; 0x44
 800687c:	2c00      	cmp	r4, #0
 800687e:	d15d      	bne.n	800693c <_dtoa_r+0x4ec>
 8006880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006884:	2200      	movs	r2, #0
 8006886:	4b5c      	ldr	r3, [pc, #368]	; (80069f8 <_dtoa_r+0x5a8>)
 8006888:	f7f9 fc6e 	bl	8000168 <__aeabi_dsub>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006894:	4633      	mov	r3, r6
 8006896:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006898:	f7fa f8ae 	bl	80009f8 <__aeabi_dcmpgt>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 8295 	bne.w	8006dcc <_dtoa_r+0x97c>
 80068a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068ac:	f7fa f886 	bl	80009bc <__aeabi_dcmplt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	f040 8289 	bne.w	8006dc8 <_dtoa_r+0x978>
 80068b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f2c0 8151 	blt.w	8006b68 <_dtoa_r+0x718>
 80068c6:	f1bb 0f0e 	cmp.w	fp, #14
 80068ca:	f300 814d 	bgt.w	8006b68 <_dtoa_r+0x718>
 80068ce:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <_dtoa_r+0x594>)
 80068d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f280 80da 	bge.w	8006a98 <_dtoa_r+0x648>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f300 80d6 	bgt.w	8006a98 <_dtoa_r+0x648>
 80068ec:	f040 826b 	bne.w	8006dc6 <_dtoa_r+0x976>
 80068f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f4:	2200      	movs	r2, #0
 80068f6:	4b40      	ldr	r3, [pc, #256]	; (80069f8 <_dtoa_r+0x5a8>)
 80068f8:	f7f9 fdee 	bl	80004d8 <__aeabi_dmul>
 80068fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006900:	f7fa f870 	bl	80009e4 <__aeabi_dcmpge>
 8006904:	9c08      	ldr	r4, [sp, #32]
 8006906:	4626      	mov	r6, r4
 8006908:	2800      	cmp	r0, #0
 800690a:	f040 8241 	bne.w	8006d90 <_dtoa_r+0x940>
 800690e:	2331      	movs	r3, #49	; 0x31
 8006910:	9f03      	ldr	r7, [sp, #12]
 8006912:	f10b 0b01 	add.w	fp, fp, #1
 8006916:	f807 3b01 	strb.w	r3, [r7], #1
 800691a:	e23d      	b.n	8006d98 <_dtoa_r+0x948>
 800691c:	07e2      	lsls	r2, r4, #31
 800691e:	d505      	bpl.n	800692c <_dtoa_r+0x4dc>
 8006920:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	2301      	movs	r3, #1
 800692a:	3701      	adds	r7, #1
 800692c:	1064      	asrs	r4, r4, #1
 800692e:	3608      	adds	r6, #8
 8006930:	e76d      	b.n	800680e <_dtoa_r+0x3be>
 8006932:	2702      	movs	r7, #2
 8006934:	e770      	b.n	8006818 <_dtoa_r+0x3c8>
 8006936:	46d8      	mov	r8, fp
 8006938:	9c08      	ldr	r4, [sp, #32]
 800693a:	e78f      	b.n	800685c <_dtoa_r+0x40c>
 800693c:	9903      	ldr	r1, [sp, #12]
 800693e:	4b29      	ldr	r3, [pc, #164]	; (80069e4 <_dtoa_r+0x594>)
 8006940:	4421      	add	r1, r4
 8006942:	9112      	str	r1, [sp, #72]	; 0x48
 8006944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006946:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800694a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800694e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006952:	2900      	cmp	r1, #0
 8006954:	d054      	beq.n	8006a00 <_dtoa_r+0x5b0>
 8006956:	2000      	movs	r0, #0
 8006958:	4928      	ldr	r1, [pc, #160]	; (80069fc <_dtoa_r+0x5ac>)
 800695a:	f7f9 fee7 	bl	800072c <__aeabi_ddiv>
 800695e:	463b      	mov	r3, r7
 8006960:	4632      	mov	r2, r6
 8006962:	f7f9 fc01 	bl	8000168 <__aeabi_dsub>
 8006966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800696a:	9f03      	ldr	r7, [sp, #12]
 800696c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006970:	f7fa f862 	bl	8000a38 <__aeabi_d2iz>
 8006974:	4604      	mov	r4, r0
 8006976:	f7f9 fd45 	bl	8000404 <__aeabi_i2d>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006982:	f7f9 fbf1 	bl	8000168 <__aeabi_dsub>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	3430      	adds	r4, #48	; 0x30
 800698c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006994:	f807 4b01 	strb.w	r4, [r7], #1
 8006998:	f7fa f810 	bl	80009bc <__aeabi_dcmplt>
 800699c:	2800      	cmp	r0, #0
 800699e:	d173      	bne.n	8006a88 <_dtoa_r+0x638>
 80069a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a4:	2000      	movs	r0, #0
 80069a6:	4911      	ldr	r1, [pc, #68]	; (80069ec <_dtoa_r+0x59c>)
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069b0:	f7fa f804 	bl	80009bc <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f040 80b6 	bne.w	8006b26 <_dtoa_r+0x6d6>
 80069ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069bc:	429f      	cmp	r7, r3
 80069be:	f43f af7a 	beq.w	80068b6 <_dtoa_r+0x466>
 80069c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069c6:	2200      	movs	r2, #0
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <_dtoa_r+0x5a0>)
 80069ca:	f7f9 fd85 	bl	80004d8 <__aeabi_dmul>
 80069ce:	2200      	movs	r2, #0
 80069d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <_dtoa_r+0x5a0>)
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e2:	e7c3      	b.n	800696c <_dtoa_r+0x51c>
 80069e4:	08008380 	.word	0x08008380
 80069e8:	08008358 	.word	0x08008358
 80069ec:	3ff00000 	.word	0x3ff00000
 80069f0:	40240000 	.word	0x40240000
 80069f4:	401c0000 	.word	0x401c0000
 80069f8:	40140000 	.word	0x40140000
 80069fc:	3fe00000 	.word	0x3fe00000
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fd68 	bl	80004d8 <__aeabi_dmul>
 8006a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a0e:	9c03      	ldr	r4, [sp, #12]
 8006a10:	9314      	str	r3, [sp, #80]	; 0x50
 8006a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a16:	f7fa f80f 	bl	8000a38 <__aeabi_d2iz>
 8006a1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a1c:	f7f9 fcf2 	bl	8000404 <__aeabi_i2d>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a28:	f7f9 fb9e 	bl	8000168 <__aeabi_dsub>
 8006a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a2e:	4606      	mov	r6, r0
 8006a30:	3330      	adds	r3, #48	; 0x30
 8006a32:	f804 3b01 	strb.w	r3, [r4], #1
 8006a36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a38:	460f      	mov	r7, r1
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	d124      	bne.n	8006a8c <_dtoa_r+0x63c>
 8006a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a46:	4baf      	ldr	r3, [pc, #700]	; (8006d04 <_dtoa_r+0x8b4>)
 8006a48:	f7f9 fb90 	bl	800016c <__adddf3>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7f9 ffd0 	bl	80009f8 <__aeabi_dcmpgt>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d163      	bne.n	8006b24 <_dtoa_r+0x6d4>
 8006a5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a60:	2000      	movs	r0, #0
 8006a62:	49a8      	ldr	r1, [pc, #672]	; (8006d04 <_dtoa_r+0x8b4>)
 8006a64:	f7f9 fb80 	bl	8000168 <__aeabi_dsub>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 ffa4 	bl	80009bc <__aeabi_dcmplt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f43f af1e 	beq.w	80068b6 <_dtoa_r+0x466>
 8006a7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a7c:	1e7b      	subs	r3, r7, #1
 8006a7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006a80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d0f8      	beq.n	8006a7a <_dtoa_r+0x62a>
 8006a88:	46c3      	mov	fp, r8
 8006a8a:	e03b      	b.n	8006b04 <_dtoa_r+0x6b4>
 8006a8c:	4b9e      	ldr	r3, [pc, #632]	; (8006d08 <_dtoa_r+0x8b8>)
 8006a8e:	f7f9 fd23 	bl	80004d8 <__aeabi_dmul>
 8006a92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a96:	e7bc      	b.n	8006a12 <_dtoa_r+0x5c2>
 8006a98:	9f03      	ldr	r7, [sp, #12]
 8006a9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	f7f9 fe41 	bl	800072c <__aeabi_ddiv>
 8006aaa:	f7f9 ffc5 	bl	8000a38 <__aeabi_d2iz>
 8006aae:	4604      	mov	r4, r0
 8006ab0:	f7f9 fca8 	bl	8000404 <__aeabi_i2d>
 8006ab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ab8:	f7f9 fd0e 	bl	80004d8 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	f7f9 fb50 	bl	8000168 <__aeabi_dsub>
 8006ac8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006acc:	f807 6b01 	strb.w	r6, [r7], #1
 8006ad0:	9e03      	ldr	r6, [sp, #12]
 8006ad2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006ad6:	1bbe      	subs	r6, r7, r6
 8006ad8:	45b4      	cmp	ip, r6
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	d136      	bne.n	8006b4e <_dtoa_r+0x6fe>
 8006ae0:	f7f9 fb44 	bl	800016c <__adddf3>
 8006ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4689      	mov	r9, r1
 8006aec:	f7f9 ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8006af0:	bb58      	cbnz	r0, 8006b4a <_dtoa_r+0x6fa>
 8006af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 ff55 	bl	80009a8 <__aeabi_dcmpeq>
 8006afe:	b108      	cbz	r0, 8006b04 <_dtoa_r+0x6b4>
 8006b00:	07e3      	lsls	r3, r4, #31
 8006b02:	d422      	bmi.n	8006b4a <_dtoa_r+0x6fa>
 8006b04:	4651      	mov	r1, sl
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fbc2 	bl	8007290 <_Bfree>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b10:	703b      	strb	r3, [r7, #0]
 8006b12:	f10b 0301 	add.w	r3, fp, #1
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f43f ace6 	beq.w	80064ec <_dtoa_r+0x9c>
 8006b20:	601f      	str	r7, [r3, #0]
 8006b22:	e4e3      	b.n	80064ec <_dtoa_r+0x9c>
 8006b24:	4627      	mov	r7, r4
 8006b26:	463b      	mov	r3, r7
 8006b28:	461f      	mov	r7, r3
 8006b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b2e:	2a39      	cmp	r2, #57	; 0x39
 8006b30:	d107      	bne.n	8006b42 <_dtoa_r+0x6f2>
 8006b32:	9a03      	ldr	r2, [sp, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1f7      	bne.n	8006b28 <_dtoa_r+0x6d8>
 8006b38:	2230      	movs	r2, #48	; 0x30
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	f108 0801 	add.w	r8, r8, #1
 8006b40:	700a      	strb	r2, [r1, #0]
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	3201      	adds	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	e79e      	b.n	8006a88 <_dtoa_r+0x638>
 8006b4a:	46d8      	mov	r8, fp
 8006b4c:	e7eb      	b.n	8006b26 <_dtoa_r+0x6d6>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4b6d      	ldr	r3, [pc, #436]	; (8006d08 <_dtoa_r+0x8b8>)
 8006b52:	f7f9 fcc1 	bl	80004d8 <__aeabi_dmul>
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	f7f9 ff23 	bl	80009a8 <__aeabi_dcmpeq>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d09b      	beq.n	8006a9e <_dtoa_r+0x64e>
 8006b66:	e7cd      	b.n	8006b04 <_dtoa_r+0x6b4>
 8006b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	f000 80c4 	beq.w	8006cf8 <_dtoa_r+0x8a8>
 8006b70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b72:	2a01      	cmp	r2, #1
 8006b74:	f300 80a8 	bgt.w	8006cc8 <_dtoa_r+0x878>
 8006b78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	f000 80a0 	beq.w	8006cc0 <_dtoa_r+0x870>
 8006b80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b84:	464f      	mov	r7, r9
 8006b86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	441a      	add	r2, r3
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4499      	add	r9, r3
 8006b92:	9209      	str	r2, [sp, #36]	; 0x24
 8006b94:	f000 fc32 	bl	80073fc <__i2b>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b15f      	cbz	r7, 8006bb4 <_dtoa_r+0x764>
 8006b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dd08      	ble.n	8006bb4 <_dtoa_r+0x764>
 8006ba2:	42bb      	cmp	r3, r7
 8006ba4:	bfa8      	it	ge
 8006ba6:	463b      	movge	r3, r7
 8006ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006baa:	eba9 0903 	sub.w	r9, r9, r3
 8006bae:	1aff      	subs	r7, r7, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb6:	b1f3      	cbz	r3, 8006bf6 <_dtoa_r+0x7a6>
 8006bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80a0 	beq.w	8006d00 <_dtoa_r+0x8b0>
 8006bc0:	2c00      	cmp	r4, #0
 8006bc2:	dd10      	ble.n	8006be6 <_dtoa_r+0x796>
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f000 fcd5 	bl	8007578 <__pow5mult>
 8006bce:	4652      	mov	r2, sl
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f000 fc27 	bl	8007428 <__multiply>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	4651      	mov	r1, sl
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 fb56 	bl	8007290 <_Bfree>
 8006be4:	46c2      	mov	sl, r8
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	1b1a      	subs	r2, r3, r4
 8006bea:	d004      	beq.n	8006bf6 <_dtoa_r+0x7a6>
 8006bec:	4651      	mov	r1, sl
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fcc2 	bl	8007578 <__pow5mult>
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 fbff 	bl	80073fc <__i2b>
 8006bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c00:	4604      	mov	r4, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f340 8082 	ble.w	8006d0c <_dtoa_r+0x8bc>
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 fcb3 	bl	8007578 <__pow5mult>
 8006c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c14:	4604      	mov	r4, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	dd7b      	ble.n	8006d12 <_dtoa_r+0x8c2>
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c24:	6918      	ldr	r0, [r3, #16]
 8006c26:	f000 fb9b 	bl	8007360 <__hi0bits>
 8006c2a:	f1c0 0020 	rsb	r0, r0, #32
 8006c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c30:	4418      	add	r0, r3
 8006c32:	f010 001f 	ands.w	r0, r0, #31
 8006c36:	f000 8092 	beq.w	8006d5e <_dtoa_r+0x90e>
 8006c3a:	f1c0 0320 	rsb	r3, r0, #32
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	f340 8085 	ble.w	8006d4e <_dtoa_r+0x8fe>
 8006c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c46:	f1c0 001c 	rsb	r0, r0, #28
 8006c4a:	4403      	add	r3, r0
 8006c4c:	4481      	add	r9, r0
 8006c4e:	4407      	add	r7, r0
 8006c50:	9309      	str	r3, [sp, #36]	; 0x24
 8006c52:	f1b9 0f00 	cmp.w	r9, #0
 8006c56:	dd05      	ble.n	8006c64 <_dtoa_r+0x814>
 8006c58:	4651      	mov	r1, sl
 8006c5a:	464a      	mov	r2, r9
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 fce5 	bl	800762c <__lshift>
 8006c62:	4682      	mov	sl, r0
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dd05      	ble.n	8006c76 <_dtoa_r+0x826>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fcdc 	bl	800762c <__lshift>
 8006c74:	4604      	mov	r4, r0
 8006c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d072      	beq.n	8006d62 <_dtoa_r+0x912>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4650      	mov	r0, sl
 8006c80:	f000 fd40 	bl	8007704 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	da6c      	bge.n	8006d62 <_dtoa_r+0x912>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fb20 	bl	80072d4 <__multadd>
 8006c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c96:	4682      	mov	sl, r0
 8006c98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 81ac 	beq.w	8006ffa <_dtoa_r+0xbaa>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 fb13 	bl	80072d4 <__multadd>
 8006cae:	9b06      	ldr	r3, [sp, #24]
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f300 8093 	bgt.w	8006dde <_dtoa_r+0x98e>
 8006cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	dc59      	bgt.n	8006d72 <_dtoa_r+0x922>
 8006cbe:	e08e      	b.n	8006dde <_dtoa_r+0x98e>
 8006cc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cc6:	e75d      	b.n	8006b84 <_dtoa_r+0x734>
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	1e5c      	subs	r4, r3, #1
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	bfbf      	itttt	lt
 8006cd2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cd4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006cd6:	1ae3      	sublt	r3, r4, r3
 8006cd8:	18d2      	addlt	r2, r2, r3
 8006cda:	bfa8      	it	ge
 8006cdc:	1b1c      	subge	r4, r3, r4
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	bfbe      	ittt	lt
 8006ce2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ce4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006ce6:	2400      	movlt	r4, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfb5      	itete	lt
 8006cec:	eba9 0703 	sublt.w	r7, r9, r3
 8006cf0:	464f      	movge	r7, r9
 8006cf2:	2300      	movlt	r3, #0
 8006cf4:	9b08      	ldrge	r3, [sp, #32]
 8006cf6:	e747      	b.n	8006b88 <_dtoa_r+0x738>
 8006cf8:	464f      	mov	r7, r9
 8006cfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006cfe:	e74c      	b.n	8006b9a <_dtoa_r+0x74a>
 8006d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d02:	e773      	b.n	8006bec <_dtoa_r+0x79c>
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	dc18      	bgt.n	8006d44 <_dtoa_r+0x8f4>
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	b9b3      	cbnz	r3, 8006d44 <_dtoa_r+0x8f4>
 8006d16:	9b05      	ldr	r3, [sp, #20]
 8006d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d1c:	b993      	cbnz	r3, 8006d44 <_dtoa_r+0x8f4>
 8006d1e:	9b05      	ldr	r3, [sp, #20]
 8006d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d24:	0d1b      	lsrs	r3, r3, #20
 8006d26:	051b      	lsls	r3, r3, #20
 8006d28:	b17b      	cbz	r3, 8006d4a <_dtoa_r+0x8fa>
 8006d2a:	f04f 0801 	mov.w	r8, #1
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	f109 0901 	add.w	r9, r9, #1
 8006d34:	3301      	adds	r3, #1
 8006d36:	9309      	str	r3, [sp, #36]	; 0x24
 8006d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f47f af6f 	bne.w	8006c1e <_dtoa_r+0x7ce>
 8006d40:	2001      	movs	r0, #1
 8006d42:	e774      	b.n	8006c2e <_dtoa_r+0x7de>
 8006d44:	f04f 0800 	mov.w	r8, #0
 8006d48:	e7f6      	b.n	8006d38 <_dtoa_r+0x8e8>
 8006d4a:	4698      	mov	r8, r3
 8006d4c:	e7f4      	b.n	8006d38 <_dtoa_r+0x8e8>
 8006d4e:	d080      	beq.n	8006c52 <_dtoa_r+0x802>
 8006d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d52:	331c      	adds	r3, #28
 8006d54:	441a      	add	r2, r3
 8006d56:	4499      	add	r9, r3
 8006d58:	441f      	add	r7, r3
 8006d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d5c:	e779      	b.n	8006c52 <_dtoa_r+0x802>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	e7f6      	b.n	8006d50 <_dtoa_r+0x900>
 8006d62:	9b08      	ldr	r3, [sp, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dc34      	bgt.n	8006dd2 <_dtoa_r+0x982>
 8006d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	dd31      	ble.n	8006dd2 <_dtoa_r+0x982>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	9306      	str	r3, [sp, #24]
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	b963      	cbnz	r3, 8006d90 <_dtoa_r+0x940>
 8006d76:	4621      	mov	r1, r4
 8006d78:	2205      	movs	r2, #5
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 faaa 	bl	80072d4 <__multadd>
 8006d80:	4601      	mov	r1, r0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4650      	mov	r0, sl
 8006d86:	f000 fcbd 	bl	8007704 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f73f adbf 	bgt.w	800690e <_dtoa_r+0x4be>
 8006d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d92:	9f03      	ldr	r7, [sp, #12]
 8006d94:	ea6f 0b03 	mvn.w	fp, r3
 8006d98:	f04f 0800 	mov.w	r8, #0
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fa76 	bl	8007290 <_Bfree>
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	f43f aead 	beq.w	8006b04 <_dtoa_r+0x6b4>
 8006daa:	f1b8 0f00 	cmp.w	r8, #0
 8006dae:	d005      	beq.n	8006dbc <_dtoa_r+0x96c>
 8006db0:	45b0      	cmp	r8, r6
 8006db2:	d003      	beq.n	8006dbc <_dtoa_r+0x96c>
 8006db4:	4641      	mov	r1, r8
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 fa6a 	bl	8007290 <_Bfree>
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fa66 	bl	8007290 <_Bfree>
 8006dc4:	e69e      	b.n	8006b04 <_dtoa_r+0x6b4>
 8006dc6:	2400      	movs	r4, #0
 8006dc8:	4626      	mov	r6, r4
 8006dca:	e7e1      	b.n	8006d90 <_dtoa_r+0x940>
 8006dcc:	46c3      	mov	fp, r8
 8006dce:	4626      	mov	r6, r4
 8006dd0:	e59d      	b.n	800690e <_dtoa_r+0x4be>
 8006dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80c8 	beq.w	8006f6a <_dtoa_r+0xb1a>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	9306      	str	r3, [sp, #24]
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	dd05      	ble.n	8006dee <_dtoa_r+0x99e>
 8006de2:	4631      	mov	r1, r6
 8006de4:	463a      	mov	r2, r7
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fc20 	bl	800762c <__lshift>
 8006dec:	4606      	mov	r6, r0
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	d05b      	beq.n	8006eac <_dtoa_r+0xa5c>
 8006df4:	4628      	mov	r0, r5
 8006df6:	6871      	ldr	r1, [r6, #4]
 8006df8:	f000 fa0a 	bl	8007210 <_Balloc>
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	b928      	cbnz	r0, 8006e0c <_dtoa_r+0x9bc>
 8006e00:	4602      	mov	r2, r0
 8006e02:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e06:	4b81      	ldr	r3, [pc, #516]	; (800700c <_dtoa_r+0xbbc>)
 8006e08:	f7ff bb36 	b.w	8006478 <_dtoa_r+0x28>
 8006e0c:	6932      	ldr	r2, [r6, #16]
 8006e0e:	f106 010c 	add.w	r1, r6, #12
 8006e12:	3202      	adds	r2, #2
 8006e14:	0092      	lsls	r2, r2, #2
 8006e16:	300c      	adds	r0, #12
 8006e18:	f7ff fa81 	bl	800631e <memcpy>
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4639      	mov	r1, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fc03 	bl	800762c <__lshift>
 8006e26:	46b0      	mov	r8, r6
 8006e28:	4606      	mov	r6, r0
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	9a03      	ldr	r2, [sp, #12]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	9308      	str	r3, [sp, #32]
 8006e32:	9b06      	ldr	r3, [sp, #24]
 8006e34:	4413      	add	r3, r2
 8006e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e40:	9b08      	ldr	r3, [sp, #32]
 8006e42:	4621      	mov	r1, r4
 8006e44:	3b01      	subs	r3, #1
 8006e46:	4650      	mov	r0, sl
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	f7ff fa76 	bl	800633a <quorem>
 8006e4e:	4641      	mov	r1, r8
 8006e50:	9006      	str	r0, [sp, #24]
 8006e52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e56:	4650      	mov	r0, sl
 8006e58:	f000 fc54 	bl	8007704 <__mcmp>
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	9009      	str	r0, [sp, #36]	; 0x24
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 fc6a 	bl	800773c <__mdiff>
 8006e68:	68c2      	ldr	r2, [r0, #12]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	bb02      	cbnz	r2, 8006eb0 <_dtoa_r+0xa60>
 8006e6e:	4601      	mov	r1, r0
 8006e70:	4650      	mov	r0, sl
 8006e72:	f000 fc47 	bl	8007704 <__mcmp>
 8006e76:	4602      	mov	r2, r0
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	920c      	str	r2, [sp, #48]	; 0x30
 8006e7e:	f000 fa07 	bl	8007290 <_Bfree>
 8006e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e86:	9f08      	ldr	r7, [sp, #32]
 8006e88:	ea43 0102 	orr.w	r1, r3, r2
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8e:	4319      	orrs	r1, r3
 8006e90:	d110      	bne.n	8006eb4 <_dtoa_r+0xa64>
 8006e92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e96:	d029      	beq.n	8006eec <_dtoa_r+0xa9c>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dd02      	ble.n	8006ea4 <_dtoa_r+0xa54>
 8006e9e:	9b06      	ldr	r3, [sp, #24]
 8006ea0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	f883 9000 	strb.w	r9, [r3]
 8006eaa:	e777      	b.n	8006d9c <_dtoa_r+0x94c>
 8006eac:	4630      	mov	r0, r6
 8006eae:	e7ba      	b.n	8006e26 <_dtoa_r+0x9d6>
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	e7e1      	b.n	8006e78 <_dtoa_r+0xa28>
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db04      	blt.n	8006ec4 <_dtoa_r+0xa74>
 8006eba:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	d120      	bne.n	8006f06 <_dtoa_r+0xab6>
 8006ec4:	2a00      	cmp	r2, #0
 8006ec6:	dded      	ble.n	8006ea4 <_dtoa_r+0xa54>
 8006ec8:	4651      	mov	r1, sl
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 fbad 	bl	800762c <__lshift>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	f000 fc15 	bl	8007704 <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	dc03      	bgt.n	8006ee6 <_dtoa_r+0xa96>
 8006ede:	d1e1      	bne.n	8006ea4 <_dtoa_r+0xa54>
 8006ee0:	f019 0f01 	tst.w	r9, #1
 8006ee4:	d0de      	beq.n	8006ea4 <_dtoa_r+0xa54>
 8006ee6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006eea:	d1d8      	bne.n	8006e9e <_dtoa_r+0xa4e>
 8006eec:	2339      	movs	r3, #57	; 0x39
 8006eee:	9a04      	ldr	r2, [sp, #16]
 8006ef0:	7013      	strb	r3, [r2, #0]
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	461f      	mov	r7, r3
 8006ef6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	2a39      	cmp	r2, #57	; 0x39
 8006efe:	d06b      	beq.n	8006fd8 <_dtoa_r+0xb88>
 8006f00:	3201      	adds	r2, #1
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e74a      	b.n	8006d9c <_dtoa_r+0x94c>
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	dd07      	ble.n	8006f1a <_dtoa_r+0xaca>
 8006f0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f0e:	d0ed      	beq.n	8006eec <_dtoa_r+0xa9c>
 8006f10:	9a04      	ldr	r2, [sp, #16]
 8006f12:	f109 0301 	add.w	r3, r9, #1
 8006f16:	7013      	strb	r3, [r2, #0]
 8006f18:	e740      	b.n	8006d9c <_dtoa_r+0x94c>
 8006f1a:	9b08      	ldr	r3, [sp, #32]
 8006f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f1e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d042      	beq.n	8006fac <_dtoa_r+0xb5c>
 8006f26:	4651      	mov	r1, sl
 8006f28:	2300      	movs	r3, #0
 8006f2a:	220a      	movs	r2, #10
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f9d1 	bl	80072d4 <__multadd>
 8006f32:	45b0      	cmp	r8, r6
 8006f34:	4682      	mov	sl, r0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f04f 020a 	mov.w	r2, #10
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4628      	mov	r0, r5
 8006f42:	d107      	bne.n	8006f54 <_dtoa_r+0xb04>
 8006f44:	f000 f9c6 	bl	80072d4 <__multadd>
 8006f48:	4680      	mov	r8, r0
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	9308      	str	r3, [sp, #32]
 8006f52:	e775      	b.n	8006e40 <_dtoa_r+0x9f0>
 8006f54:	f000 f9be 	bl	80072d4 <__multadd>
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	220a      	movs	r2, #10
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 f9b7 	bl	80072d4 <__multadd>
 8006f66:	4606      	mov	r6, r0
 8006f68:	e7f0      	b.n	8006f4c <_dtoa_r+0xafc>
 8006f6a:	9b08      	ldr	r3, [sp, #32]
 8006f6c:	9306      	str	r3, [sp, #24]
 8006f6e:	9f03      	ldr	r7, [sp, #12]
 8006f70:	4621      	mov	r1, r4
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7ff f9e1 	bl	800633a <quorem>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f7e:	f807 9b01 	strb.w	r9, [r7], #1
 8006f82:	1afa      	subs	r2, r7, r3
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	4293      	cmp	r3, r2
 8006f88:	dd07      	ble.n	8006f9a <_dtoa_r+0xb4a>
 8006f8a:	4651      	mov	r1, sl
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	220a      	movs	r2, #10
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 f99f 	bl	80072d4 <__multadd>
 8006f96:	4682      	mov	sl, r0
 8006f98:	e7ea      	b.n	8006f70 <_dtoa_r+0xb20>
 8006f9a:	9b06      	ldr	r3, [sp, #24]
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfcc      	ite	gt
 8006fa4:	461f      	movgt	r7, r3
 8006fa6:	2701      	movle	r7, #1
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	441f      	add	r7, r3
 8006fac:	4651      	mov	r1, sl
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 fb3b 	bl	800762c <__lshift>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4682      	mov	sl, r0
 8006fba:	f000 fba3 	bl	8007704 <__mcmp>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	dc97      	bgt.n	8006ef2 <_dtoa_r+0xaa2>
 8006fc2:	d102      	bne.n	8006fca <_dtoa_r+0xb7a>
 8006fc4:	f019 0f01 	tst.w	r9, #1
 8006fc8:	d193      	bne.n	8006ef2 <_dtoa_r+0xaa2>
 8006fca:	463b      	mov	r3, r7
 8006fcc:	461f      	mov	r7, r3
 8006fce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd2:	2a30      	cmp	r2, #48	; 0x30
 8006fd4:	d0fa      	beq.n	8006fcc <_dtoa_r+0xb7c>
 8006fd6:	e6e1      	b.n	8006d9c <_dtoa_r+0x94c>
 8006fd8:	9a03      	ldr	r2, [sp, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d18a      	bne.n	8006ef4 <_dtoa_r+0xaa4>
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	f10b 0b01 	add.w	fp, fp, #1
 8006fe4:	e797      	b.n	8006f16 <_dtoa_r+0xac6>
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <_dtoa_r+0xbc0>)
 8006fe8:	f7ff ba9f 	b.w	800652a <_dtoa_r+0xda>
 8006fec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f47f aa77 	bne.w	80064e2 <_dtoa_r+0x92>
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <_dtoa_r+0xbc4>)
 8006ff6:	f7ff ba98 	b.w	800652a <_dtoa_r+0xda>
 8006ffa:	9b06      	ldr	r3, [sp, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dcb6      	bgt.n	8006f6e <_dtoa_r+0xb1e>
 8007000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007002:	2b02      	cmp	r3, #2
 8007004:	f73f aeb5 	bgt.w	8006d72 <_dtoa_r+0x922>
 8007008:	e7b1      	b.n	8006f6e <_dtoa_r+0xb1e>
 800700a:	bf00      	nop
 800700c:	080082ee 	.word	0x080082ee
 8007010:	0800824e 	.word	0x0800824e
 8007014:	08008272 	.word	0x08008272

08007018 <_free_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	2900      	cmp	r1, #0
 800701e:	d040      	beq.n	80070a2 <_free_r+0x8a>
 8007020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007024:	1f0c      	subs	r4, r1, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfb8      	it	lt
 800702a:	18e4      	addlt	r4, r4, r3
 800702c:	f000 f8e4 	bl	80071f8 <__malloc_lock>
 8007030:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <_free_r+0x8c>)
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	b933      	cbnz	r3, 8007044 <_free_r+0x2c>
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6014      	str	r4, [r2, #0]
 800703a:	4628      	mov	r0, r5
 800703c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007040:	f000 b8e0 	b.w	8007204 <__malloc_unlock>
 8007044:	42a3      	cmp	r3, r4
 8007046:	d908      	bls.n	800705a <_free_r+0x42>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	1821      	adds	r1, r4, r0
 800704c:	428b      	cmp	r3, r1
 800704e:	bf01      	itttt	eq
 8007050:	6819      	ldreq	r1, [r3, #0]
 8007052:	685b      	ldreq	r3, [r3, #4]
 8007054:	1809      	addeq	r1, r1, r0
 8007056:	6021      	streq	r1, [r4, #0]
 8007058:	e7ed      	b.n	8007036 <_free_r+0x1e>
 800705a:	461a      	mov	r2, r3
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b10b      	cbz	r3, 8007064 <_free_r+0x4c>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d9fa      	bls.n	800705a <_free_r+0x42>
 8007064:	6811      	ldr	r1, [r2, #0]
 8007066:	1850      	adds	r0, r2, r1
 8007068:	42a0      	cmp	r0, r4
 800706a:	d10b      	bne.n	8007084 <_free_r+0x6c>
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	4401      	add	r1, r0
 8007070:	1850      	adds	r0, r2, r1
 8007072:	4283      	cmp	r3, r0
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	d1e0      	bne.n	800703a <_free_r+0x22>
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	4408      	add	r0, r1
 800707e:	6010      	str	r0, [r2, #0]
 8007080:	6053      	str	r3, [r2, #4]
 8007082:	e7da      	b.n	800703a <_free_r+0x22>
 8007084:	d902      	bls.n	800708c <_free_r+0x74>
 8007086:	230c      	movs	r3, #12
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	e7d6      	b.n	800703a <_free_r+0x22>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	1821      	adds	r1, r4, r0
 8007090:	428b      	cmp	r3, r1
 8007092:	bf01      	itttt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	1809      	addeq	r1, r1, r0
 800709a:	6021      	streq	r1, [r4, #0]
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	6054      	str	r4, [r2, #4]
 80070a0:	e7cb      	b.n	800703a <_free_r+0x22>
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20002b88 	.word	0x20002b88

080070a8 <malloc>:
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <malloc+0xc>)
 80070aa:	4601      	mov	r1, r0
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f000 b823 	b.w	80070f8 <_malloc_r>
 80070b2:	bf00      	nop
 80070b4:	20000068 	.word	0x20000068

080070b8 <sbrk_aligned>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4e0e      	ldr	r6, [pc, #56]	; (80070f4 <sbrk_aligned+0x3c>)
 80070bc:	460c      	mov	r4, r1
 80070be:	6831      	ldr	r1, [r6, #0]
 80070c0:	4605      	mov	r5, r0
 80070c2:	b911      	cbnz	r1, 80070ca <sbrk_aligned+0x12>
 80070c4:	f000 fe8c 	bl	8007de0 <_sbrk_r>
 80070c8:	6030      	str	r0, [r6, #0]
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fe87 	bl	8007de0 <_sbrk_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d00a      	beq.n	80070ec <sbrk_aligned+0x34>
 80070d6:	1cc4      	adds	r4, r0, #3
 80070d8:	f024 0403 	bic.w	r4, r4, #3
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d007      	beq.n	80070f0 <sbrk_aligned+0x38>
 80070e0:	1a21      	subs	r1, r4, r0
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 fe7c 	bl	8007de0 <_sbrk_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d101      	bne.n	80070f0 <sbrk_aligned+0x38>
 80070ec:	f04f 34ff 	mov.w	r4, #4294967295
 80070f0:	4620      	mov	r0, r4
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	20002b8c 	.word	0x20002b8c

080070f8 <_malloc_r>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	1ccd      	adds	r5, r1, #3
 80070fe:	f025 0503 	bic.w	r5, r5, #3
 8007102:	3508      	adds	r5, #8
 8007104:	2d0c      	cmp	r5, #12
 8007106:	bf38      	it	cc
 8007108:	250c      	movcc	r5, #12
 800710a:	2d00      	cmp	r5, #0
 800710c:	4607      	mov	r7, r0
 800710e:	db01      	blt.n	8007114 <_malloc_r+0x1c>
 8007110:	42a9      	cmp	r1, r5
 8007112:	d905      	bls.n	8007120 <_malloc_r+0x28>
 8007114:	230c      	movs	r3, #12
 8007116:	2600      	movs	r6, #0
 8007118:	603b      	str	r3, [r7, #0]
 800711a:	4630      	mov	r0, r6
 800711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007120:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071f4 <_malloc_r+0xfc>
 8007124:	f000 f868 	bl	80071f8 <__malloc_lock>
 8007128:	f8d8 3000 	ldr.w	r3, [r8]
 800712c:	461c      	mov	r4, r3
 800712e:	bb5c      	cbnz	r4, 8007188 <_malloc_r+0x90>
 8007130:	4629      	mov	r1, r5
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ffc0 	bl	80070b8 <sbrk_aligned>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	4604      	mov	r4, r0
 800713c:	d155      	bne.n	80071ea <_malloc_r+0xf2>
 800713e:	f8d8 4000 	ldr.w	r4, [r8]
 8007142:	4626      	mov	r6, r4
 8007144:	2e00      	cmp	r6, #0
 8007146:	d145      	bne.n	80071d4 <_malloc_r+0xdc>
 8007148:	2c00      	cmp	r4, #0
 800714a:	d048      	beq.n	80071de <_malloc_r+0xe6>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	4631      	mov	r1, r6
 8007150:	4638      	mov	r0, r7
 8007152:	eb04 0903 	add.w	r9, r4, r3
 8007156:	f000 fe43 	bl	8007de0 <_sbrk_r>
 800715a:	4581      	cmp	r9, r0
 800715c:	d13f      	bne.n	80071de <_malloc_r+0xe6>
 800715e:	6821      	ldr	r1, [r4, #0]
 8007160:	4638      	mov	r0, r7
 8007162:	1a6d      	subs	r5, r5, r1
 8007164:	4629      	mov	r1, r5
 8007166:	f7ff ffa7 	bl	80070b8 <sbrk_aligned>
 800716a:	3001      	adds	r0, #1
 800716c:	d037      	beq.n	80071de <_malloc_r+0xe6>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	442b      	add	r3, r5
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	f8d8 3000 	ldr.w	r3, [r8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d038      	beq.n	80071ee <_malloc_r+0xf6>
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	42a2      	cmp	r2, r4
 8007180:	d12b      	bne.n	80071da <_malloc_r+0xe2>
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	e00f      	b.n	80071a8 <_malloc_r+0xb0>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	d41f      	bmi.n	80071ce <_malloc_r+0xd6>
 800718e:	2a0b      	cmp	r2, #11
 8007190:	d917      	bls.n	80071c2 <_malloc_r+0xca>
 8007192:	1961      	adds	r1, r4, r5
 8007194:	42a3      	cmp	r3, r4
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	6059      	strne	r1, [r3, #4]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	bf08      	it	eq
 80071a0:	f8c8 1000 	streq.w	r1, [r8]
 80071a4:	5162      	str	r2, [r4, r5]
 80071a6:	604b      	str	r3, [r1, #4]
 80071a8:	4638      	mov	r0, r7
 80071aa:	f104 060b 	add.w	r6, r4, #11
 80071ae:	f000 f829 	bl	8007204 <__malloc_unlock>
 80071b2:	f026 0607 	bic.w	r6, r6, #7
 80071b6:	1d23      	adds	r3, r4, #4
 80071b8:	1af2      	subs	r2, r6, r3
 80071ba:	d0ae      	beq.n	800711a <_malloc_r+0x22>
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	50a3      	str	r3, [r4, r2]
 80071c0:	e7ab      	b.n	800711a <_malloc_r+0x22>
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	d1dd      	bne.n	8007184 <_malloc_r+0x8c>
 80071c8:	f8c8 2000 	str.w	r2, [r8]
 80071cc:	e7ec      	b.n	80071a8 <_malloc_r+0xb0>
 80071ce:	4623      	mov	r3, r4
 80071d0:	6864      	ldr	r4, [r4, #4]
 80071d2:	e7ac      	b.n	800712e <_malloc_r+0x36>
 80071d4:	4634      	mov	r4, r6
 80071d6:	6876      	ldr	r6, [r6, #4]
 80071d8:	e7b4      	b.n	8007144 <_malloc_r+0x4c>
 80071da:	4613      	mov	r3, r2
 80071dc:	e7cc      	b.n	8007178 <_malloc_r+0x80>
 80071de:	230c      	movs	r3, #12
 80071e0:	4638      	mov	r0, r7
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	f000 f80e 	bl	8007204 <__malloc_unlock>
 80071e8:	e797      	b.n	800711a <_malloc_r+0x22>
 80071ea:	6025      	str	r5, [r4, #0]
 80071ec:	e7dc      	b.n	80071a8 <_malloc_r+0xb0>
 80071ee:	605b      	str	r3, [r3, #4]
 80071f0:	deff      	udf	#255	; 0xff
 80071f2:	bf00      	nop
 80071f4:	20002b88 	.word	0x20002b88

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__malloc_lock+0x8>)
 80071fa:	f7ff b880 	b.w	80062fe <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20002b84 	.word	0x20002b84

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__malloc_unlock+0x8>)
 8007206:	f7ff b87b 	b.w	8006300 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20002b84 	.word	0x20002b84

08007210 <_Balloc>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	69c6      	ldr	r6, [r0, #28]
 8007214:	4604      	mov	r4, r0
 8007216:	460d      	mov	r5, r1
 8007218:	b976      	cbnz	r6, 8007238 <_Balloc+0x28>
 800721a:	2010      	movs	r0, #16
 800721c:	f7ff ff44 	bl	80070a8 <malloc>
 8007220:	4602      	mov	r2, r0
 8007222:	61e0      	str	r0, [r4, #28]
 8007224:	b920      	cbnz	r0, 8007230 <_Balloc+0x20>
 8007226:	216b      	movs	r1, #107	; 0x6b
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <_Balloc+0x78>)
 800722a:	4818      	ldr	r0, [pc, #96]	; (800728c <_Balloc+0x7c>)
 800722c:	f000 fde8 	bl	8007e00 <__assert_func>
 8007230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007234:	6006      	str	r6, [r0, #0]
 8007236:	60c6      	str	r6, [r0, #12]
 8007238:	69e6      	ldr	r6, [r4, #28]
 800723a:	68f3      	ldr	r3, [r6, #12]
 800723c:	b183      	cbz	r3, 8007260 <_Balloc+0x50>
 800723e:	69e3      	ldr	r3, [r4, #28]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007246:	b9b8      	cbnz	r0, 8007278 <_Balloc+0x68>
 8007248:	2101      	movs	r1, #1
 800724a:	fa01 f605 	lsl.w	r6, r1, r5
 800724e:	1d72      	adds	r2, r6, #5
 8007250:	4620      	mov	r0, r4
 8007252:	0092      	lsls	r2, r2, #2
 8007254:	f000 fdf2 	bl	8007e3c <_calloc_r>
 8007258:	b160      	cbz	r0, 8007274 <_Balloc+0x64>
 800725a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800725e:	e00e      	b.n	800727e <_Balloc+0x6e>
 8007260:	2221      	movs	r2, #33	; 0x21
 8007262:	2104      	movs	r1, #4
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fde9 	bl	8007e3c <_calloc_r>
 800726a:	69e3      	ldr	r3, [r4, #28]
 800726c:	60f0      	str	r0, [r6, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e4      	bne.n	800723e <_Balloc+0x2e>
 8007274:	2000      	movs	r0, #0
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	6802      	ldr	r2, [r0, #0]
 800727a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800727e:	2300      	movs	r3, #0
 8007280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007284:	e7f7      	b.n	8007276 <_Balloc+0x66>
 8007286:	bf00      	nop
 8007288:	0800827f 	.word	0x0800827f
 800728c:	080082ff 	.word	0x080082ff

08007290 <_Bfree>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	69c6      	ldr	r6, [r0, #28]
 8007294:	4605      	mov	r5, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b976      	cbnz	r6, 80072b8 <_Bfree+0x28>
 800729a:	2010      	movs	r0, #16
 800729c:	f7ff ff04 	bl	80070a8 <malloc>
 80072a0:	4602      	mov	r2, r0
 80072a2:	61e8      	str	r0, [r5, #28]
 80072a4:	b920      	cbnz	r0, 80072b0 <_Bfree+0x20>
 80072a6:	218f      	movs	r1, #143	; 0x8f
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <_Bfree+0x3c>)
 80072aa:	4809      	ldr	r0, [pc, #36]	; (80072d0 <_Bfree+0x40>)
 80072ac:	f000 fda8 	bl	8007e00 <__assert_func>
 80072b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072b4:	6006      	str	r6, [r0, #0]
 80072b6:	60c6      	str	r6, [r0, #12]
 80072b8:	b13c      	cbz	r4, 80072ca <_Bfree+0x3a>
 80072ba:	69eb      	ldr	r3, [r5, #28]
 80072bc:	6862      	ldr	r2, [r4, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072c4:	6021      	str	r1, [r4, #0]
 80072c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	0800827f 	.word	0x0800827f
 80072d0:	080082ff 	.word	0x080082ff

080072d4 <__multadd>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	4607      	mov	r7, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	461e      	mov	r6, r3
 80072de:	2000      	movs	r0, #0
 80072e0:	690d      	ldr	r5, [r1, #16]
 80072e2:	f101 0c14 	add.w	ip, r1, #20
 80072e6:	f8dc 3000 	ldr.w	r3, [ip]
 80072ea:	3001      	adds	r0, #1
 80072ec:	b299      	uxth	r1, r3
 80072ee:	fb02 6101 	mla	r1, r2, r1, r6
 80072f2:	0c1e      	lsrs	r6, r3, #16
 80072f4:	0c0b      	lsrs	r3, r1, #16
 80072f6:	fb02 3306 	mla	r3, r2, r6, r3
 80072fa:	b289      	uxth	r1, r1
 80072fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007300:	4285      	cmp	r5, r0
 8007302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007306:	f84c 1b04 	str.w	r1, [ip], #4
 800730a:	dcec      	bgt.n	80072e6 <__multadd+0x12>
 800730c:	b30e      	cbz	r6, 8007352 <__multadd+0x7e>
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	42ab      	cmp	r3, r5
 8007312:	dc19      	bgt.n	8007348 <__multadd+0x74>
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4638      	mov	r0, r7
 8007318:	3101      	adds	r1, #1
 800731a:	f7ff ff79 	bl	8007210 <_Balloc>
 800731e:	4680      	mov	r8, r0
 8007320:	b928      	cbnz	r0, 800732e <__multadd+0x5a>
 8007322:	4602      	mov	r2, r0
 8007324:	21ba      	movs	r1, #186	; 0xba
 8007326:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <__multadd+0x84>)
 8007328:	480c      	ldr	r0, [pc, #48]	; (800735c <__multadd+0x88>)
 800732a:	f000 fd69 	bl	8007e00 <__assert_func>
 800732e:	6922      	ldr	r2, [r4, #16]
 8007330:	f104 010c 	add.w	r1, r4, #12
 8007334:	3202      	adds	r2, #2
 8007336:	0092      	lsls	r2, r2, #2
 8007338:	300c      	adds	r0, #12
 800733a:	f7fe fff0 	bl	800631e <memcpy>
 800733e:	4621      	mov	r1, r4
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff ffa5 	bl	8007290 <_Bfree>
 8007346:	4644      	mov	r4, r8
 8007348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800734c:	3501      	adds	r5, #1
 800734e:	615e      	str	r6, [r3, #20]
 8007350:	6125      	str	r5, [r4, #16]
 8007352:	4620      	mov	r0, r4
 8007354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007358:	080082ee 	.word	0x080082ee
 800735c:	080082ff 	.word	0x080082ff

08007360 <__hi0bits>:
 8007360:	0c02      	lsrs	r2, r0, #16
 8007362:	0412      	lsls	r2, r2, #16
 8007364:	4603      	mov	r3, r0
 8007366:	b9ca      	cbnz	r2, 800739c <__hi0bits+0x3c>
 8007368:	0403      	lsls	r3, r0, #16
 800736a:	2010      	movs	r0, #16
 800736c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007370:	bf04      	itt	eq
 8007372:	021b      	lsleq	r3, r3, #8
 8007374:	3008      	addeq	r0, #8
 8007376:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800737a:	bf04      	itt	eq
 800737c:	011b      	lsleq	r3, r3, #4
 800737e:	3004      	addeq	r0, #4
 8007380:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007384:	bf04      	itt	eq
 8007386:	009b      	lsleq	r3, r3, #2
 8007388:	3002      	addeq	r0, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	db05      	blt.n	800739a <__hi0bits+0x3a>
 800738e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007392:	f100 0001 	add.w	r0, r0, #1
 8007396:	bf08      	it	eq
 8007398:	2020      	moveq	r0, #32
 800739a:	4770      	bx	lr
 800739c:	2000      	movs	r0, #0
 800739e:	e7e5      	b.n	800736c <__hi0bits+0xc>

080073a0 <__lo0bits>:
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	4602      	mov	r2, r0
 80073a4:	f013 0007 	ands.w	r0, r3, #7
 80073a8:	d00b      	beq.n	80073c2 <__lo0bits+0x22>
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d421      	bmi.n	80073f2 <__lo0bits+0x52>
 80073ae:	0798      	lsls	r0, r3, #30
 80073b0:	bf49      	itett	mi
 80073b2:	085b      	lsrmi	r3, r3, #1
 80073b4:	089b      	lsrpl	r3, r3, #2
 80073b6:	2001      	movmi	r0, #1
 80073b8:	6013      	strmi	r3, [r2, #0]
 80073ba:	bf5c      	itt	pl
 80073bc:	2002      	movpl	r0, #2
 80073be:	6013      	strpl	r3, [r2, #0]
 80073c0:	4770      	bx	lr
 80073c2:	b299      	uxth	r1, r3
 80073c4:	b909      	cbnz	r1, 80073ca <__lo0bits+0x2a>
 80073c6:	2010      	movs	r0, #16
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	b2d9      	uxtb	r1, r3
 80073cc:	b909      	cbnz	r1, 80073d2 <__lo0bits+0x32>
 80073ce:	3008      	adds	r0, #8
 80073d0:	0a1b      	lsrs	r3, r3, #8
 80073d2:	0719      	lsls	r1, r3, #28
 80073d4:	bf04      	itt	eq
 80073d6:	091b      	lsreq	r3, r3, #4
 80073d8:	3004      	addeq	r0, #4
 80073da:	0799      	lsls	r1, r3, #30
 80073dc:	bf04      	itt	eq
 80073de:	089b      	lsreq	r3, r3, #2
 80073e0:	3002      	addeq	r0, #2
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d403      	bmi.n	80073ee <__lo0bits+0x4e>
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f100 0001 	add.w	r0, r0, #1
 80073ec:	d003      	beq.n	80073f6 <__lo0bits+0x56>
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4770      	bx	lr
 80073f2:	2000      	movs	r0, #0
 80073f4:	4770      	bx	lr
 80073f6:	2020      	movs	r0, #32
 80073f8:	4770      	bx	lr
	...

080073fc <__i2b>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460c      	mov	r4, r1
 8007400:	2101      	movs	r1, #1
 8007402:	f7ff ff05 	bl	8007210 <_Balloc>
 8007406:	4602      	mov	r2, r0
 8007408:	b928      	cbnz	r0, 8007416 <__i2b+0x1a>
 800740a:	f240 1145 	movw	r1, #325	; 0x145
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <__i2b+0x24>)
 8007410:	4804      	ldr	r0, [pc, #16]	; (8007424 <__i2b+0x28>)
 8007412:	f000 fcf5 	bl	8007e00 <__assert_func>
 8007416:	2301      	movs	r3, #1
 8007418:	6144      	str	r4, [r0, #20]
 800741a:	6103      	str	r3, [r0, #16]
 800741c:	bd10      	pop	{r4, pc}
 800741e:	bf00      	nop
 8007420:	080082ee 	.word	0x080082ee
 8007424:	080082ff 	.word	0x080082ff

08007428 <__multiply>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4691      	mov	r9, r2
 800742e:	690a      	ldr	r2, [r1, #16]
 8007430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007434:	460c      	mov	r4, r1
 8007436:	429a      	cmp	r2, r3
 8007438:	bfbe      	ittt	lt
 800743a:	460b      	movlt	r3, r1
 800743c:	464c      	movlt	r4, r9
 800743e:	4699      	movlt	r9, r3
 8007440:	6927      	ldr	r7, [r4, #16]
 8007442:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	eb07 060a 	add.w	r6, r7, sl
 800744e:	42b3      	cmp	r3, r6
 8007450:	b085      	sub	sp, #20
 8007452:	bfb8      	it	lt
 8007454:	3101      	addlt	r1, #1
 8007456:	f7ff fedb 	bl	8007210 <_Balloc>
 800745a:	b930      	cbnz	r0, 800746a <__multiply+0x42>
 800745c:	4602      	mov	r2, r0
 800745e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007462:	4b43      	ldr	r3, [pc, #268]	; (8007570 <__multiply+0x148>)
 8007464:	4843      	ldr	r0, [pc, #268]	; (8007574 <__multiply+0x14c>)
 8007466:	f000 fccb 	bl	8007e00 <__assert_func>
 800746a:	f100 0514 	add.w	r5, r0, #20
 800746e:	462b      	mov	r3, r5
 8007470:	2200      	movs	r2, #0
 8007472:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007476:	4543      	cmp	r3, r8
 8007478:	d321      	bcc.n	80074be <__multiply+0x96>
 800747a:	f104 0314 	add.w	r3, r4, #20
 800747e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007482:	f109 0314 	add.w	r3, r9, #20
 8007486:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800748a:	9202      	str	r2, [sp, #8]
 800748c:	1b3a      	subs	r2, r7, r4
 800748e:	3a15      	subs	r2, #21
 8007490:	f022 0203 	bic.w	r2, r2, #3
 8007494:	3204      	adds	r2, #4
 8007496:	f104 0115 	add.w	r1, r4, #21
 800749a:	428f      	cmp	r7, r1
 800749c:	bf38      	it	cc
 800749e:	2204      	movcc	r2, #4
 80074a0:	9201      	str	r2, [sp, #4]
 80074a2:	9a02      	ldr	r2, [sp, #8]
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d80c      	bhi.n	80074c4 <__multiply+0x9c>
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	dd03      	ble.n	80074b6 <__multiply+0x8e>
 80074ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d05a      	beq.n	800756c <__multiply+0x144>
 80074b6:	6106      	str	r6, [r0, #16]
 80074b8:	b005      	add	sp, #20
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074be:	f843 2b04 	str.w	r2, [r3], #4
 80074c2:	e7d8      	b.n	8007476 <__multiply+0x4e>
 80074c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80074c8:	f1ba 0f00 	cmp.w	sl, #0
 80074cc:	d023      	beq.n	8007516 <__multiply+0xee>
 80074ce:	46a9      	mov	r9, r5
 80074d0:	f04f 0c00 	mov.w	ip, #0
 80074d4:	f104 0e14 	add.w	lr, r4, #20
 80074d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074dc:	f8d9 1000 	ldr.w	r1, [r9]
 80074e0:	fa1f fb82 	uxth.w	fp, r2
 80074e4:	b289      	uxth	r1, r1
 80074e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80074ea:	4461      	add	r1, ip
 80074ec:	f8d9 c000 	ldr.w	ip, [r9]
 80074f0:	0c12      	lsrs	r2, r2, #16
 80074f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074f6:	fb0a c202 	mla	r2, sl, r2, ip
 80074fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074fe:	b289      	uxth	r1, r1
 8007500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007504:	4577      	cmp	r7, lr
 8007506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800750a:	f849 1b04 	str.w	r1, [r9], #4
 800750e:	d8e3      	bhi.n	80074d8 <__multiply+0xb0>
 8007510:	9a01      	ldr	r2, [sp, #4]
 8007512:	f845 c002 	str.w	ip, [r5, r2]
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	d021      	beq.n	8007568 <__multiply+0x140>
 8007524:	46ae      	mov	lr, r5
 8007526:	f04f 0a00 	mov.w	sl, #0
 800752a:	6829      	ldr	r1, [r5, #0]
 800752c:	f104 0c14 	add.w	ip, r4, #20
 8007530:	f8bc b000 	ldrh.w	fp, [ip]
 8007534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007538:	b289      	uxth	r1, r1
 800753a:	fb09 220b 	mla	r2, r9, fp, r2
 800753e:	4452      	add	r2, sl
 8007540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007544:	f84e 1b04 	str.w	r1, [lr], #4
 8007548:	f85c 1b04 	ldr.w	r1, [ip], #4
 800754c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007550:	f8be 1000 	ldrh.w	r1, [lr]
 8007554:	4567      	cmp	r7, ip
 8007556:	fb09 110a 	mla	r1, r9, sl, r1
 800755a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800755e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007562:	d8e5      	bhi.n	8007530 <__multiply+0x108>
 8007564:	9a01      	ldr	r2, [sp, #4]
 8007566:	50a9      	str	r1, [r5, r2]
 8007568:	3504      	adds	r5, #4
 800756a:	e79a      	b.n	80074a2 <__multiply+0x7a>
 800756c:	3e01      	subs	r6, #1
 800756e:	e79c      	b.n	80074aa <__multiply+0x82>
 8007570:	080082ee 	.word	0x080082ee
 8007574:	080082ff 	.word	0x080082ff

08007578 <__pow5mult>:
 8007578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800757c:	4615      	mov	r5, r2
 800757e:	f012 0203 	ands.w	r2, r2, #3
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	d007      	beq.n	8007598 <__pow5mult+0x20>
 8007588:	4c25      	ldr	r4, [pc, #148]	; (8007620 <__pow5mult+0xa8>)
 800758a:	3a01      	subs	r2, #1
 800758c:	2300      	movs	r3, #0
 800758e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007592:	f7ff fe9f 	bl	80072d4 <__multadd>
 8007596:	4607      	mov	r7, r0
 8007598:	10ad      	asrs	r5, r5, #2
 800759a:	d03d      	beq.n	8007618 <__pow5mult+0xa0>
 800759c:	69f4      	ldr	r4, [r6, #28]
 800759e:	b97c      	cbnz	r4, 80075c0 <__pow5mult+0x48>
 80075a0:	2010      	movs	r0, #16
 80075a2:	f7ff fd81 	bl	80070a8 <malloc>
 80075a6:	4602      	mov	r2, r0
 80075a8:	61f0      	str	r0, [r6, #28]
 80075aa:	b928      	cbnz	r0, 80075b8 <__pow5mult+0x40>
 80075ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <__pow5mult+0xac>)
 80075b2:	481d      	ldr	r0, [pc, #116]	; (8007628 <__pow5mult+0xb0>)
 80075b4:	f000 fc24 	bl	8007e00 <__assert_func>
 80075b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075bc:	6004      	str	r4, [r0, #0]
 80075be:	60c4      	str	r4, [r0, #12]
 80075c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80075c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c8:	b94c      	cbnz	r4, 80075de <__pow5mult+0x66>
 80075ca:	f240 2171 	movw	r1, #625	; 0x271
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff14 	bl	80073fc <__i2b>
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	07eb      	lsls	r3, r5, #31
 80075e4:	d50a      	bpl.n	80075fc <__pow5mult+0x84>
 80075e6:	4639      	mov	r1, r7
 80075e8:	4622      	mov	r2, r4
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff1c 	bl	8007428 <__multiply>
 80075f0:	4680      	mov	r8, r0
 80075f2:	4639      	mov	r1, r7
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fe4b 	bl	8007290 <_Bfree>
 80075fa:	4647      	mov	r7, r8
 80075fc:	106d      	asrs	r5, r5, #1
 80075fe:	d00b      	beq.n	8007618 <__pow5mult+0xa0>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	b938      	cbnz	r0, 8007614 <__pow5mult+0x9c>
 8007604:	4622      	mov	r2, r4
 8007606:	4621      	mov	r1, r4
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff0d 	bl	8007428 <__multiply>
 800760e:	6020      	str	r0, [r4, #0]
 8007610:	f8c0 9000 	str.w	r9, [r0]
 8007614:	4604      	mov	r4, r0
 8007616:	e7e4      	b.n	80075e2 <__pow5mult+0x6a>
 8007618:	4638      	mov	r0, r7
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	bf00      	nop
 8007620:	08008448 	.word	0x08008448
 8007624:	0800827f 	.word	0x0800827f
 8007628:	080082ff 	.word	0x080082ff

0800762c <__lshift>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	460c      	mov	r4, r1
 8007632:	4607      	mov	r7, r0
 8007634:	4691      	mov	r9, r2
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	6849      	ldr	r1, [r1, #4]
 800763a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007644:	f108 0601 	add.w	r6, r8, #1
 8007648:	42b3      	cmp	r3, r6
 800764a:	db0b      	blt.n	8007664 <__lshift+0x38>
 800764c:	4638      	mov	r0, r7
 800764e:	f7ff fddf 	bl	8007210 <_Balloc>
 8007652:	4605      	mov	r5, r0
 8007654:	b948      	cbnz	r0, 800766a <__lshift+0x3e>
 8007656:	4602      	mov	r2, r0
 8007658:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <__lshift+0xd0>)
 800765e:	4828      	ldr	r0, [pc, #160]	; (8007700 <__lshift+0xd4>)
 8007660:	f000 fbce 	bl	8007e00 <__assert_func>
 8007664:	3101      	adds	r1, #1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	e7ee      	b.n	8007648 <__lshift+0x1c>
 800766a:	2300      	movs	r3, #0
 800766c:	f100 0114 	add.w	r1, r0, #20
 8007670:	f100 0210 	add.w	r2, r0, #16
 8007674:	4618      	mov	r0, r3
 8007676:	4553      	cmp	r3, sl
 8007678:	db33      	blt.n	80076e2 <__lshift+0xb6>
 800767a:	6920      	ldr	r0, [r4, #16]
 800767c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007680:	f104 0314 	add.w	r3, r4, #20
 8007684:	f019 091f 	ands.w	r9, r9, #31
 8007688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800768c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007690:	d02b      	beq.n	80076ea <__lshift+0xbe>
 8007692:	468a      	mov	sl, r1
 8007694:	2200      	movs	r2, #0
 8007696:	f1c9 0e20 	rsb	lr, r9, #32
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	fa00 f009 	lsl.w	r0, r0, r9
 80076a0:	4310      	orrs	r0, r2
 80076a2:	f84a 0b04 	str.w	r0, [sl], #4
 80076a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076aa:	459c      	cmp	ip, r3
 80076ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80076b0:	d8f3      	bhi.n	800769a <__lshift+0x6e>
 80076b2:	ebac 0304 	sub.w	r3, ip, r4
 80076b6:	3b15      	subs	r3, #21
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	3304      	adds	r3, #4
 80076be:	f104 0015 	add.w	r0, r4, #21
 80076c2:	4584      	cmp	ip, r0
 80076c4:	bf38      	it	cc
 80076c6:	2304      	movcc	r3, #4
 80076c8:	50ca      	str	r2, [r1, r3]
 80076ca:	b10a      	cbz	r2, 80076d0 <__lshift+0xa4>
 80076cc:	f108 0602 	add.w	r6, r8, #2
 80076d0:	3e01      	subs	r6, #1
 80076d2:	4638      	mov	r0, r7
 80076d4:	4621      	mov	r1, r4
 80076d6:	612e      	str	r6, [r5, #16]
 80076d8:	f7ff fdda 	bl	8007290 <_Bfree>
 80076dc:	4628      	mov	r0, r5
 80076de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80076e6:	3301      	adds	r3, #1
 80076e8:	e7c5      	b.n	8007676 <__lshift+0x4a>
 80076ea:	3904      	subs	r1, #4
 80076ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f0:	459c      	cmp	ip, r3
 80076f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80076f6:	d8f9      	bhi.n	80076ec <__lshift+0xc0>
 80076f8:	e7ea      	b.n	80076d0 <__lshift+0xa4>
 80076fa:	bf00      	nop
 80076fc:	080082ee 	.word	0x080082ee
 8007700:	080082ff 	.word	0x080082ff

08007704 <__mcmp>:
 8007704:	4603      	mov	r3, r0
 8007706:	690a      	ldr	r2, [r1, #16]
 8007708:	6900      	ldr	r0, [r0, #16]
 800770a:	b530      	push	{r4, r5, lr}
 800770c:	1a80      	subs	r0, r0, r2
 800770e:	d10d      	bne.n	800772c <__mcmp+0x28>
 8007710:	3314      	adds	r3, #20
 8007712:	3114      	adds	r1, #20
 8007714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800771c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007724:	4295      	cmp	r5, r2
 8007726:	d002      	beq.n	800772e <__mcmp+0x2a>
 8007728:	d304      	bcc.n	8007734 <__mcmp+0x30>
 800772a:	2001      	movs	r0, #1
 800772c:	bd30      	pop	{r4, r5, pc}
 800772e:	42a3      	cmp	r3, r4
 8007730:	d3f4      	bcc.n	800771c <__mcmp+0x18>
 8007732:	e7fb      	b.n	800772c <__mcmp+0x28>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	e7f8      	b.n	800772c <__mcmp+0x28>
	...

0800773c <__mdiff>:
 800773c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	460d      	mov	r5, r1
 8007742:	4607      	mov	r7, r0
 8007744:	4611      	mov	r1, r2
 8007746:	4628      	mov	r0, r5
 8007748:	4614      	mov	r4, r2
 800774a:	f7ff ffdb 	bl	8007704 <__mcmp>
 800774e:	1e06      	subs	r6, r0, #0
 8007750:	d111      	bne.n	8007776 <__mdiff+0x3a>
 8007752:	4631      	mov	r1, r6
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff fd5b 	bl	8007210 <_Balloc>
 800775a:	4602      	mov	r2, r0
 800775c:	b928      	cbnz	r0, 800776a <__mdiff+0x2e>
 800775e:	f240 2137 	movw	r1, #567	; 0x237
 8007762:	4b3a      	ldr	r3, [pc, #232]	; (800784c <__mdiff+0x110>)
 8007764:	483a      	ldr	r0, [pc, #232]	; (8007850 <__mdiff+0x114>)
 8007766:	f000 fb4b 	bl	8007e00 <__assert_func>
 800776a:	2301      	movs	r3, #1
 800776c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007770:	4610      	mov	r0, r2
 8007772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	bfa4      	itt	ge
 8007778:	4623      	movge	r3, r4
 800777a:	462c      	movge	r4, r5
 800777c:	4638      	mov	r0, r7
 800777e:	6861      	ldr	r1, [r4, #4]
 8007780:	bfa6      	itte	ge
 8007782:	461d      	movge	r5, r3
 8007784:	2600      	movge	r6, #0
 8007786:	2601      	movlt	r6, #1
 8007788:	f7ff fd42 	bl	8007210 <_Balloc>
 800778c:	4602      	mov	r2, r0
 800778e:	b918      	cbnz	r0, 8007798 <__mdiff+0x5c>
 8007790:	f240 2145 	movw	r1, #581	; 0x245
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <__mdiff+0x110>)
 8007796:	e7e5      	b.n	8007764 <__mdiff+0x28>
 8007798:	f102 0814 	add.w	r8, r2, #20
 800779c:	46c2      	mov	sl, r8
 800779e:	f04f 0c00 	mov.w	ip, #0
 80077a2:	6927      	ldr	r7, [r4, #16]
 80077a4:	60c6      	str	r6, [r0, #12]
 80077a6:	692e      	ldr	r6, [r5, #16]
 80077a8:	f104 0014 	add.w	r0, r4, #20
 80077ac:	f105 0914 	add.w	r9, r5, #20
 80077b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077b8:	3410      	adds	r4, #16
 80077ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077be:	f859 3b04 	ldr.w	r3, [r9], #4
 80077c2:	fa1f f18b 	uxth.w	r1, fp
 80077c6:	4461      	add	r1, ip
 80077c8:	fa1f fc83 	uxth.w	ip, r3
 80077cc:	0c1b      	lsrs	r3, r3, #16
 80077ce:	eba1 010c 	sub.w	r1, r1, ip
 80077d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077da:	b289      	uxth	r1, r1
 80077dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80077e0:	454e      	cmp	r6, r9
 80077e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077e6:	f84a 1b04 	str.w	r1, [sl], #4
 80077ea:	d8e6      	bhi.n	80077ba <__mdiff+0x7e>
 80077ec:	1b73      	subs	r3, r6, r5
 80077ee:	3b15      	subs	r3, #21
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	3515      	adds	r5, #21
 80077f6:	3304      	adds	r3, #4
 80077f8:	42ae      	cmp	r6, r5
 80077fa:	bf38      	it	cc
 80077fc:	2304      	movcc	r3, #4
 80077fe:	4418      	add	r0, r3
 8007800:	4443      	add	r3, r8
 8007802:	461e      	mov	r6, r3
 8007804:	4605      	mov	r5, r0
 8007806:	4575      	cmp	r5, lr
 8007808:	d30e      	bcc.n	8007828 <__mdiff+0xec>
 800780a:	f10e 0103 	add.w	r1, lr, #3
 800780e:	1a09      	subs	r1, r1, r0
 8007810:	f021 0103 	bic.w	r1, r1, #3
 8007814:	3803      	subs	r0, #3
 8007816:	4586      	cmp	lr, r0
 8007818:	bf38      	it	cc
 800781a:	2100      	movcc	r1, #0
 800781c:	440b      	add	r3, r1
 800781e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007822:	b189      	cbz	r1, 8007848 <__mdiff+0x10c>
 8007824:	6117      	str	r7, [r2, #16]
 8007826:	e7a3      	b.n	8007770 <__mdiff+0x34>
 8007828:	f855 8b04 	ldr.w	r8, [r5], #4
 800782c:	fa1f f188 	uxth.w	r1, r8
 8007830:	4461      	add	r1, ip
 8007832:	140c      	asrs	r4, r1, #16
 8007834:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007838:	b289      	uxth	r1, r1
 800783a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800783e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007842:	f846 1b04 	str.w	r1, [r6], #4
 8007846:	e7de      	b.n	8007806 <__mdiff+0xca>
 8007848:	3f01      	subs	r7, #1
 800784a:	e7e8      	b.n	800781e <__mdiff+0xe2>
 800784c:	080082ee 	.word	0x080082ee
 8007850:	080082ff 	.word	0x080082ff

08007854 <__d2b>:
 8007854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007856:	2101      	movs	r1, #1
 8007858:	4617      	mov	r7, r2
 800785a:	461c      	mov	r4, r3
 800785c:	9e08      	ldr	r6, [sp, #32]
 800785e:	f7ff fcd7 	bl	8007210 <_Balloc>
 8007862:	4605      	mov	r5, r0
 8007864:	b930      	cbnz	r0, 8007874 <__d2b+0x20>
 8007866:	4602      	mov	r2, r0
 8007868:	f240 310f 	movw	r1, #783	; 0x30f
 800786c:	4b22      	ldr	r3, [pc, #136]	; (80078f8 <__d2b+0xa4>)
 800786e:	4823      	ldr	r0, [pc, #140]	; (80078fc <__d2b+0xa8>)
 8007870:	f000 fac6 	bl	8007e00 <__assert_func>
 8007874:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007878:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800787c:	bb24      	cbnz	r4, 80078c8 <__d2b+0x74>
 800787e:	2f00      	cmp	r7, #0
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	d026      	beq.n	80078d2 <__d2b+0x7e>
 8007884:	4668      	mov	r0, sp
 8007886:	9700      	str	r7, [sp, #0]
 8007888:	f7ff fd8a 	bl	80073a0 <__lo0bits>
 800788c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007890:	b1e8      	cbz	r0, 80078ce <__d2b+0x7a>
 8007892:	f1c0 0320 	rsb	r3, r0, #32
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	430b      	orrs	r3, r1
 800789c:	40c2      	lsrs	r2, r0
 800789e:	616b      	str	r3, [r5, #20]
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf14      	ite	ne
 80078a8:	2102      	movne	r1, #2
 80078aa:	2101      	moveq	r1, #1
 80078ac:	61ab      	str	r3, [r5, #24]
 80078ae:	6129      	str	r1, [r5, #16]
 80078b0:	b1bc      	cbz	r4, 80078e2 <__d2b+0x8e>
 80078b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078b6:	4404      	add	r4, r0
 80078b8:	6034      	str	r4, [r6, #0]
 80078ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	6018      	str	r0, [r3, #0]
 80078c2:	4628      	mov	r0, r5
 80078c4:	b003      	add	sp, #12
 80078c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078cc:	e7d7      	b.n	800787e <__d2b+0x2a>
 80078ce:	6169      	str	r1, [r5, #20]
 80078d0:	e7e7      	b.n	80078a2 <__d2b+0x4e>
 80078d2:	a801      	add	r0, sp, #4
 80078d4:	f7ff fd64 	bl	80073a0 <__lo0bits>
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	2101      	movs	r1, #1
 80078dc:	616b      	str	r3, [r5, #20]
 80078de:	3020      	adds	r0, #32
 80078e0:	e7e5      	b.n	80078ae <__d2b+0x5a>
 80078e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80078ea:	6030      	str	r0, [r6, #0]
 80078ec:	6918      	ldr	r0, [r3, #16]
 80078ee:	f7ff fd37 	bl	8007360 <__hi0bits>
 80078f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078f6:	e7e2      	b.n	80078be <__d2b+0x6a>
 80078f8:	080082ee 	.word	0x080082ee
 80078fc:	080082ff 	.word	0x080082ff

08007900 <__sfputc_r>:
 8007900:	6893      	ldr	r3, [r2, #8]
 8007902:	b410      	push	{r4}
 8007904:	3b01      	subs	r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	6093      	str	r3, [r2, #8]
 800790a:	da07      	bge.n	800791c <__sfputc_r+0x1c>
 800790c:	6994      	ldr	r4, [r2, #24]
 800790e:	42a3      	cmp	r3, r4
 8007910:	db01      	blt.n	8007916 <__sfputc_r+0x16>
 8007912:	290a      	cmp	r1, #10
 8007914:	d102      	bne.n	800791c <__sfputc_r+0x1c>
 8007916:	bc10      	pop	{r4}
 8007918:	f7fe bb89 	b.w	800602e <__swbuf_r>
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	1c58      	adds	r0, r3, #1
 8007920:	6010      	str	r0, [r2, #0]
 8007922:	7019      	strb	r1, [r3, #0]
 8007924:	4608      	mov	r0, r1
 8007926:	bc10      	pop	{r4}
 8007928:	4770      	bx	lr

0800792a <__sfputs_r>:
 800792a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	4614      	mov	r4, r2
 8007932:	18d5      	adds	r5, r2, r3
 8007934:	42ac      	cmp	r4, r5
 8007936:	d101      	bne.n	800793c <__sfputs_r+0x12>
 8007938:	2000      	movs	r0, #0
 800793a:	e007      	b.n	800794c <__sfputs_r+0x22>
 800793c:	463a      	mov	r2, r7
 800793e:	4630      	mov	r0, r6
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	f7ff ffdc 	bl	8007900 <__sfputc_r>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d1f3      	bne.n	8007934 <__sfputs_r+0xa>
 800794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007950 <_vfiprintf_r>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	460d      	mov	r5, r1
 8007956:	4614      	mov	r4, r2
 8007958:	4698      	mov	r8, r3
 800795a:	4606      	mov	r6, r0
 800795c:	b09d      	sub	sp, #116	; 0x74
 800795e:	b118      	cbz	r0, 8007968 <_vfiprintf_r+0x18>
 8007960:	6a03      	ldr	r3, [r0, #32]
 8007962:	b90b      	cbnz	r3, 8007968 <_vfiprintf_r+0x18>
 8007964:	f7fe fa7c 	bl	8005e60 <__sinit>
 8007968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800796a:	07d9      	lsls	r1, r3, #31
 800796c:	d405      	bmi.n	800797a <_vfiprintf_r+0x2a>
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	059a      	lsls	r2, r3, #22
 8007972:	d402      	bmi.n	800797a <_vfiprintf_r+0x2a>
 8007974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007976:	f7fe fcc2 	bl	80062fe <__retarget_lock_acquire_recursive>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	071b      	lsls	r3, r3, #28
 800797e:	d501      	bpl.n	8007984 <_vfiprintf_r+0x34>
 8007980:	692b      	ldr	r3, [r5, #16]
 8007982:	b99b      	cbnz	r3, 80079ac <_vfiprintf_r+0x5c>
 8007984:	4629      	mov	r1, r5
 8007986:	4630      	mov	r0, r6
 8007988:	f7fe fb8e 	bl	80060a8 <__swsetup_r>
 800798c:	b170      	cbz	r0, 80079ac <_vfiprintf_r+0x5c>
 800798e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007990:	07dc      	lsls	r4, r3, #31
 8007992:	d504      	bpl.n	800799e <_vfiprintf_r+0x4e>
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	b01d      	add	sp, #116	; 0x74
 800799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	89ab      	ldrh	r3, [r5, #12]
 80079a0:	0598      	lsls	r0, r3, #22
 80079a2:	d4f7      	bmi.n	8007994 <_vfiprintf_r+0x44>
 80079a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079a6:	f7fe fcab 	bl	8006300 <__retarget_lock_release_recursive>
 80079aa:	e7f3      	b.n	8007994 <_vfiprintf_r+0x44>
 80079ac:	2300      	movs	r3, #0
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	2320      	movs	r3, #32
 80079b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b6:	2330      	movs	r3, #48	; 0x30
 80079b8:	f04f 0901 	mov.w	r9, #1
 80079bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007b70 <_vfiprintf_r+0x220>
 80079c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c8:	4623      	mov	r3, r4
 80079ca:	469a      	mov	sl, r3
 80079cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d0:	b10a      	cbz	r2, 80079d6 <_vfiprintf_r+0x86>
 80079d2:	2a25      	cmp	r2, #37	; 0x25
 80079d4:	d1f9      	bne.n	80079ca <_vfiprintf_r+0x7a>
 80079d6:	ebba 0b04 	subs.w	fp, sl, r4
 80079da:	d00b      	beq.n	80079f4 <_vfiprintf_r+0xa4>
 80079dc:	465b      	mov	r3, fp
 80079de:	4622      	mov	r2, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ffa1 	bl	800792a <__sfputs_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	f000 80a9 	beq.w	8007b40 <_vfiprintf_r+0x1f0>
 80079ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f0:	445a      	add	r2, fp
 80079f2:	9209      	str	r2, [sp, #36]	; 0x24
 80079f4:	f89a 3000 	ldrb.w	r3, [sl]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a1 	beq.w	8007b40 <_vfiprintf_r+0x1f0>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295
 8007a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a08:	f10a 0a01 	add.w	sl, sl, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	9307      	str	r3, [sp, #28]
 8007a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a14:	931a      	str	r3, [sp, #104]	; 0x68
 8007a16:	4654      	mov	r4, sl
 8007a18:	2205      	movs	r2, #5
 8007a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1e:	4854      	ldr	r0, [pc, #336]	; (8007b70 <_vfiprintf_r+0x220>)
 8007a20:	f7fe fc6f 	bl	8006302 <memchr>
 8007a24:	9a04      	ldr	r2, [sp, #16]
 8007a26:	b9d8      	cbnz	r0, 8007a60 <_vfiprintf_r+0x110>
 8007a28:	06d1      	lsls	r1, r2, #27
 8007a2a:	bf44      	itt	mi
 8007a2c:	2320      	movmi	r3, #32
 8007a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a32:	0713      	lsls	r3, r2, #28
 8007a34:	bf44      	itt	mi
 8007a36:	232b      	movmi	r3, #43	; 0x2b
 8007a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a40:	2b2a      	cmp	r3, #42	; 0x2a
 8007a42:	d015      	beq.n	8007a70 <_vfiprintf_r+0x120>
 8007a44:	4654      	mov	r4, sl
 8007a46:	2000      	movs	r0, #0
 8007a48:	f04f 0c0a 	mov.w	ip, #10
 8007a4c:	9a07      	ldr	r2, [sp, #28]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a54:	3b30      	subs	r3, #48	; 0x30
 8007a56:	2b09      	cmp	r3, #9
 8007a58:	d94d      	bls.n	8007af6 <_vfiprintf_r+0x1a6>
 8007a5a:	b1b0      	cbz	r0, 8007a8a <_vfiprintf_r+0x13a>
 8007a5c:	9207      	str	r2, [sp, #28]
 8007a5e:	e014      	b.n	8007a8a <_vfiprintf_r+0x13a>
 8007a60:	eba0 0308 	sub.w	r3, r0, r8
 8007a64:	fa09 f303 	lsl.w	r3, r9, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	46a2      	mov	sl, r4
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	e7d2      	b.n	8007a16 <_vfiprintf_r+0xc6>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	1d19      	adds	r1, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	9103      	str	r1, [sp, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bfbb      	ittet	lt
 8007a7c:	425b      	neglt	r3, r3
 8007a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a82:	9307      	strge	r3, [sp, #28]
 8007a84:	9307      	strlt	r3, [sp, #28]
 8007a86:	bfb8      	it	lt
 8007a88:	9204      	strlt	r2, [sp, #16]
 8007a8a:	7823      	ldrb	r3, [r4, #0]
 8007a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a8e:	d10c      	bne.n	8007aaa <_vfiprintf_r+0x15a>
 8007a90:	7863      	ldrb	r3, [r4, #1]
 8007a92:	2b2a      	cmp	r3, #42	; 0x2a
 8007a94:	d134      	bne.n	8007b00 <_vfiprintf_r+0x1b0>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	3402      	adds	r4, #2
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9203      	str	r2, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfb8      	it	lt
 8007aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b74 <_vfiprintf_r+0x224>
 8007aae:	2203      	movs	r2, #3
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	7821      	ldrb	r1, [r4, #0]
 8007ab4:	f7fe fc25 	bl	8006302 <memchr>
 8007ab8:	b138      	cbz	r0, 8007aca <_vfiprintf_r+0x17a>
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	4082      	lsls	r2, r0
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	3401      	adds	r4, #1
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ace:	2206      	movs	r2, #6
 8007ad0:	4829      	ldr	r0, [pc, #164]	; (8007b78 <_vfiprintf_r+0x228>)
 8007ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad6:	f7fe fc14 	bl	8006302 <memchr>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d03f      	beq.n	8007b5e <_vfiprintf_r+0x20e>
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <_vfiprintf_r+0x22c>)
 8007ae0:	bb1b      	cbnz	r3, 8007b2a <_vfiprintf_r+0x1da>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	3307      	adds	r3, #7
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	3308      	adds	r3, #8
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	443b      	add	r3, r7
 8007af2:	9309      	str	r3, [sp, #36]	; 0x24
 8007af4:	e768      	b.n	80079c8 <_vfiprintf_r+0x78>
 8007af6:	460c      	mov	r4, r1
 8007af8:	2001      	movs	r0, #1
 8007afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afe:	e7a6      	b.n	8007a4e <_vfiprintf_r+0xfe>
 8007b00:	2300      	movs	r3, #0
 8007b02:	f04f 0c0a 	mov.w	ip, #10
 8007b06:	4619      	mov	r1, r3
 8007b08:	3401      	adds	r4, #1
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b12:	3a30      	subs	r2, #48	; 0x30
 8007b14:	2a09      	cmp	r2, #9
 8007b16:	d903      	bls.n	8007b20 <_vfiprintf_r+0x1d0>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0c6      	beq.n	8007aaa <_vfiprintf_r+0x15a>
 8007b1c:	9105      	str	r1, [sp, #20]
 8007b1e:	e7c4      	b.n	8007aaa <_vfiprintf_r+0x15a>
 8007b20:	4604      	mov	r4, r0
 8007b22:	2301      	movs	r3, #1
 8007b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b28:	e7f0      	b.n	8007b0c <_vfiprintf_r+0x1bc>
 8007b2a:	ab03      	add	r3, sp, #12
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	462a      	mov	r2, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <_vfiprintf_r+0x230>)
 8007b34:	a904      	add	r1, sp, #16
 8007b36:	f7fd fd45 	bl	80055c4 <_printf_float>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	1c78      	adds	r0, r7, #1
 8007b3e:	d1d6      	bne.n	8007aee <_vfiprintf_r+0x19e>
 8007b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_vfiprintf_r+0x202>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_vfiprintf_r+0x202>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4e:	f7fe fbd7 	bl	8006300 <__retarget_lock_release_recursive>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	065b      	lsls	r3, r3, #25
 8007b56:	f53f af1d 	bmi.w	8007994 <_vfiprintf_r+0x44>
 8007b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b5c:	e71c      	b.n	8007998 <_vfiprintf_r+0x48>
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4630      	mov	r0, r6
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <_vfiprintf_r+0x230>)
 8007b68:	a904      	add	r1, sp, #16
 8007b6a:	f7fd ffcb 	bl	8005b04 <_printf_i>
 8007b6e:	e7e4      	b.n	8007b3a <_vfiprintf_r+0x1ea>
 8007b70:	08008454 	.word	0x08008454
 8007b74:	0800845a 	.word	0x0800845a
 8007b78:	0800845e 	.word	0x0800845e
 8007b7c:	080055c5 	.word	0x080055c5
 8007b80:	0800792b 	.word	0x0800792b

08007b84 <__sflush_r>:
 8007b84:	898a      	ldrh	r2, [r1, #12]
 8007b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b88:	4605      	mov	r5, r0
 8007b8a:	0710      	lsls	r0, r2, #28
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	d457      	bmi.n	8007c40 <__sflush_r+0xbc>
 8007b90:	684b      	ldr	r3, [r1, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc04      	bgt.n	8007ba0 <__sflush_r+0x1c>
 8007b96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc01      	bgt.n	8007ba0 <__sflush_r+0x1c>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	d0fa      	beq.n	8007b9c <__sflush_r+0x18>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bac:	682f      	ldr	r7, [r5, #0]
 8007bae:	6a21      	ldr	r1, [r4, #32]
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	d032      	beq.n	8007c1a <__sflush_r+0x96>
 8007bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	075a      	lsls	r2, r3, #29
 8007bba:	d505      	bpl.n	8007bc8 <__sflush_r+0x44>
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	1ac0      	subs	r0, r0, r3
 8007bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bc2:	b10b      	cbz	r3, 8007bc8 <__sflush_r+0x44>
 8007bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc6:	1ac0      	subs	r0, r0, r3
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4602      	mov	r2, r0
 8007bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bce:	4628      	mov	r0, r5
 8007bd0:	6a21      	ldr	r1, [r4, #32]
 8007bd2:	47b0      	blx	r6
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	d106      	bne.n	8007be8 <__sflush_r+0x64>
 8007bda:	6829      	ldr	r1, [r5, #0]
 8007bdc:	291d      	cmp	r1, #29
 8007bde:	d82b      	bhi.n	8007c38 <__sflush_r+0xb4>
 8007be0:	4a28      	ldr	r2, [pc, #160]	; (8007c84 <__sflush_r+0x100>)
 8007be2:	410a      	asrs	r2, r1
 8007be4:	07d6      	lsls	r6, r2, #31
 8007be6:	d427      	bmi.n	8007c38 <__sflush_r+0xb4>
 8007be8:	2200      	movs	r2, #0
 8007bea:	6062      	str	r2, [r4, #4]
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	04d9      	lsls	r1, r3, #19
 8007bf0:	6022      	str	r2, [r4, #0]
 8007bf2:	d504      	bpl.n	8007bfe <__sflush_r+0x7a>
 8007bf4:	1c42      	adds	r2, r0, #1
 8007bf6:	d101      	bne.n	8007bfc <__sflush_r+0x78>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b903      	cbnz	r3, 8007bfe <__sflush_r+0x7a>
 8007bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8007bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c00:	602f      	str	r7, [r5, #0]
 8007c02:	2900      	cmp	r1, #0
 8007c04:	d0ca      	beq.n	8007b9c <__sflush_r+0x18>
 8007c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c0a:	4299      	cmp	r1, r3
 8007c0c:	d002      	beq.n	8007c14 <__sflush_r+0x90>
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7ff fa02 	bl	8007018 <_free_r>
 8007c14:	2000      	movs	r0, #0
 8007c16:	6360      	str	r0, [r4, #52]	; 0x34
 8007c18:	e7c1      	b.n	8007b9e <__sflush_r+0x1a>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b0      	blx	r6
 8007c20:	1c41      	adds	r1, r0, #1
 8007c22:	d1c8      	bne.n	8007bb6 <__sflush_r+0x32>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0c5      	beq.n	8007bb6 <__sflush_r+0x32>
 8007c2a:	2b1d      	cmp	r3, #29
 8007c2c:	d001      	beq.n	8007c32 <__sflush_r+0xae>
 8007c2e:	2b16      	cmp	r3, #22
 8007c30:	d101      	bne.n	8007c36 <__sflush_r+0xb2>
 8007c32:	602f      	str	r7, [r5, #0]
 8007c34:	e7b2      	b.n	8007b9c <__sflush_r+0x18>
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3c:	81a3      	strh	r3, [r4, #12]
 8007c3e:	e7ae      	b.n	8007b9e <__sflush_r+0x1a>
 8007c40:	690f      	ldr	r7, [r1, #16]
 8007c42:	2f00      	cmp	r7, #0
 8007c44:	d0aa      	beq.n	8007b9c <__sflush_r+0x18>
 8007c46:	0793      	lsls	r3, r2, #30
 8007c48:	bf18      	it	ne
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	680e      	ldr	r6, [r1, #0]
 8007c4e:	bf08      	it	eq
 8007c50:	694b      	ldreq	r3, [r1, #20]
 8007c52:	1bf6      	subs	r6, r6, r7
 8007c54:	600f      	str	r7, [r1, #0]
 8007c56:	608b      	str	r3, [r1, #8]
 8007c58:	2e00      	cmp	r6, #0
 8007c5a:	dd9f      	ble.n	8007b9c <__sflush_r+0x18>
 8007c5c:	4633      	mov	r3, r6
 8007c5e:	463a      	mov	r2, r7
 8007c60:	4628      	mov	r0, r5
 8007c62:	6a21      	ldr	r1, [r4, #32]
 8007c64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c68:	47e0      	blx	ip
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	dc06      	bgt.n	8007c7c <__sflush_r+0xf8>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	e790      	b.n	8007b9e <__sflush_r+0x1a>
 8007c7c:	4407      	add	r7, r0
 8007c7e:	1a36      	subs	r6, r6, r0
 8007c80:	e7ea      	b.n	8007c58 <__sflush_r+0xd4>
 8007c82:	bf00      	nop
 8007c84:	dfbffffe 	.word	0xdfbffffe

08007c88 <_fflush_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	b913      	cbnz	r3, 8007c98 <_fflush_r+0x10>
 8007c92:	2500      	movs	r5, #0
 8007c94:	4628      	mov	r0, r5
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	b118      	cbz	r0, 8007ca2 <_fflush_r+0x1a>
 8007c9a:	6a03      	ldr	r3, [r0, #32]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <_fflush_r+0x1a>
 8007c9e:	f7fe f8df 	bl	8005e60 <__sinit>
 8007ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f3      	beq.n	8007c92 <_fflush_r+0xa>
 8007caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cac:	07d0      	lsls	r0, r2, #31
 8007cae:	d404      	bmi.n	8007cba <_fflush_r+0x32>
 8007cb0:	0599      	lsls	r1, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_fflush_r+0x32>
 8007cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb6:	f7fe fb22 	bl	80062fe <__retarget_lock_acquire_recursive>
 8007cba:	4628      	mov	r0, r5
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	f7ff ff61 	bl	8007b84 <__sflush_r>
 8007cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	07da      	lsls	r2, r3, #31
 8007cc8:	d4e4      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	059b      	lsls	r3, r3, #22
 8007cce:	d4e1      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cd2:	f7fe fb15 	bl	8006300 <__retarget_lock_release_recursive>
 8007cd6:	e7dd      	b.n	8007c94 <_fflush_r+0xc>

08007cd8 <__swhatbuf_r>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	460c      	mov	r4, r1
 8007cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	461e      	mov	r6, r3
 8007ce6:	b096      	sub	sp, #88	; 0x58
 8007ce8:	da0c      	bge.n	8007d04 <__swhatbuf_r+0x2c>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	2100      	movs	r1, #0
 8007cee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cf2:	bf0c      	ite	eq
 8007cf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cf8:	2340      	movne	r3, #64	; 0x40
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	6031      	str	r1, [r6, #0]
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	b016      	add	sp, #88	; 0x58
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	466a      	mov	r2, sp
 8007d06:	f000 f849 	bl	8007d9c <_fstat_r>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dbed      	blt.n	8007cea <__swhatbuf_r+0x12>
 8007d0e:	9901      	ldr	r1, [sp, #4]
 8007d10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d18:	4259      	negs	r1, r3
 8007d1a:	4159      	adcs	r1, r3
 8007d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d20:	e7eb      	b.n	8007cfa <__swhatbuf_r+0x22>

08007d22 <__smakebuf_r>:
 8007d22:	898b      	ldrh	r3, [r1, #12]
 8007d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d26:	079d      	lsls	r5, r3, #30
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	d507      	bpl.n	8007d3e <__smakebuf_r+0x1c>
 8007d2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	2301      	movs	r3, #1
 8007d38:	6163      	str	r3, [r4, #20]
 8007d3a:	b002      	add	sp, #8
 8007d3c:	bd70      	pop	{r4, r5, r6, pc}
 8007d3e:	466a      	mov	r2, sp
 8007d40:	ab01      	add	r3, sp, #4
 8007d42:	f7ff ffc9 	bl	8007cd8 <__swhatbuf_r>
 8007d46:	9900      	ldr	r1, [sp, #0]
 8007d48:	4605      	mov	r5, r0
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff f9d4 	bl	80070f8 <_malloc_r>
 8007d50:	b948      	cbnz	r0, 8007d66 <__smakebuf_r+0x44>
 8007d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d56:	059a      	lsls	r2, r3, #22
 8007d58:	d4ef      	bmi.n	8007d3a <__smakebuf_r+0x18>
 8007d5a:	f023 0303 	bic.w	r3, r3, #3
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	e7e3      	b.n	8007d2e <__smakebuf_r+0xc>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	6020      	str	r0, [r4, #0]
 8007d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	9b00      	ldr	r3, [sp, #0]
 8007d72:	6120      	str	r0, [r4, #16]
 8007d74:	6163      	str	r3, [r4, #20]
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	b15b      	cbz	r3, 8007d92 <__smakebuf_r+0x70>
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d80:	f000 f81e 	bl	8007dc0 <_isatty_r>
 8007d84:	b128      	cbz	r0, 8007d92 <__smakebuf_r+0x70>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	f043 0301 	orr.w	r3, r3, #1
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	431d      	orrs	r5, r3
 8007d96:	81a5      	strh	r5, [r4, #12]
 8007d98:	e7cf      	b.n	8007d3a <__smakebuf_r+0x18>
	...

08007d9c <_fstat_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4d06      	ldr	r5, [pc, #24]	; (8007dbc <_fstat_r+0x20>)
 8007da2:	4604      	mov	r4, r0
 8007da4:	4608      	mov	r0, r1
 8007da6:	4611      	mov	r1, r2
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	f7fa f91a 	bl	8001fe2 <_fstat>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d102      	bne.n	8007db8 <_fstat_r+0x1c>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	b103      	cbz	r3, 8007db8 <_fstat_r+0x1c>
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
 8007dba:	bf00      	nop
 8007dbc:	20002b80 	.word	0x20002b80

08007dc0 <_isatty_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4d05      	ldr	r5, [pc, #20]	; (8007ddc <_isatty_r+0x1c>)
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7fa f918 	bl	8002000 <_isatty>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_isatty_r+0x1a>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_isatty_r+0x1a>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20002b80 	.word	0x20002b80

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	2300      	movs	r3, #0
 8007de4:	4d05      	ldr	r5, [pc, #20]	; (8007dfc <_sbrk_r+0x1c>)
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa f91e 	bl	800202c <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20002b80 	.word	0x20002b80

08007e00 <__assert_func>:
 8007e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e02:	4614      	mov	r4, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <__assert_func+0x2c>)
 8007e08:	4605      	mov	r5, r0
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68d8      	ldr	r0, [r3, #12]
 8007e0e:	b14c      	cbz	r4, 8007e24 <__assert_func+0x24>
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <__assert_func+0x30>)
 8007e12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e16:	9100      	str	r1, [sp, #0]
 8007e18:	462b      	mov	r3, r5
 8007e1a:	4906      	ldr	r1, [pc, #24]	; (8007e34 <__assert_func+0x34>)
 8007e1c:	f000 f842 	bl	8007ea4 <fiprintf>
 8007e20:	f000 f852 	bl	8007ec8 <abort>
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <__assert_func+0x38>)
 8007e26:	461c      	mov	r4, r3
 8007e28:	e7f3      	b.n	8007e12 <__assert_func+0x12>
 8007e2a:	bf00      	nop
 8007e2c:	20000068 	.word	0x20000068
 8007e30:	0800846f 	.word	0x0800846f
 8007e34:	0800847c 	.word	0x0800847c
 8007e38:	080084aa 	.word	0x080084aa

08007e3c <_calloc_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e42:	b934      	cbnz	r4, 8007e52 <_calloc_r+0x16>
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7ff f957 	bl	80070f8 <_malloc_r>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <_calloc_r+0x1e>
 8007e4e:	4630      	mov	r0, r6
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
 8007e52:	220c      	movs	r2, #12
 8007e54:	2600      	movs	r6, #0
 8007e56:	6002      	str	r2, [r0, #0]
 8007e58:	e7f9      	b.n	8007e4e <_calloc_r+0x12>
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f7fe f97b 	bl	8006158 <memset>
 8007e62:	e7f4      	b.n	8007e4e <_calloc_r+0x12>

08007e64 <__ascii_mbtowc>:
 8007e64:	b082      	sub	sp, #8
 8007e66:	b901      	cbnz	r1, 8007e6a <__ascii_mbtowc+0x6>
 8007e68:	a901      	add	r1, sp, #4
 8007e6a:	b142      	cbz	r2, 8007e7e <__ascii_mbtowc+0x1a>
 8007e6c:	b14b      	cbz	r3, 8007e82 <__ascii_mbtowc+0x1e>
 8007e6e:	7813      	ldrb	r3, [r2, #0]
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	1e10      	subs	r0, r2, #0
 8007e76:	bf18      	it	ne
 8007e78:	2001      	movne	r0, #1
 8007e7a:	b002      	add	sp, #8
 8007e7c:	4770      	bx	lr
 8007e7e:	4610      	mov	r0, r2
 8007e80:	e7fb      	b.n	8007e7a <__ascii_mbtowc+0x16>
 8007e82:	f06f 0001 	mvn.w	r0, #1
 8007e86:	e7f8      	b.n	8007e7a <__ascii_mbtowc+0x16>

08007e88 <__ascii_wctomb>:
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4608      	mov	r0, r1
 8007e8c:	b141      	cbz	r1, 8007ea0 <__ascii_wctomb+0x18>
 8007e8e:	2aff      	cmp	r2, #255	; 0xff
 8007e90:	d904      	bls.n	8007e9c <__ascii_wctomb+0x14>
 8007e92:	228a      	movs	r2, #138	; 0x8a
 8007e94:	f04f 30ff 	mov.w	r0, #4294967295
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	4770      	bx	lr
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	700a      	strb	r2, [r1, #0]
 8007ea0:	4770      	bx	lr
	...

08007ea4 <fiprintf>:
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	b503      	push	{r0, r1, lr}
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	ab03      	add	r3, sp, #12
 8007eac:	4805      	ldr	r0, [pc, #20]	; (8007ec4 <fiprintf+0x20>)
 8007eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb2:	6800      	ldr	r0, [r0, #0]
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	f7ff fd4b 	bl	8007950 <_vfiprintf_r>
 8007eba:	b002      	add	sp, #8
 8007ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ec0:	b003      	add	sp, #12
 8007ec2:	4770      	bx	lr
 8007ec4:	20000068 	.word	0x20000068

08007ec8 <abort>:
 8007ec8:	2006      	movs	r0, #6
 8007eca:	b508      	push	{r3, lr}
 8007ecc:	f000 f82c 	bl	8007f28 <raise>
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	f7fa f854 	bl	8001f7e <_exit>

08007ed6 <_raise_r>:
 8007ed6:	291f      	cmp	r1, #31
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	460d      	mov	r5, r1
 8007ede:	d904      	bls.n	8007eea <_raise_r+0x14>
 8007ee0:	2316      	movs	r3, #22
 8007ee2:	6003      	str	r3, [r0, #0]
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	bd38      	pop	{r3, r4, r5, pc}
 8007eea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007eec:	b112      	cbz	r2, 8007ef4 <_raise_r+0x1e>
 8007eee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ef2:	b94b      	cbnz	r3, 8007f08 <_raise_r+0x32>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 f831 	bl	8007f5c <_getpid_r>
 8007efa:	462a      	mov	r2, r5
 8007efc:	4601      	mov	r1, r0
 8007efe:	4620      	mov	r0, r4
 8007f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f04:	f000 b818 	b.w	8007f38 <_kill_r>
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d00a      	beq.n	8007f22 <_raise_r+0x4c>
 8007f0c:	1c59      	adds	r1, r3, #1
 8007f0e:	d103      	bne.n	8007f18 <_raise_r+0x42>
 8007f10:	2316      	movs	r3, #22
 8007f12:	6003      	str	r3, [r0, #0]
 8007f14:	2001      	movs	r0, #1
 8007f16:	e7e7      	b.n	8007ee8 <_raise_r+0x12>
 8007f18:	2400      	movs	r4, #0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f20:	4798      	blx	r3
 8007f22:	2000      	movs	r0, #0
 8007f24:	e7e0      	b.n	8007ee8 <_raise_r+0x12>
	...

08007f28 <raise>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <raise+0xc>)
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f7ff bfd2 	b.w	8007ed6 <_raise_r>
 8007f32:	bf00      	nop
 8007f34:	20000068 	.word	0x20000068

08007f38 <_kill_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4d06      	ldr	r5, [pc, #24]	; (8007f58 <_kill_r+0x20>)
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	f7fa f80a 	bl	8001f5e <_kill>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d102      	bne.n	8007f54 <_kill_r+0x1c>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b103      	cbz	r3, 8007f54 <_kill_r+0x1c>
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	20002b80 	.word	0x20002b80

08007f5c <_getpid_r>:
 8007f5c:	f7f9 bff8 	b.w	8001f50 <_getpid>

08007f60 <floor>:
 8007f60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007f6c:	2e13      	cmp	r6, #19
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4607      	mov	r7, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4605      	mov	r5, r0
 8007f76:	dc32      	bgt.n	8007fde <floor+0x7e>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	da14      	bge.n	8007fa6 <floor+0x46>
 8007f7c:	a334      	add	r3, pc, #208	; (adr r3, 8008050 <floor+0xf0>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f8f3 	bl	800016c <__adddf3>
 8007f86:	2200      	movs	r2, #0
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f7f8 fd35 	bl	80009f8 <__aeabi_dcmpgt>
 8007f8e:	b138      	cbz	r0, 8007fa0 <floor+0x40>
 8007f90:	2c00      	cmp	r4, #0
 8007f92:	da56      	bge.n	8008042 <floor+0xe2>
 8007f94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007f98:	4325      	orrs	r5, r4
 8007f9a:	d055      	beq.n	8008048 <floor+0xe8>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	4c2e      	ldr	r4, [pc, #184]	; (8008058 <floor+0xf8>)
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	462f      	mov	r7, r5
 8007fa4:	e025      	b.n	8007ff2 <floor+0x92>
 8007fa6:	4a2d      	ldr	r2, [pc, #180]	; (800805c <floor+0xfc>)
 8007fa8:	fa42 f806 	asr.w	r8, r2, r6
 8007fac:	ea01 0208 	and.w	r2, r1, r8
 8007fb0:	4302      	orrs	r2, r0
 8007fb2:	d01e      	beq.n	8007ff2 <floor+0x92>
 8007fb4:	a326      	add	r3, pc, #152	; (adr r3, 8008050 <floor+0xf0>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f8d7 	bl	800016c <__adddf3>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f7f8 fd19 	bl	80009f8 <__aeabi_dcmpgt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d0ea      	beq.n	8007fa0 <floor+0x40>
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	bfbe      	ittt	lt
 8007fce:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007fd2:	4133      	asrlt	r3, r6
 8007fd4:	18e4      	addlt	r4, r4, r3
 8007fd6:	2500      	movs	r5, #0
 8007fd8:	ea24 0408 	bic.w	r4, r4, r8
 8007fdc:	e7e0      	b.n	8007fa0 <floor+0x40>
 8007fde:	2e33      	cmp	r6, #51	; 0x33
 8007fe0:	dd0b      	ble.n	8007ffa <floor+0x9a>
 8007fe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007fe6:	d104      	bne.n	8007ff2 <floor+0x92>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	f7f8 f8bf 	bl	800016c <__adddf3>
 8007fee:	4607      	mov	r7, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	f04f 38ff 	mov.w	r8, #4294967295
 8007ffe:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008002:	fa28 f802 	lsr.w	r8, r8, r2
 8008006:	ea10 0f08 	tst.w	r0, r8
 800800a:	d0f2      	beq.n	8007ff2 <floor+0x92>
 800800c:	a310      	add	r3, pc, #64	; (adr r3, 8008050 <floor+0xf0>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 f8ab 	bl	800016c <__adddf3>
 8008016:	2200      	movs	r2, #0
 8008018:	2300      	movs	r3, #0
 800801a:	f7f8 fced 	bl	80009f8 <__aeabi_dcmpgt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d0be      	beq.n	8007fa0 <floor+0x40>
 8008022:	2c00      	cmp	r4, #0
 8008024:	da0a      	bge.n	800803c <floor+0xdc>
 8008026:	2e14      	cmp	r6, #20
 8008028:	d101      	bne.n	800802e <floor+0xce>
 800802a:	3401      	adds	r4, #1
 800802c:	e006      	b.n	800803c <floor+0xdc>
 800802e:	2301      	movs	r3, #1
 8008030:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008034:	40b3      	lsls	r3, r6
 8008036:	441d      	add	r5, r3
 8008038:	42af      	cmp	r7, r5
 800803a:	d8f6      	bhi.n	800802a <floor+0xca>
 800803c:	ea25 0508 	bic.w	r5, r5, r8
 8008040:	e7ae      	b.n	8007fa0 <floor+0x40>
 8008042:	2500      	movs	r5, #0
 8008044:	462c      	mov	r4, r5
 8008046:	e7ab      	b.n	8007fa0 <floor+0x40>
 8008048:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800804c:	e7a8      	b.n	8007fa0 <floor+0x40>
 800804e:	bf00      	nop
 8008050:	8800759c 	.word	0x8800759c
 8008054:	7e37e43c 	.word	0x7e37e43c
 8008058:	bff00000 	.word	0xbff00000
 800805c:	000fffff 	.word	0x000fffff

08008060 <_init>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr

0800806c <_fini>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	bf00      	nop
 8008070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008072:	bc08      	pop	{r3}
 8008074:	469e      	mov	lr, r3
 8008076:	4770      	bx	lr
