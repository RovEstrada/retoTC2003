
TaskRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  080096d8  080096d8  000196d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a540  0800a540  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a540  0800a540  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a540  0800a540  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a544  0800a544  0001a544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a7c  200001e8  0800a730  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c64  0800a730  00022c64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bab  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003477  00000000  00000000  00031dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00035278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3d  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa27  00000000  00000000  00037135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013acc  00000000  00000000  00051b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b04  00000000  00000000  00065628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000598c  00000000  00000000  000f912c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000feab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080096bc 	.word	0x080096bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080096bc 	.word	0x080096bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <look2_binlxpw>:
/* Forward declaration for local functions */
static void EngTrModel_gear_state(const int32_T *sfEvent);
real_T look2_binlxpw(real_T u0, real_T u1, const real_T bp0[], const real_T bp1[],
                     const real_T table[], const uint32_T maxIndex[], uint32_T
                     stride)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b092      	sub	sp, #72	; 0x48
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d8e:	e9c7 2300 	strd	r2, r3, [r7]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8000d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9c:	f7ff fe18 	bl	80009d0 <__aeabi_dcmple>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d020      	beq.n	8000de8 <look2_binlxpw+0x64>
    iLeft = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8000daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000db4:	f7ff f9d8 	bl	8000168 <__aeabi_dsub>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4614      	mov	r4, r2
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff f9cb 	bl	8000168 <__aeabi_dsub>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	4629      	mov	r1, r5
 8000dda:	f7ff fca7 	bl	800072c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000de6:	e08e      	b.n	8000f06 <look2_binlxpw+0x182>
  } else if (u0 < bp0[maxIndex[0U]]) {
 8000de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000df0:	4413      	add	r3, r2
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dfa:	f7ff fddf 	bl	80009bc <__aeabi_dcmplt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d04d      	beq.n	8000ea0 <look2_binlxpw+0x11c>
    /* Binary Search */
    bpIdx = maxIndex[0U] >> 1U;
 8000e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	085b      	lsrs	r3, r3, #1
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[0U];
 8000e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8000e16:	e016      	b.n	8000e46 <look2_binlxpw+0xc2>
      if (u0 < bp0[bpIdx]) {
 8000e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e1e:	4413      	add	r3, r2
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e28:	f7ff fdc8 	bl	80009bc <__aeabi_dcmplt>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <look2_binlxpw+0xb4>
        iRght = bpIdx;
 8000e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e36:	e001      	b.n	8000e3c <look2_binlxpw+0xb8>
      } else {
        iLeft = bpIdx;
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	4413      	add	r3, r2
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8000e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d8e3      	bhi.n	8000e18 <look2_binlxpw+0x94>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e56:	4413      	add	r3, r2
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e60:	f7ff f982 	bl	8000168 <__aeabi_dsub>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4614      	mov	r4, r2
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	3301      	adds	r3, #1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e74:	4413      	add	r3, r2
 8000e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000e80:	4413      	add	r3, r2
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f7ff f96f 	bl	8000168 <__aeabi_dsub>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4620      	mov	r0, r4
 8000e90:	4629      	mov	r1, r5
 8000e92:	f7ff fc4b 	bl	800072c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000e9e:	e032      	b.n	8000f06 <look2_binlxpw+0x182>
  } else {
    iLeft = maxIndex[0U] - 1U;
 8000ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u0 - bp0[maxIndex[0U] - 1U]) / (bp0[maxIndex[0U]] - bp0[maxIndex[0U]
 8000ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000eb6:	4413      	add	r3, r2
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ec0:	f7ff f952 	bl	8000168 <__aeabi_dsub>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4614      	mov	r4, r2
 8000eca:	461d      	mov	r5, r3
 8000ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ed4:	4413      	add	r3, r2
 8000ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee8:	4413      	add	r3, r2
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff f93b 	bl	8000168 <__aeabi_dsub>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	4629      	mov	r1, r5
 8000efa:	f7ff fc17 	bl	800072c <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      - 1U]);
  }

  fractions[0U] = frac;
 8000f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  bpIndices[0U] = iLeft;
 8000f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f10:	623b      	str	r3, [r7, #32]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u1 <= bp1[0U]) {
 8000f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f1c:	f7ff fd58 	bl	80009d0 <__aeabi_dcmple>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d020      	beq.n	8000f68 <look2_binlxpw+0x1e4>
    iLeft = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[0U]) / (bp1[1U] - bp1[0U]);
 8000f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f34:	f7ff f918 	bl	8000168 <__aeabi_dsub>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f42:	3308      	adds	r3, #8
 8000f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff f90b 	bl	8000168 <__aeabi_dsub>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff fbe7 	bl	800072c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000f66:	e095      	b.n	8001094 <look2_binlxpw+0x310>
  } else if (u1 < bp1[maxIndex[1U]]) {
 8000f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f72:	4413      	add	r3, r2
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f7c:	f7ff fd1e 	bl	80009bc <__aeabi_dcmplt>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d04f      	beq.n	8001026 <look2_binlxpw+0x2a2>
    /* Binary Search */
    bpIdx = maxIndex[1U] >> 1U;
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	3304      	adds	r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	085b      	lsrs	r3, r3, #1
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    iLeft = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
    iRght = maxIndex[1U];
 8000f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (iRght - iLeft > 1U) {
 8000f9c:	e016      	b.n	8000fcc <look2_binlxpw+0x248>
      if (u1 < bp1[bpIdx]) {
 8000f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fa4:	4413      	add	r3, r2
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fae:	f7ff fd05 	bl	80009bc <__aeabi_dcmplt>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <look2_binlxpw+0x23a>
        iRght = bpIdx;
 8000fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fbc:	e001      	b.n	8000fc2 <look2_binlxpw+0x23e>
      } else {
        iLeft = bpIdx;
 8000fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8000fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc6:	4413      	add	r3, r2
 8000fc8:	085b      	lsrs	r3, r3, #1
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
    while (iRght - iLeft > 1U) {
 8000fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d8e3      	bhi.n	8000f9e <look2_binlxpw+0x21a>
    }

    frac = (u1 - bp1[iLeft]) / (bp1[iLeft + 1U] - bp1[iLeft]);
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fdc:	4413      	add	r3, r2
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fe6:	f7ff f8bf 	bl	8000168 <__aeabi_dsub>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4614      	mov	r4, r2
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001006:	4413      	add	r3, r2
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff f8ac 	bl	8000168 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fb88 	bl	800072c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001024:	e036      	b.n	8001094 <look2_binlxpw+0x310>
  } else {
    iLeft = maxIndex[1U] - 1U;
 8001026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001028:	3304      	adds	r3, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
    frac = (u1 - bp1[maxIndex[1U] - 1U]) / (bp1[maxIndex[1U]] - bp1[maxIndex[1U]
 8001030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800103a:	3b01      	subs	r3, #1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001040:	4413      	add	r3, r2
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104a:	f7ff f88d 	bl	8000168 <__aeabi_dsub>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4614      	mov	r4, r2
 8001054:	461d      	mov	r5, r3
 8001056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001060:	4413      	add	r3, r2
 8001062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001068:	3304      	adds	r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001070:	3b01      	subs	r3, #1
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001076:	4413      	add	r3, r2
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fb50 	bl	800072c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  /* Column-major Interpolation 2-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  bpIdx = iLeft * stride + bpIndices[0U];
 8001094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001098:	fb03 f202 	mul.w	r2, r3, r2
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	4413      	add	r3, r2
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  yL_1d = (table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx];
 80010a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a4:	3301      	adds	r3, #1
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010aa:	4413      	add	r3, r2
 80010ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b6:	4413      	add	r3, r2
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010cc:	f7ff fa04 	bl	80004d8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010de:	4413      	add	r3, r2
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f842 	bl	800016c <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  bpIdx += stride;
 80010f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010f4:	4413      	add	r3, r2
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  return (((table[bpIdx + 1U] - table[bpIdx]) * fractions[0U] + table[bpIdx]) -
 80010f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010fa:	3301      	adds	r3, #1
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001100:	4413      	add	r3, r2
 8001102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800110c:	4413      	add	r3, r2
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f829 	bl	8000168 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001122:	f7ff f9d9 	bl	80004d8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001134:	4413      	add	r3, r2
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f817 	bl	800016c <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800114a:	f7ff f80d 	bl	8000168 <__aeabi_dsub>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
          yL_1d) * frac + yL_1d;
 8001156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800115a:	f7ff f9bd 	bl	80004d8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800116a:	f7fe ffff 	bl	800016c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
}
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	3748      	adds	r7, #72	; 0x48
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}

0800117c <look1_binlxpw>:

real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
                     uint32_T maxIndex)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
     Extrapolation method: 'Linear'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001194:	f7ff fc1c 	bl	80009d0 <__aeabi_dcmple>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d020      	beq.n	80011e0 <look1_binlxpw+0x64>
    iLeft = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4614      	mov	r4, r2
 80011b6:	461d      	mov	r5, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3308      	adds	r3, #8
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7fe ffcf 	bl	8000168 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff faab 	bl	800072c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80011de:	e087      	b.n	80012f0 <look1_binlxpw+0x174>
  } else if (u0 < bp0[maxIndex]) {
 80011e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f0:	f7ff fbe4 	bl	80009bc <__aeabi_dcmplt>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d04b      	beq.n	8001292 <look1_binlxpw+0x116>
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 80011fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
    iLeft = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    iRght = maxIndex;
 8001204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001206:	61fb      	str	r3, [r7, #28]
    while (iRght - iLeft > 1U) {
 8001208:	e016      	b.n	8001238 <look1_binlxpw+0xbc>
      if (u0 < bp0[bpIdx]) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121a:	f7ff fbcf 	bl	80009bc <__aeabi_dcmplt>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <look1_binlxpw+0xae>
        iRght = bpIdx;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e001      	b.n	800122e <look1_binlxpw+0xb2>
      } else {
        iLeft = bpIdx;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	61bb      	str	r3, [r7, #24]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4413      	add	r3, r2
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	617b      	str	r3, [r7, #20]
    while (iRght - iLeft > 1U) {
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d8e3      	bhi.n	800120a <look1_binlxpw+0x8e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001252:	f7fe ff89 	bl	8000168 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	3301      	adds	r3, #1
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7fe ff76 	bl	8000168 <__aeabi_dsub>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff fa52 	bl	800072c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001290:	e02e      	b.n	80012f0 <look1_binlxpw+0x174>
  } else {
    iLeft = maxIndex - 1U;
 8001292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001294:	3b01      	subs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8001298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800129e:	3b01      	subs	r3, #1
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012ae:	f7fe ff5b 	bl	8000168 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80012cc:	3b01      	subs	r3, #1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7fe ff46 	bl	8000168 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7ff fa22 	bl	800072c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'portable wrapping'
   */
  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	3301      	adds	r3, #1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7fe ff2d 	bl	8000168 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800131a:	f7ff f8dd 	bl	80004d8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7fe ff1b 	bl	800016c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
}
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bdb0      	pop	{r4, r5, r7, pc}

08001344 <EngTrModel_gear_state>:

/* Function for Chart: '<Root>/ShiftLogic' */
static void EngTrModel_gear_state(const int32_T *sfEvent)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  switch (EngTrModel_DW.is_gear_state) {
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <EngTrModel_gear_state+0xf8>)
 800134e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001352:	3b01      	subs	r3, #1
 8001354:	2b03      	cmp	r3, #3
 8001356:	d86c      	bhi.n	8001432 <EngTrModel_gear_state+0xee>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <EngTrModel_gear_state+0x1c>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001371 	.word	0x08001371
 8001364:	08001391 	.word	0x08001391
 8001368:	080013af 	.word	0x080013af
 800136c:	080013e9 	.word	0x080013e9
   case EngTrModel_IN_first:
    if (*sfEvent == EngTrModel_event_UP) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d155      	bne.n	8001424 <EngTrModel_gear_state+0xe0>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 8001378:	4b30      	ldr	r3, [pc, #192]	; (800143c <EngTrModel_gear_state+0xf8>)
 800137a:	2203      	movs	r2, #3
 800137c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001380:	492f      	ldr	r1, [pc, #188]	; (8001440 <EngTrModel_gear_state+0xfc>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 800138e:	e049      	b.n	8001424 <EngTrModel_gear_state+0xe0>

   case EngTrModel_IN_fourth:
    if (*sfEvent == EngTrModel_event_DOWN) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d147      	bne.n	8001428 <EngTrModel_gear_state+0xe4>
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <EngTrModel_gear_state+0xf8>)
 800139a:	2204      	movs	r2, #4
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 80013a0:	4927      	ldr	r1, [pc, #156]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <EngTrModel_gear_state+0x100>)
 80013a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }
    break;
 80013ac:	e03c      	b.n	8001428 <EngTrModel_gear_state+0xe4>

   case EngTrModel_IN_second:
    switch (*sfEvent) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <EngTrModel_gear_state+0x8c>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d138      	bne.n	800142c <EngTrModel_gear_state+0xe8>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_third;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013bc:	2204      	movs	r2, #4
 80013be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 3.0;
 80013c2:	491f      	ldr	r1, [pc, #124]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <EngTrModel_gear_state+0x100>)
 80013ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80013ce:	e00a      	b.n	80013e6 <EngTrModel_gear_state+0xa2>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 1.0;
 80013d8:	4919      	ldr	r1, [pc, #100]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <EngTrModel_gear_state+0x104>)
 80013e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 80013e4:	bf00      	nop
    }
    break;
 80013e6:	e021      	b.n	800142c <EngTrModel_gear_state+0xe8>

   case EngTrModel_IN_third:
    switch (*sfEvent) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <EngTrModel_gear_state+0xc6>
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11d      	bne.n	8001430 <EngTrModel_gear_state+0xec>
     case EngTrModel_event_UP:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_fourth;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <EngTrModel_gear_state+0xf8>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 4.0;
 80013fc:	4910      	ldr	r1, [pc, #64]	; (8001440 <EngTrModel_gear_state+0xfc>)
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <EngTrModel_gear_state+0x108>)
 8001404:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001408:	e00b      	b.n	8001422 <EngTrModel_gear_state+0xde>

     case EngTrModel_event_DOWN:
      EngTrModel_DW.is_gear_state = EngTrModel_IN_second;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <EngTrModel_gear_state+0xf8>)
 800140c:	2203      	movs	r2, #3
 800140e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      EngTrModel_B.Gear = 2.0;
 8001412:	490b      	ldr	r1, [pc, #44]	; (8001440 <EngTrModel_gear_state+0xfc>)
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      break;
 8001420:	bf00      	nop
    }
    break;
 8001422:	e005      	b.n	8001430 <EngTrModel_gear_state+0xec>
    break;
 8001424:	bf00      	nop
 8001426:	e004      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 8001428:	bf00      	nop
 800142a:	e002      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <EngTrModel_gear_state+0xee>
    break;
 8001430:	bf00      	nop
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000238 	.word	0x20000238
 8001440:	20000208 	.word	0x20000208
 8001444:	40080000 	.word	0x40080000
 8001448:	3ff00000 	.word	0x3ff00000
 800144c:	40100000 	.word	0x40100000

08001450 <rt_powd_snf>:

real_T rt_powd_snf(real_T u0, real_T u1)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800145a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  real_T y;
  real_T tmp;
  real_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 800145e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001462:	f001 fe79 	bl	8003158 <rtIsNaN>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <rt_powd_snf+0x2a>
 800146c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001470:	f001 fe72 	bl	8003158 <rtIsNaN>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <rt_powd_snf+0x36>
    y = (rtNaN);
 800147a:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <rt_powd_snf+0x224>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001484:	e0ef      	b.n	8001666 <rt_powd_snf+0x216>
  } else {
    tmp = fabs(u0);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001496:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp_0 = fabs(u1);
 800149a:	68bc      	ldr	r4, [r7, #8]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80014a2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    if (rtIsInf(u1)) {
 80014a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014aa:	f001 fe31 	bl	8003110 <rtIsInf>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d049      	beq.n	8001548 <rt_powd_snf+0xf8>
      if (tmp == 1.0) {
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <rt_powd_snf+0x228>)
 80014ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014be:	f7ff fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <rt_powd_snf+0x84>
        y = 1.0;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <rt_powd_snf+0x228>)
 80014ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80014d2:	e0c8      	b.n	8001666 <rt_powd_snf+0x216>
      } else if (tmp > 1.0) {
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b67      	ldr	r3, [pc, #412]	; (8001678 <rt_powd_snf+0x228>)
 80014da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014de:	f7ff fa8b 	bl	80009f8 <__aeabi_dcmpgt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d017      	beq.n	8001518 <rt_powd_snf+0xc8>
        if (u1 > 0.0) {
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f4:	f7ff fa80 	bl	80009f8 <__aeabi_dcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <rt_powd_snf+0xba>
          y = (rtInf);
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <rt_powd_snf+0x22c>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001508:	e0ad      	b.n	8001666 <rt_powd_snf+0x216>
        } else {
          y = 0.0;
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001516:	e0a6      	b.n	8001666 <rt_powd_snf+0x216>
        }
      } else if (u1 > 0.0) {
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001524:	f7ff fa68 	bl	80009f8 <__aeabi_dcmpgt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <rt_powd_snf+0xec>
        y = 0.0;
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800153a:	e094      	b.n	8001666 <rt_powd_snf+0x216>
      } else {
        y = (rtInf);
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <rt_powd_snf+0x22c>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001546:	e08e      	b.n	8001666 <rt_powd_snf+0x216>
      }
    } else if (tmp_0 == 0.0) {
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001554:	f7ff fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <rt_powd_snf+0x11a>
      y = 1.0;
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <rt_powd_snf+0x228>)
 8001564:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001568:	e07d      	b.n	8001666 <rt_powd_snf+0x216>
    } else if (tmp_0 == 1.0) {
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b42      	ldr	r3, [pc, #264]	; (8001678 <rt_powd_snf+0x228>)
 8001570:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001574:	f7ff fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01b      	beq.n	80015b6 <rt_powd_snf+0x166>
      if (u1 > 0.0) {
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800158a:	f7ff fa35 	bl	80009f8 <__aeabi_dcmpgt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <rt_powd_snf+0x14e>
        y = u0;
 8001594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001598:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800159c:	e063      	b.n	8001666 <rt_powd_snf+0x216>
      } else {
        y = 1.0 / u0;
 800159e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015a2:	f04f 0000 	mov.w	r0, #0
 80015a6:	4934      	ldr	r1, [pc, #208]	; (8001678 <rt_powd_snf+0x228>)
 80015a8:	f7ff f8c0 	bl	800072c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015b4:	e057      	b.n	8001666 <rt_powd_snf+0x216>
      }
    } else if (u1 == 2.0) {
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c2:	f7ff f9f1 	bl	80009a8 <__aeabi_dcmpeq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <rt_powd_snf+0x192>
      y = u0 * u0;
 80015cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d4:	f7fe ff80 	bl	80004d8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80015e0:	e041      	b.n	8001666 <rt_powd_snf+0x216>
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <rt_powd_snf+0x230>)
 80015e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ec:	f7ff f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d011      	beq.n	800161a <rt_powd_snf+0x1ca>
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001602:	f7ff f9ef 	bl	80009e4 <__aeabi_dcmpge>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <rt_powd_snf+0x1ca>
      y = sqrt(u0);
 800160c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001610:	f007 f90e 	bl	8008830 <sqrt>
 8001614:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001618:	e025      	b.n	8001666 <rt_powd_snf+0x216>
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001626:	f7ff f9c9 	bl	80009bc <__aeabi_dcmplt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <rt_powd_snf+0x206>
 8001630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001634:	f007 fa00 	bl	8008a38 <floor>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001640:	f7ff f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <rt_powd_snf+0x206>
      y = (rtNaN);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <rt_powd_snf+0x224>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001654:	e007      	b.n	8001666 <rt_powd_snf+0x216>
    } else {
      y = pow(u0, u1);
 8001656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800165a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165e:	f007 f87f 	bl	8008760 <pow>
 8001662:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    }
  }

  return y;
 8001666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	3730      	adds	r7, #48	; 0x30
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	20000568 	.word	0x20000568
 8001678:	3ff00000 	.word	0x3ff00000
 800167c:	20000558 	.word	0x20000558
 8001680:	3fe00000 	.word	0x3fe00000
 8001684:	00000000 	.word	0x00000000

08001688 <EngTrModel_step>:

/* Model step function */
void EngTrModel_step(void)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af06      	add	r7, sp, #24
  int32_T sfEvent;
  real_T InterpDown;
  real_T InterpUp;

  /* DiscreteIntegrator: '<S1>/Discrete-Time Integrator' */
  EngTrModel_B.EngineRPM = EngTrModel_DW.DiscreteTimeIntegrator_DSTATE;
 800168e:	4b8c      	ldr	r3, [pc, #560]	; (80018c0 <EngTrModel_step+0x238>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	498b      	ldr	r1, [pc, #556]	; (80018c4 <EngTrModel_step+0x23c>)
 8001696:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/EngineSpeed' */
  EngTrModel_Y.EngineSpeed = EngTrModel_B.EngineRPM;
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <EngTrModel_step+0x23c>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	4989      	ldr	r1, [pc, #548]	; (80018c8 <EngTrModel_step+0x240>)
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S8>/ToLinearSpeed'
   */
  /* Unit Conversion - from: ft/min to: mph
     Expression: output = (0.0113636*input) + (0) */
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80016a6:	4b86      	ldr	r3, [pc, #536]	; (80018c0 <EngTrModel_step+0x238>)
 80016a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80016ac:	a380      	add	r3, pc, #512	; (adr r3, 80018b0 <EngTrModel_step+0x228>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ff11 	bl	80004d8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
    EngTrModel_DW.WheelSpeed_DSTATE * 0.011363636363636364;
 80016be:	a37e      	add	r3, pc, #504	; (adr r3, 80018b8 <EngTrModel_step+0x230>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff08 	bl	80004d8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
  EngTrModel_B.VehicleSpeed = 6.2831853071795862 *
 80016cc:	497d      	ldr	r1, [pc, #500]	; (80018c4 <EngTrModel_step+0x23c>)
 80016ce:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Chart: '<Root>/ShiftLogic' */
  sfEvent = EngTrModel_CALL_EVENT;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	607b      	str	r3, [r7, #4]
  if (EngTrModel_DW.temporalCounter_i1 < MAX_uint32_T) {
 80016d8:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <EngTrModel_step+0x238>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d004      	beq.n	80016ec <EngTrModel_step+0x64>
    EngTrModel_DW.temporalCounter_i1++;
 80016e2:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <EngTrModel_step+0x238>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <EngTrModel_step+0x238>)
 80016ea:	61d3      	str	r3, [r2, #28]
  }

  if (EngTrModel_DW.is_active_c1_EngTrModel == 0U) {
 80016ec:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <EngTrModel_step+0x238>)
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <EngTrModel_step+0xa4>
    EngTrModel_DW.is_active_c1_EngTrModel = 1U;
 80016f6:	4b72      	ldr	r3, [pc, #456]	; (80018c0 <EngTrModel_step+0x238>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
    EngTrModel_DW.is_active_gear_state = 1U;
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <EngTrModel_step+0x238>)
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    EngTrModel_DW.is_gear_state = EngTrModel_IN_first;
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <EngTrModel_step+0x238>)
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    EngTrModel_B.Gear = 1.0;
 800170e:	496d      	ldr	r1, [pc, #436]	; (80018c4 <EngTrModel_step+0x23c>)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b6d      	ldr	r3, [pc, #436]	; (80018cc <EngTrModel_step+0x244>)
 8001716:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    EngTrModel_DW.is_active_selection_state = 1U;
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <EngTrModel_step+0x238>)
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <EngTrModel_step+0x238>)
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800172a:	e0e4      	b.n	80018f6 <EngTrModel_step+0x26e>
  } else {
    if (EngTrModel_DW.is_active_gear_state != 0U) {
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <EngTrModel_step+0x238>)
 800172e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <EngTrModel_step+0xb6>
      EngTrModel_gear_state(&sfEvent);
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe03 	bl	8001344 <EngTrModel_gear_state>
    }

    if (EngTrModel_DW.is_active_selection_state != 0U) {
 800173e:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <EngTrModel_step+0x238>)
 8001740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80d6 	beq.w	80018f6 <EngTrModel_step+0x26e>
      /* Outputs for Function Call SubSystem: '<S2>/ComputeThreshold' */
      /* Lookup_n-D: '<S5>/InterpDown' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpDown = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 800174a:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <EngTrModel_step+0x248>)
 800174c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001750:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <EngTrModel_step+0x23c>)
 8001752:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001756:	2406      	movs	r4, #6
 8001758:	9404      	str	r4, [sp, #16]
 800175a:	4c5e      	ldr	r4, [pc, #376]	; (80018d4 <EngTrModel_step+0x24c>)
 800175c:	9403      	str	r4, [sp, #12]
 800175e:	4c5e      	ldr	r4, [pc, #376]	; (80018d8 <EngTrModel_step+0x250>)
 8001760:	9402      	str	r4, [sp, #8]
 8001762:	4c5e      	ldr	r4, [pc, #376]	; (80018dc <EngTrModel_step+0x254>)
 8001764:	9401      	str	r4, [sp, #4]
 8001766:	4c5e      	ldr	r4, [pc, #376]	; (80018e0 <EngTrModel_step+0x258>)
 8001768:	9400      	str	r4, [sp, #0]
 800176a:	f7ff fb0b 	bl	8000d84 <look2_binlxpw>
 800176e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        EngTrModel_ConstP.InterpDown_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* Lookup_n-D: '<S5>/InterpUp' incorporates:
       *  Inport: '<Root>/Throttle'
       */
      InterpUp = look2_binlxpw(EngTrModel_U.Throttle, EngTrModel_B.Gear,
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <EngTrModel_step+0x248>)
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <EngTrModel_step+0x23c>)
 800177a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800177e:	2406      	movs	r4, #6
 8001780:	9404      	str	r4, [sp, #16]
 8001782:	4c54      	ldr	r4, [pc, #336]	; (80018d4 <EngTrModel_step+0x24c>)
 8001784:	9403      	str	r4, [sp, #12]
 8001786:	4c57      	ldr	r4, [pc, #348]	; (80018e4 <EngTrModel_step+0x25c>)
 8001788:	9402      	str	r4, [sp, #8]
 800178a:	4c54      	ldr	r4, [pc, #336]	; (80018dc <EngTrModel_step+0x254>)
 800178c:	9401      	str	r4, [sp, #4]
 800178e:	4c56      	ldr	r4, [pc, #344]	; (80018e8 <EngTrModel_step+0x260>)
 8001790:	9400      	str	r4, [sp, #0]
 8001792:	f7ff faf7 	bl	8000d84 <look2_binlxpw>
 8001796:	e9c7 0102 	strd	r0, r1, [r7, #8]
        EngTrModel_ConstP.InterpUp_bp01Data, EngTrModel_ConstP.pooled2,
        EngTrModel_ConstP.InterpUp_tableData, EngTrModel_ConstP.pooled6, 6U);

      /* End of Outputs for SubSystem: '<S2>/ComputeThreshold' */
      switch (EngTrModel_DW.is_selection_state) {
 800179a:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <EngTrModel_step+0x238>)
 800179c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d05a      	beq.n	800185a <EngTrModel_step+0x1d2>
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	f300 80a6 	bgt.w	80018f6 <EngTrModel_step+0x26e>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d002      	beq.n	80017b4 <EngTrModel_step+0x12c>
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d02e      	beq.n	8001810 <EngTrModel_step+0x188>
 80017b2:	e0a0      	b.n	80018f6 <EngTrModel_step+0x26e>
       case EngTrModel_IN_downshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <EngTrModel_step+0x238>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d919      	bls.n	80017f0 <EngTrModel_step+0x168>
            (EngTrModel_B.VehicleSpeed <= InterpDown)) {
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <EngTrModel_step+0x23c>)
 80017be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 80017c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c6:	f7ff f90d 	bl	80009e4 <__aeabi_dcmpge>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00f      	beq.n	80017f0 <EngTrModel_step+0x168>
          sfEvent = EngTrModel_event_DOWN;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <EngTrModel_step+0x238>)
 80017d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <EngTrModel_step+0x15e>
            EngTrModel_gear_state(&sfEvent);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdaf 	bl	8001344 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <EngTrModel_step+0x238>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 80017ee:	e082      	b.n	80018f6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed > InterpDown) {
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <EngTrModel_step+0x23c>)
 80017f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017fa:	f7ff f8df 	bl	80009bc <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <EngTrModel_step+0x17e>
        break;
 8001804:	e077      	b.n	80018f6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <EngTrModel_step+0x238>)
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 800180e:	e072      	b.n	80018f6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_steady_state:
        if (EngTrModel_B.VehicleSpeed > InterpUp) {
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <EngTrModel_step+0x23c>)
 8001812:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800181a:	f7ff f8cf 	bl	80009bc <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <EngTrModel_step+0x1ac>
          EngTrModel_DW.is_selection_state = EngTrModel_IN_upshifting;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <EngTrModel_step+0x238>)
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
          EngTrModel_DW.temporalCounter_i1 = 0U;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <EngTrModel_step+0x238>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
            EngTrModel_DW.temporalCounter_i1 = 0U;
          }
        }
        break;
 8001832:	e060      	b.n	80018f6 <EngTrModel_step+0x26e>
          if (EngTrModel_B.VehicleSpeed < InterpDown) {
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <EngTrModel_step+0x23c>)
 8001836:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800183a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800183e:	f7ff f8db 	bl	80009f8 <__aeabi_dcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <EngTrModel_step+0x1c2>
        break;
 8001848:	e055      	b.n	80018f6 <EngTrModel_step+0x26e>
            EngTrModel_DW.is_selection_state = EngTrModel_IN_downshifting;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <EngTrModel_step+0x238>)
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
            EngTrModel_DW.temporalCounter_i1 = 0U;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <EngTrModel_step+0x238>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
        break;
 8001858:	e04d      	b.n	80018f6 <EngTrModel_step+0x26e>

       case EngTrModel_IN_upshifting:
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <EngTrModel_step+0x238>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d919      	bls.n	8001896 <EngTrModel_step+0x20e>
            (EngTrModel_B.VehicleSpeed >= InterpUp)) {
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <EngTrModel_step+0x23c>)
 8001864:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        if ((EngTrModel_DW.temporalCounter_i1 >= (uint32_T)2.0) &&
 8001868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186c:	f7ff f8b0 	bl	80009d0 <__aeabi_dcmple>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00f      	beq.n	8001896 <EngTrModel_step+0x20e>
          sfEvent = EngTrModel_event_UP;
 8001876:	2301      	movs	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
          if (EngTrModel_DW.is_active_gear_state != 0U) {
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <EngTrModel_step+0x238>)
 800187c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <EngTrModel_step+0x204>
            EngTrModel_gear_state(&sfEvent);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fd5c 	bl	8001344 <EngTrModel_gear_state>
          }

          EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <EngTrModel_step+0x238>)
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        } else {
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
          }
        }
        break;
 8001894:	e02e      	b.n	80018f4 <EngTrModel_step+0x26c>
          if (EngTrModel_B.VehicleSpeed < InterpUp) {
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <EngTrModel_step+0x23c>)
 8001898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800189c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a0:	f7ff f8aa 	bl	80009f8 <__aeabi_dcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d120      	bne.n	80018ec <EngTrModel_step+0x264>
        break;
 80018aa:	e023      	b.n	80018f4 <EngTrModel_step+0x26c>
 80018ac:	f3af 8000 	nop.w
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	401921fb 	.word	0x401921fb
 80018b8:	745d1746 	.word	0x745d1746
 80018bc:	3f8745d1 	.word	0x3f8745d1
 80018c0:	20000238 	.word	0x20000238
 80018c4:	20000208 	.word	0x20000208
 80018c8:	20000270 	.word	0x20000270
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	20000260 	.word	0x20000260
 80018d4:	0800a120 	.word	0x0800a120
 80018d8:	080098f0 	.word	0x080098f0
 80018dc:	080099e0 	.word	0x080099e0
 80018e0:	080099b0 	.word	0x080099b0
 80018e4:	08009a00 	.word	0x08009a00
 80018e8:	08009ac0 	.word	0x08009ac0
            EngTrModel_DW.is_selection_state = EngTrModel_IN_steady_state;
 80018ec:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <EngTrModel_step+0x478>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        break;
 80018f4:	bf00      	nop
  }

  /* End of Chart: '<Root>/ShiftLogic' */

  /* Lookup_n-D: '<S7>/Table' */
  InterpDown = look1_binlxpw(EngTrModel_B.Gear, EngTrModel_ConstP.pooled2,
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <EngTrModel_step+0x47c>)
 80018f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018fc:	2303      	movs	r3, #3
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <EngTrModel_step+0x480>)
 8001902:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <EngTrModel_step+0x484>)
 8001904:	f7ff fc3a 	bl	800117c <look1_binlxpw>
 8001908:	e9c7 0104 	strd	r0, r1, [r7, #16]
    EngTrModel_ConstP.Table_tableData, 3U);

  /* Gain: '<S4>/FinalDriveRatio2' incorporates:
   *  DiscreteIntegrator: '<S4>/WheelSpeed'
   */
  EngTrModel_B.TransmissionRPM = 3.23 * EngTrModel_DW.WheelSpeed_DSTATE;
 800190c:	4b7c      	ldr	r3, [pc, #496]	; (8001b00 <EngTrModel_step+0x478>)
 800190e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001912:	a375      	add	r3, pc, #468	; (adr r3, 8001ae8 <EngTrModel_step+0x460>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fdde 	bl	80004d8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4978      	ldr	r1, [pc, #480]	; (8001b04 <EngTrModel_step+0x47c>)
 8001922:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Product: '<S6>/SpeedRatio' incorporates:
   *  Product: '<S7>/Product1'
   */
  if( EngTrModel_B.EngineRPM > 0)
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <EngTrModel_step+0x47c>)
 8001928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f7ff f860 	bl	80009f8 <__aeabi_dcmpgt>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <EngTrModel_step+0x2e0>
	  InterpUp = InterpDown * EngTrModel_B.TransmissionRPM / EngTrModel_B.EngineRPM;
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <EngTrModel_step+0x47c>)
 8001940:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001944:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001948:	f7fe fdc6 	bl	80004d8 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <EngTrModel_step+0x47c>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	f7fe fee7 	bl	800072c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001966:	e005      	b.n	8001974 <EngTrModel_step+0x2ec>
  else
	  InterpUp = 0.0;
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Fcn: '<S6>/Impeller' incorporates:
   *  Lookup_n-D: '<S6>/FactorK'
   *  Product: '<S6>/Quotient'
   */
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <EngTrModel_step+0x47c>)
 8001976:	e9d3 4500 	ldrd	r4, r5, [r3]
    look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 800197a:	2314      	movs	r3, #20
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <EngTrModel_step+0x488>)
 8001980:	4a64      	ldr	r2, [pc, #400]	; (8001b14 <EngTrModel_step+0x48c>)
 8001982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001986:	f7ff fbf9 	bl	800117c <look1_binlxpw>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
  EngTrModel_B.ImpellerTorque = rt_powd_snf(EngTrModel_B.EngineRPM /
 800198e:	4620      	mov	r0, r4
 8001990:	4629      	mov	r1, r5
 8001992:	f7fe fecb 	bl	800072c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a6:	f7ff fd53 	bl	8001450 <rt_powd_snf>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4955      	ldr	r1, [pc, #340]	; (8001b04 <EngTrModel_step+0x47c>)
 80019b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
                  EngTrModel_ConstP.FactorK_tableData, 20U), 2.0);

  /* Lookup_n-D: '<S6>/TorqueRatio' */
  InterpUp = look1_binlxpw(InterpUp, EngTrModel_ConstP.pooled5,
 80019b4:	2314      	movs	r3, #20
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <EngTrModel_step+0x490>)
 80019ba:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <EngTrModel_step+0x48c>)
 80019bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019c0:	f7ff fbdc 	bl	800117c <look1_binlxpw>
 80019c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    EngTrModel_ConstP.TorqueRatio_tableData, 20U);

  /* Product: '<S7>/Product' incorporates:
   *  Product: '<S6>/Turbine'
   */
  EngTrModel_B.OutputTorque = EngTrModel_B.ImpellerTorque * InterpUp *
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <EngTrModel_step+0x47c>)
 80019ca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	f7fe fd81 	bl	80004d8 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e2:	f7fe fd79 	bl	80004d8 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4946      	ldr	r1, [pc, #280]	; (8001b04 <EngTrModel_step+0x47c>)
 80019ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
    InterpDown;

  /* Outport: '<Root>/Gear' */
  EngTrModel_Y.Gear = EngTrModel_B.Gear;
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <EngTrModel_step+0x47c>)
 80019f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019f6:	4949      	ldr	r1, [pc, #292]	; (8001b1c <EngTrModel_step+0x494>)
 80019f8:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Outport: '<Root>/VehicleSpeed' */
  EngTrModel_Y.VehicleSpeed = EngTrModel_B.VehicleSpeed;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <EngTrModel_step+0x47c>)
 80019fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a02:	4946      	ldr	r1, [pc, #280]	; (8001b1c <EngTrModel_step+0x494>)
 8001a04:	e9c1 2302 	strd	r2, r3, [r1, #8]
   *  Gain: '<S1>/EnginePlusImpellerInertia'
   *  Inport: '<Root>/Throttle'
   *  Lookup_n-D: '<S1>/EngineTorque'
   *  Sum: '<S1>/Sum'
   */
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <EngTrModel_step+0x498>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	240a      	movs	r4, #10
 8001a16:	9404      	str	r4, [sp, #16]
 8001a18:	4c42      	ldr	r4, [pc, #264]	; (8001b24 <EngTrModel_step+0x49c>)
 8001a1a:	9403      	str	r4, [sp, #12]
 8001a1c:	4c42      	ldr	r4, [pc, #264]	; (8001b28 <EngTrModel_step+0x4a0>)
 8001a1e:	9402      	str	r4, [sp, #8]
 8001a20:	4c42      	ldr	r4, [pc, #264]	; (8001b2c <EngTrModel_step+0x4a4>)
 8001a22:	9401      	str	r4, [sp, #4]
 8001a24:	4c42      	ldr	r4, [pc, #264]	; (8001b30 <EngTrModel_step+0x4a8>)
 8001a26:	9400      	str	r4, [sp, #0]
 8001a28:	f7ff f9ac 	bl	8000d84 <look2_binlxpw>
    (EngTrModel_U.Throttle, EngTrModel_B.EngineRPM,
     EngTrModel_ConstP.EngineTorque_bp01Data,
     EngTrModel_ConstP.EngineTorque_bp02Data,
     EngTrModel_ConstP.EngineTorque_tableData,
     EngTrModel_ConstP.EngineTorque_maxIndex, 10U) - EngTrModel_B.ImpellerTorque)
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a32:	f7fe fb99 	bl	8000168 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
    * 45.472138452209627 * 0.04;
 8001a3e:	a32c      	add	r3, pc, #176	; (adr r3, 8001af0 <EngTrModel_step+0x468>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fd48 	bl	80004d8 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	a329      	add	r3, pc, #164	; (adr r3, 8001af8 <EngTrModel_step+0x470>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fd3f 	bl	80004d8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
  EngTrModel_DW.DiscreteTimeIntegrator_DSTATE += (look2_binlxpw
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <EngTrModel_step+0x478>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fb80 	bl	800016c <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4923      	ldr	r1, [pc, #140]	; (8001b00 <EngTrModel_step+0x478>)
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]

  /* Signum: '<S4>/Sign' */
  if (EngTrModel_B.VehicleSpeed < 0.0) {
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a78:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	f7fe ff9a 	bl	80009bc <__aeabi_dcmplt>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <EngTrModel_step+0x412>
    InterpDown = -1.0;
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <EngTrModel_step+0x4ac>)
 8001a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a98:	e055      	b.n	8001b46 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed > 0.0) {
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <EngTrModel_step+0x47c>)
 8001a9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f7fe ffa6 	bl	80009f8 <__aeabi_dcmpgt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <EngTrModel_step+0x436>
    InterpDown = 1.0;
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <EngTrModel_step+0x4b0>)
 8001ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001abc:	e043      	b.n	8001b46 <EngTrModel_step+0x4be>
  } else if (EngTrModel_B.VehicleSpeed == 0.0) {
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <EngTrModel_step+0x47c>)
 8001ac0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f7fe ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d032      	beq.n	8001b3c <EngTrModel_step+0x4b4>
    InterpDown = 0.0;
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001ae2:	e030      	b.n	8001b46 <EngTrModel_step+0x4be>
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	3d70a3d7 	.word	0x3d70a3d7
 8001aec:	4009d70a 	.word	0x4009d70a
 8001af0:	0865b653 	.word	0x0865b653
 8001af4:	4046bc6f 	.word	0x4046bc6f
 8001af8:	47ae147b 	.word	0x47ae147b
 8001afc:	3fa47ae1 	.word	0x3fa47ae1
 8001b00:	20000238 	.word	0x20000238
 8001b04:	20000208 	.word	0x20000208
 8001b08:	08009f08 	.word	0x08009f08
 8001b0c:	080099e0 	.word	0x080099e0
 8001b10:	08009f28 	.word	0x08009f28
 8001b14:	08009fd0 	.word	0x08009fd0
 8001b18:	0800a078 	.word	0x0800a078
 8001b1c:	20000270 	.word	0x20000270
 8001b20:	20000260 	.word	0x20000260
 8001b24:	0800a128 	.word	0x0800a128
 8001b28:	08009af0 	.word	0x08009af0
 8001b2c:	08009eb0 	.word	0x08009eb0
 8001b30:	08009e60 	.word	0x08009e60
 8001b34:	bff00000 	.word	0xbff00000
 8001b38:	3ff00000 	.word	0x3ff00000
  } else {
    InterpDown = (rtNaN);
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <EngTrModel_step+0x5a0>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Inport: '<Root>/Brake'
   *  Product: '<S4>/SignedLoad'
   *  Sum: '<S4>/Sum'
   *  Sum: '<S4>/Sum1'
   */
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <EngTrModel_step+0x5a4>)
 8001b48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b4c:	a32e      	add	r3, pc, #184	; (adr r3, 8001c08 <EngTrModel_step+0x580>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fcc1 	bl	80004d8 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <EngTrModel_step+0x5a4>)
 8001b60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b6c:	f7ff fc70 	bl	8001450 <rt_powd_snf>
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001b70:	a327      	add	r3, pc, #156	; (adr r3, 8001c10 <EngTrModel_step+0x588>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fcaf 	bl	80004d8 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <EngTrModel_step+0x5a8>)
 8001b88:	f7fe faf0 	bl	800016c <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <EngTrModel_step+0x5ac>)
 8001b96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    rt_powd_snf(EngTrModel_B.VehicleSpeed, 2.0) + 40.0) +
 8001b9a:	f7fe fae7 	bl	800016c <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001baa:	f7fe fc95 	bl	80004d8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe fad7 	bl	8000168 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
    EngTrModel_U.BrakeTorque) * InterpDown) * 0.082684618362373577 * 0.04;
 8001bc2:	a315      	add	r3, pc, #84	; (adr r3, 8001c18 <EngTrModel_step+0x590>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fc86 	bl	80004d8 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	a312      	add	r3, pc, #72	; (adr r3, 8001c20 <EngTrModel_step+0x598>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fc7d 	bl	80004d8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
  EngTrModel_DW.WheelSpeed_DSTATE += (3.23 * EngTrModel_B.OutputTorque - ((0.02 *
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <EngTrModel_step+0x5b0>)
 8001be8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bec:	f7fe fabe 	bl	800016c <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4910      	ldr	r1, [pc, #64]	; (8001c38 <EngTrModel_step+0x5b0>)
 8001bf6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	3d70a3d7 	.word	0x3d70a3d7
 8001c0c:	4009d70a 	.word	0x4009d70a
 8001c10:	47ae147b 	.word	0x47ae147b
 8001c14:	3f947ae1 	.word	0x3f947ae1
 8001c18:	b3bfa695 	.word	0xb3bfa695
 8001c1c:	3fb52ad1 	.word	0x3fb52ad1
 8001c20:	47ae147b 	.word	0x47ae147b
 8001c24:	3fa47ae1 	.word	0x3fa47ae1
 8001c28:	20000568 	.word	0x20000568
 8001c2c:	20000208 	.word	0x20000208
 8001c30:	40440000 	.word	0x40440000
 8001c34:	20000260 	.word	0x20000260
 8001c38:	20000238 	.word	0x20000238

08001c3c <EngTrModel_initialize>:

/* Model initialize function */
void EngTrModel_initialize(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8001c40:	2008      	movs	r0, #8
 8001c42:	f001 fa2d 	bl	80030a0 <rt_InitInfAndNaN>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <vApplicationGetIdleTaskMemory+0x28>)
 8001c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000288 	.word	0x20000288
 8001c78:	20000328 	.word	0x20000328

08001c7c <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
	char const *p;
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <LCD_Init+0x160>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a55      	ldr	r2, [pc, #340]	; (8001ddc <LCD_Init+0x160>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6193      	str	r3, [r2, #24]
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */

	 // Conexión recomendada de los pines:                                           *
	 // RS->PC6, RW->PC7, EN->PC8, D4->PC9, D5->PC10, D6->PC11, D7->PC12
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <LCD_Init+0x164>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a53      	ldr	r2, [pc, #332]	; (8001de0 <LCD_Init+0x164>)
 8001c94:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001c98:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <LCD_Init+0x164>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a50      	ldr	r2, [pc, #320]	; (8001de0 <LCD_Init+0x164>)
 8001ca0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001ca4:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF7;
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <LCD_Init+0x164>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <LCD_Init+0x164>)
 8001cac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001cb0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE7;
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <LCD_Init+0x164>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <LCD_Init+0x164>)
 8001cb8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <LCD_Init+0x164>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <LCD_Init+0x164>)
 8001cc4:	f023 030c 	bic.w	r3, r3, #12
 8001cc8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <LCD_Init+0x164>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a44      	ldr	r2, [pc, #272]	; (8001de0 <LCD_Init+0x164>)
 8001cd0:	f043 0303 	orr.w	r3, r3, #3
 8001cd4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001cd6:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <LCD_Init+0x164>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <LCD_Init+0x164>)
 8001cdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ce0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <LCD_Init+0x164>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a3e      	ldr	r2, [pc, #248]	; (8001de0 <LCD_Init+0x164>)
 8001ce8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cec:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF10;
 8001cee:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <LCD_Init+0x164>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <LCD_Init+0x164>)
 8001cf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001cf8:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE10;
 8001cfa:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <LCD_Init+0x164>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <LCD_Init+0x164>)
 8001d00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d04:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF11;
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <LCD_Init+0x164>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a35      	ldr	r2, [pc, #212]	; (8001de0 <LCD_Init+0x164>)
 8001d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d10:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE11;
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <LCD_Init+0x164>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <LCD_Init+0x164>)
 8001d18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001d1c:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF12;
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <LCD_Init+0x164>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <LCD_Init+0x164>)
 8001d24:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d28:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE12;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <LCD_Init+0x164>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <LCD_Init+0x164>)
 8001d30:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001d34:	6053      	str	r3, [r2, #4]
  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <LCD_Init+0x164>)
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <LCD_Init+0x168>)
 8001d3a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8001d3c:	200f      	movs	r0, #15
 8001d3e:	f001 fc5f 	bl	8003600 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <LCD_Init+0x164>)
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <LCD_Init+0x168>)
 8001d46:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d48:	f000 f9d0 	bl	80020ec <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8001d4c:	2005      	movs	r0, #5
 8001d4e:	f001 fc57 	bl	8003600 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <LCD_Init+0x164>)
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <LCD_Init+0x168>)
 8001d56:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d58:	f000 f9c8 	bl	80020ec <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f001 fc4f 	bl	8003600 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <LCD_Init+0x164>)
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <LCD_Init+0x168>)
 8001d66:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d68:	f000 f9c0 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8001d6c:	bf00      	nop
 8001d6e:	f000 f973 	bl	8002058 <LCD_Busy>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1fa      	bne.n	8001d6e <LCD_Init+0xf2>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <LCD_Init+0x164>)
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <LCD_Init+0x16c>)
 8001d7c:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8001d7e:	f000 f9b5 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8001d82:	bf00      	nop
 8001d84:	f000 f968 	bl	8002058 <LCD_Busy>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1fa      	bne.n	8001d84 <LCD_Init+0x108>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8001d8e:	2028      	movs	r0, #40	; 0x28
 8001d90:	f000 f894 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8001d94:	200c      	movs	r0, #12
 8001d96:	f000 f891 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8001d9a:	2006      	movs	r0, #6
 8001d9c:	f000 f88e 	bl	8001ebc <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8001da0:	2040      	movs	r0, #64	; 0x40
 8001da2:	f000 f88b 	bl	8001ebc <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <LCD_Init+0x170>)
 8001da8:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	e00a      	b.n	8001dc6 <LCD_Init+0x14a>
		LCD_Put_Char( *p );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f895 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dca:	d9f1      	bls.n	8001db0 <LCD_Init+0x134>

	LCD_Write_Cmd( 0x80 );
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	f000 f875 	bl	8001ebc <LCD_Write_Cmd>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40011000 	.word	0x40011000
 8001de4:	18000600 	.word	0x18000600
 8001de8:	1a000400 	.word	0x1a000400
 8001dec:	0800a130 	.word	0x0800a130

08001df0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <LCD_Out_Data4+0x1e>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	e003      	b.n	8001e16 <LCD_Out_Data4+0x26>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <LCD_Out_Data4+0x3a>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	e003      	b.n	8001e32 <LCD_Out_Data4+0x42>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e30:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <LCD_Out_Data4+0x56>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	e003      	b.n	8001e4e <LCD_Out_Data4+0x5e>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e4c:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <LCD_Out_Data4+0x72>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e5e:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8001e60:	e003      	b.n	8001e6a <LCD_Out_Data4+0x7a>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <LCD_Out_Data4+0x84>)
 8001e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e68:	611a      	str	r2, [r3, #16]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40011000 	.word	0x40011000

08001e78 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffb1 	bl	8001df0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001e8e:	f000 f92d 	bl	80020ec <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ffa8 	bl	8001df0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001ea0:	f000 f924 	bl	80020ec <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8001ea4:	bf00      	nop
 8001ea6:	f000 f8d7 	bl	8002058 <LCD_Busy>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1fa      	bne.n	8001ea6 <LCD_Write_Byte+0x2e>
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <LCD_Write_Cmd+0x24>)
 8001ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ecc:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ffd1 	bl	8001e78 <LCD_Write_Byte>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40011000 	.word	0x40011000

08001ee4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <LCD_Put_Char+0x20>)
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffbe 	bl	8001e78 <LCD_Write_Byte>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40011000 	.word	0x40011000

08001f08 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <LCD_Set_Cursor+0x1c>
		column--;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <LCD_Set_Cursor+0x28>
		line--;
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	461a      	mov	r2, r3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	4413      	add	r3, r2
 8001f40:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3b80      	subs	r3, #128	; 0x80
 8001f4c:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ffb3 	bl	8001ebc <LCD_Write_Cmd>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e009      	b.n	8001f80 <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ffb5 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	dc05      	bgt.n	8001f92 <LCD_Put_Str+0x34>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ec      	bne.n	8001f6c <LCD_Put_Str+0xe>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
void LCD_Put_Num(int num){
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	int p;
	int f = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
	char ch[ 5 ];

	for( int i = 0; i < 5; i++ ){
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e04d      	b.n	8002048 <LCD_Put_Num+0xae>
		p = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f1c3 0304 	rsb	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e008      	b.n	8001fcc <LCD_Put_Num+0x32>
			p = p * 10;
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
		for( int j = 4 - i; j > 0; j-- )
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dcf3      	bgt.n	8001fba <LCD_Put_Num+0x20>
		ch[ i ] = ( num / p );
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
		if( num >= p && !f )
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	db04      	blt.n	8001ffa <LCD_Put_Num+0x60>
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <LCD_Put_Num+0x60>
			f = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
		num = num - ch[ i ] * p;
 8001ffa:	f107 0208 	add.w	r2, r7, #8
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	4413      	add	r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	607b      	str	r3, [r7, #4]
		ch[ i ] = ch[ i ] + 48;
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	3330      	adds	r3, #48	; 0x30
 800201e:	b2d9      	uxtb	r1, r3
 8002020:	f107 0208 	add.w	r2, r7, #8
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	701a      	strb	r2, [r3, #0]
		if( f )
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <LCD_Put_Num+0xa8>
			LCD_Put_Char( ch[ i ] );
 8002032:	f107 0208 	add.w	r2, r7, #8
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff51 	bl	8001ee4 <LCD_Put_Char>
	for( int i = 0; i < 5; i++ ){
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b04      	cmp	r3, #4
 800204c:	ddae      	ble.n	8001fac <LCD_Put_Num+0x12>
	}
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * input floating                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF12_1;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <LCD_Busy+0x8c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <LCD_Busy+0x8c>)
 8002062:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002066:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_MODE12;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <LCD_Busy+0x8c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <LCD_Busy+0x8c>)
 800206e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002072:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF12_0;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <LCD_Busy+0x8c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <LCD_Busy+0x8c>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207e:	6053      	str	r3, [r2, #4]
  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <LCD_Busy+0x8c>)
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <LCD_Busy+0x90>)
 8002084:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 8002086:	2001      	movs	r0, #1
 8002088:	f001 faba 	bl	8003600 <HAL_Delay>

  /* ***************************************************** */
  if((GPIOC->IDR & (1U << 12)) != 0 ){//		       if D7 is set, then
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <LCD_Busy+0x8c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d011      	beq.n	80020bc <LCD_Busy+0x64>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <LCD_Busy+0x8c>)
 800209a:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 800209e:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <LCD_Busy+0x8c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <LCD_Busy+0x8c>)
 80020a6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020aa:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <LCD_Busy+0x8c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <LCD_Busy+0x8c>)
 80020b2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80020b6:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <LCD_Busy+0x86>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <LCD_Busy+0x8c>)
 80020be:	f04f 72c0 	mov.w	r2, #25165824	; 0x1800000
 80020c2:	611a      	str	r2, [r3, #16]

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output push pull and 50 MHz speed     */

		GPIOC->CRH &= ~GPIO_CRH_CNF12;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <LCD_Busy+0x8c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <LCD_Busy+0x8c>)
 80020ca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80020ce:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE12;
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <LCD_Busy+0x8c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a03      	ldr	r2, [pc, #12]	; (80020e4 <LCD_Busy+0x8c>)
 80020d6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80020da:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 80020dc:	2300      	movs	r3, #0
	}
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40011000 	.word	0x40011000
 80020e8:	00400180 	.word	0x00400180

080020ec <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LCD_Pulse_EN+0x20>)
 80020f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f6:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 80020f8:	2001      	movs	r0, #1
 80020fa:	f001 fa81 	bl	8003600 <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <LCD_Pulse_EN+0x20>)
 8002100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002104:	611a      	str	r2, [r3, #16]
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40011000 	.word	0x40011000

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b0ae      	sub	sp, #184	; 0xb8
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002116:	f001 fa41 	bl	800359c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211a:	f000 f8a3 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211e:	f000 f8e3 	bl	80022e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8002122:	f000 f91b 	bl	800235c <USER_RCC_Init>
  USER_GPIO_Init();
 8002126:	f000 f945 	bl	80023b4 <USER_GPIO_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(msgQueue, 4, uint32_t);
 800212a:	4b41      	ldr	r3, [pc, #260]	; (8002230 <main+0x120>)
 800212c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8002130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 8002136:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fa57 	bl	80045f0 <osMessageCreate>
 8002142:	4603      	mov	r3, r0
 8002144:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <main+0x124>)
 8002146:	6013      	str	r3, [r2, #0]
//  msgQueueHandle = osMessageCreate(osMessageQ(gearQueue), NULL);

  /* USER CODE END RTOS_QUEUES */
  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <main+0x128>)
 800214a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800214e:	461d      	mov	r5, r3
 8002150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800215c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f002 f9e4 	bl	8004530 <osThreadCreate>
 8002168:	4603      	mov	r3, r0
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <main+0x12c>)
 800216c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(MatricialTask, readMatricial, osPriorityNormal, 0, 128*2);
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <main+0x130>)
 8002170:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002174:	461d      	mov	r5, r3
 8002176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800217e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadMatricialHandle = osThreadCreate(osThread(MatricialTask), NULL);
 8002182:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f002 f9d1 	bl	8004530 <osThreadCreate>
 800218e:	4603      	mov	r3, r0
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <main+0x134>)
 8002192:	6013      	str	r3, [r2, #0]
//
  osThreadDef(ADCTask, readADC, osPriorityNormal, 0, 512);
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <main+0x138>)
 8002196:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800219a:	461d      	mov	r5, r3
 800219c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadADCHandle = osThreadCreate(osThread(ADCTask), NULL);
 80021a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 f9be 	bl	8004530 <osThreadCreate>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a25      	ldr	r2, [pc, #148]	; (800224c <main+0x13c>)
 80021b8:	6013      	str	r3, [r2, #0]
//
  osThreadDef(readStateTask, readState, osPriorityNormal, 0, 256);
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <main+0x140>)
 80021bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021c0:	461d      	mov	r5, r3
 80021c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadStateHandle = osThreadCreate(osThread(readStateTask), NULL);
 80021ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 f9ab 	bl	8004530 <osThreadCreate>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <main+0x144>)
 80021de:	6013      	str	r3, [r2, #0]

  osThreadDef(readControlTask, readControl, osPriorityNormal, 0, 256);
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <main+0x148>)
 80021e2:	f107 041c 	add.w	r4, r7, #28
 80021e6:	461d      	mov	r5, r3
 80021e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadStateHandle = osThreadCreate(osThread(readControlTask), NULL);
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f998 	bl	8004530 <osThreadCreate>
 8002200:	4603      	mov	r3, r0
 8002202:	4a14      	ldr	r2, [pc, #80]	; (8002254 <main+0x144>)
 8002204:	6013      	str	r3, [r2, #0]

  osThreadDef(LCDTask, sendLCD, osPriorityNormal, 0, 512);
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <main+0x14c>)
 8002208:	463c      	mov	r4, r7
 800220a:	461d      	mov	r5, r3
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendLCDHandle = osThreadCreate(osThread(LCDTask), NULL);
 8002218:	463b      	mov	r3, r7
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f002 f987 	bl	8004530 <osThreadCreate>
 8002222:	4603      	mov	r3, r0
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <main+0x150>)
 8002226:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002228:	f002 f97b 	bl	8004522 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800222c:	e7fe      	b.n	800222c <main+0x11c>
 800222e:	bf00      	nop
 8002230:	080096d8 	.word	0x080096d8
 8002234:	20000550 	.word	0x20000550
 8002238:	080096f4 	.word	0x080096f4
 800223c:	20000528 	.word	0x20000528
 8002240:	08009720 	.word	0x08009720
 8002244:	2000052c 	.word	0x2000052c
 8002248:	08009744 	.word	0x08009744
 800224c:	20000530 	.word	0x20000530
 8002250:	08009770 	.word	0x08009770
 8002254:	20000534 	.word	0x20000534
 8002258:	0800979c 	.word	0x0800979c
 800225c:	080097c0 	.word	0x080097c0
 8002260:	20000538 	.word	0x20000538

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	; 0x40
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2228      	movs	r2, #40	; 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fb72 	bl	800695c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800228a:	2301      	movs	r3, #1
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800228e:	2310      	movs	r3, #16
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002292:	2302      	movs	r3, #2
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002296:	2300      	movs	r3, #0
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800229a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 faaf 	bl	8003808 <HAL_RCC_OscConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80022b0:	f000 fdb6 	bl	8002e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b4:	230f      	movs	r3, #15
 80022b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b8:	2302      	movs	r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fd1c 	bl	8003d0c <HAL_RCC_ClockConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80022da:	f000 fda1 	bl	8002e20 <Error_Handler>
  }
}
 80022de:	bf00      	nop
 80022e0:	3740      	adds	r7, #64	; 0x40
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <MX_GPIO_Init+0x70>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	4a19      	ldr	r2, [pc, #100]	; (8002358 <MX_GPIO_Init+0x70>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6193      	str	r3, [r2, #24]
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_GPIO_Init+0x70>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_GPIO_Init+0x70>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <MX_GPIO_Init+0x70>)
 800230c:	f043 0320 	orr.w	r3, r3, #32
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_GPIO_Init+0x70>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <MX_GPIO_Init+0x70>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <MX_GPIO_Init+0x70>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6193      	str	r3, [r2, #24]
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_GPIO_Init+0x70>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MX_GPIO_Init+0x70>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <MX_GPIO_Init+0x70>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <MX_GPIO_Init+0x70>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40021000 	.word	0x40021000

0800235c <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

/* GENERAL FUNCTIONS */

void USER_RCC_Init(void){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // I/O port A clock enable
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <USER_RCC_Init+0x54>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <USER_RCC_Init+0x54>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//		I/O port B clock enable
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <USER_RCC_Init+0x54>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <USER_RCC_Init+0x54>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;//		I/O port C clock enable
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <USER_RCC_Init+0x54>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <USER_RCC_Init+0x54>)
 800237e:	f043 0310 	orr.w	r3, r3, #16
 8002382:	6193      	str	r3, [r2, #24]
//  -------UART--------------
  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <USER_RCC_Init+0x54>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <USER_RCC_Init+0x54>)
 800238a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238e:	6193      	str	r3, [r2, #24]
//  --------ADC--------------
  RCC->APB2ENR |=	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <USER_RCC_Init+0x54>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <USER_RCC_Init+0x54>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6193      	str	r3, [r2, #24]
  RCC->CFGR |=	 RCC_CFGR_ADCPRE;  //	ADC prescaler 1:8 for 8 MHz
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <USER_RCC_Init+0x54>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <USER_RCC_Init+0x54>)
 80023a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a6:	6053      	str	r3, [r2, #4]

}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000

080023b4 <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	USER_GPIO_Init_UART();
 80023b8:	f000 f806 	bl	80023c8 <USER_GPIO_Init_UART>
	USER_GPIO_Init_Matricial();
 80023bc:	f000 f854 	bl	8002468 <USER_GPIO_Init_Matricial>
	USER_GPIO_Init_ADC();
 80023c0:	f000 f8f2 	bl	80025a8 <USER_GPIO_Init_ADC>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <USER_GPIO_Init_UART>:
void USER_GPIO_Init_UART(void){
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	// Pin PA9 (USART1_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRH &= ~GPIO_CRH_CNF9;
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023d6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80023e2:	6053      	str	r3, [r2, #4]

	// Pin PA10 (RX)
	GPIOA->CRH &= ~GPIO_CRH_CNF10;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023ee:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a03      	ldr	r2, [pc, #12]	; (8002404 <USER_GPIO_Init_UART+0x3c>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fa:	6053      	str	r3, [r2, #4]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40010800 	.word	0x40010800

08002408 <USER_USART1_Init>:

void USER_USART1_Init(void){
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  USART1->CR1 |= USART_CR1_UE; // USART enabled
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <USER_USART1_Init+0x5c>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <USER_USART1_Init+0x5c>)
 8002412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002416:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_M; // 1 start bit, 8 data bits
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <USER_USART1_Init+0x5c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <USER_USART1_Init+0x5c>)
 800241e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002422:	60d3      	str	r3, [r2, #12]
  USART1->CR1 &= ~USART_CR1_PCE; // Parity control disabled
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <USER_USART1_Init+0x5c>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <USER_USART1_Init+0x5c>)
 800242a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800242e:	60d3      	str	r3, [r2, #12]
  USART1->CR2 &= ~USART_CR2_STOP; // 1 stop bit
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <USER_USART1_Init+0x5c>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <USER_USART1_Init+0x5c>)
 8002436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800243a:	6113      	str	r3, [r2, #16]
  USART1->BRR = 0x22C; // 115200 bps 34.72
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <USER_USART1_Init+0x5c>)
 800243e:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8002442:	609a      	str	r2, [r3, #8]
  USART1->CR1 |= USART_CR1_TE; // Transmitter enabled
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <USER_USART1_Init+0x5c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <USER_USART1_Init+0x5c>)
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	60d3      	str	r3, [r2, #12]
  USART1->CR1 |= USART_CR1_RE;// receiver enabled
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <USER_USART1_Init+0x5c>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <USER_USART1_Init+0x5c>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40013800 	.word	0x40013800

08002468 <USER_GPIO_Init_Matricial>:

void USER_GPIO_Init_Matricial(void){
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	//PA5 -> 0, LD2 OFF
	GPIOA->BSRR = GPIO_BSRR_BR5;
 800246c:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800246e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002472:	611a      	str	r2, [r3, #16]
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800247a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800247e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	6013      	str	r3, [r2, #0]

	//PA12 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE12 & ~GPIO_CRH_CNF12_0;
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002492:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002496:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_1;
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800249e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024a2:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR12;
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a3d      	ldr	r2, [pc, #244]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ae:	60d3      	str	r3, [r2, #12]
	//PA6 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE6 & ~GPIO_CRL_CNF6_0;
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024c6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR6;
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d2:	60d3      	str	r3, [r2, #12]
	//PA11 as input pull-up -horizontal
	GPIOA->CRH &= ~GPIO_CRH_MODE11 & ~GPIO_CRH_CNF11_0;
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF11_1;
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a2e      	ldr	r2, [pc, #184]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR11;
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f6:	60d3      	str	r3, [r2, #12]
	//PA7 as input pull-up -horizontal
	GPIOA->CRL &= ~GPIO_CRL_MODE7 & ~GPIO_CRL_CNF7_0;
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 80024fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002502:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_ODR7;
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <USER_GPIO_Init_Matricial+0x138>)
 8002516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251a:	60d3      	str	r3, [r2, #12]

	//PB3 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS3;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800251e:	2208      	movs	r2, #8
 8002520:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE3_1 & ~GPIO_CRL_CNF3;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002528:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800252c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002538:	6013      	str	r3, [r2, #0]
	//PB4 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS4;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800253c:	2210      	movs	r2, #16
 800253e:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE4_1 & ~GPIO_CRL_CNF4;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002546:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800254a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE4_0;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
	//PB5 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BS5;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800255a:	2220      	movs	r2, #32
 800255c:	611a      	str	r2, [r3, #16]
	GPIOB->CRL &= ~GPIO_CRL_MODE5_1 & ~GPIO_CRL_CNF5;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002564:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002568:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE5_0;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002574:	6013      	str	r3, [r2, #0]
	//PB10 as output push-pull -vertical
	GPIOB->BSRR = GPIO_BSRR_BR10;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002578:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800257c:	611a      	str	r2, [r3, #16]
	GPIOB->CRH &= ~GPIO_CRH_MODE10_1 & ~GPIO_CRH_CNF10;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002584:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8002588:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE10_0;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <USER_GPIO_Init_Matricial+0x13c>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6053      	str	r3, [r2, #4]
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00

080025a8 <USER_GPIO_Init_ADC>:

void USER_GPIO_Init_ADC(){
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
	//PA0 (ADC12_IN0) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0;
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025b2:	f023 030f 	bic.w	r3, r3, #15
 80025b6:	6013      	str	r3, [r2, #0]
	//PA1 (TIM2_CH2) as alternate function push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1_1;
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80025c2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF1_1 | GPIO_CRL_MODE1_0;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <USER_GPIO_Init_ADC+0x30>)
 80025ca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80025ce:	6013      	str	r3, [r2, #0]
	//PA2 (ADC12_IN2) as analog
//	GPIOA->CRL	&	~GPIOIO_CRL_CNF2 & ~GPIO_CRL_MODE2;
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40010800 	.word	0x40010800

080025dc <USER_ADC_Init>:
}




void USER_ADC_Init(void){
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <USER_ADC_Init+0x64>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <USER_ADC_Init+0x64>)
 80025e6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80025ea:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <USER_ADC_Init+0x64>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a13      	ldr	r2, [pc, #76]	; (8002640 <USER_ADC_Init+0x64>)
 80025f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f6:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <USER_ADC_Init+0x64>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a10      	ldr	r2, [pc, #64]	; (8002640 <USER_ADC_Init+0x64>)
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <USER_ADC_Init+0x64>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <USER_ADC_Init+0x64>)
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <USER_ADC_Init+0x64>)
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <USER_ADC_Init+0x64>)
 8002616:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800261a:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <USER_ADC_Init+0x64>)
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <USER_ADC_Init+0x64>)
 8002622:	f023 031f 	bic.w	r3, r3, #31
 8002626:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <USER_ADC_Init+0x64>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <USER_ADC_Init+0x64>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 8002634:	2001      	movs	r0, #1
 8002636:	f000 ffe3 	bl	8003600 <HAL_Delay>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40012400 	.word	0x40012400

08002644 <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <USER_ADC_Calibration+0x28>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <USER_ADC_Calibration+0x28>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 8002654:	bf00      	nop
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <USER_ADC_Calibration+0x28>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <USER_ADC_Calibration+0x12>
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40012400 	.word	0x40012400

08002670 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 8002674:	bf00      	nop
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <USER_ADC_Read+0x20>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f9      	beq.n	8002676 <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <USER_ADC_Read+0x20>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	b29b      	uxth	r3, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	40012400 	.word	0x40012400

08002694 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	printf("Vehicle Speed: %ld,", data[0]);
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <StartDefaultTask+0x50>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <StartDefaultTask+0x54>)
 80026a4:	f004 f814 	bl	80066d0 <iprintf>
	printf("Engine Speed: %ld,", data[1]);
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <StartDefaultTask+0x50>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4619      	mov	r1, r3
 80026ae:	480f      	ldr	r0, [pc, #60]	; (80026ec <StartDefaultTask+0x58>)
 80026b0:	f004 f80e 	bl	80066d0 <iprintf>
	printf("Gear: %ld,", data[2]);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <StartDefaultTask+0x50>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <StartDefaultTask+0x5c>)
 80026bc:	f004 f808 	bl	80066d0 <iprintf>
	printf("Throttle: %ld,", data[3]);
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <StartDefaultTask+0x50>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4619      	mov	r1, r3
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <StartDefaultTask+0x60>)
 80026c8:	f004 f802 	bl	80066d0 <iprintf>
	printf("Mode: %ld\n\r", data[4]);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <StartDefaultTask+0x50>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4809      	ldr	r0, [pc, #36]	; (80026f8 <StartDefaultTask+0x64>)
 80026d4:	f003 fffc 	bl	80066d0 <iprintf>
	osDelay(500);
 80026d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026dc:	f001 ff74 	bl	80045c8 <osDelay>
	printf("Vehicle Speed: %ld,", data[0]);
 80026e0:	e7dc      	b.n	800269c <StartDefaultTask+0x8>
 80026e2:	bf00      	nop
 80026e4:	2000053c 	.word	0x2000053c
 80026e8:	080097dc 	.word	0x080097dc
 80026ec:	080097f0 	.word	0x080097f0
 80026f0:	08009804 	.word	0x08009804
 80026f4:	08009810 	.word	0x08009810
 80026f8:	08009820 	.word	0x08009820

080026fc <readMatricial>:

/*
INPUT FUNCTIONS
 */

void readMatricial(void const * argument){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t counter = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
	uint32_t temp;
	/* Infinite loop */
	USER_USART1_Init();
 8002708:	f7ff fe7e 	bl	8002408 <USER_USART1_Init>

	printf("Tt\r\n");
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <readMatricial+0x24>)
 800270e:	f004 f845 	bl	800679c <puts>
	for(;;)
	{
	  barrido();
 8002712:	f000 f96f 	bl	80029f4 <barrido>
	  osDelay(50);
 8002716:	2032      	movs	r0, #50	; 0x32
 8002718:	f001 ff56 	bl	80045c8 <osDelay>
	  barrido();
 800271c:	e7f9      	b.n	8002712 <readMatricial+0x16>
 800271e:	bf00      	nop
 8002720:	0800982c 	.word	0x0800982c
 8002724:	00000000 	.word	0x00000000

08002728 <readADC>:
	}
	/* USER CODE END 5 */
}

void readADC(void const * argument){
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	 El dispositivo deberá recibir una señal analógica
	 de un potenciómetro para el acelerador.
	 */

	uint32_t msg;
	float dataADC = 0;
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
	float converted = 0;
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	613b      	str	r3, [r7, #16]

	USER_ADC_Init();
 800273c:	f7ff ff4e 	bl	80025dc <USER_ADC_Init>
	USER_ADC_Calibration();
 8002740:	f7ff ff80 	bl	8002644 <USER_ADC_Calibration>
	ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <readADC+0xa8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <readADC+0xa8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6093      	str	r3, [r2, #8]

	  /* Infinite loop */
	for(;;)
	{
	  dataADC = USER_ADC_Read();
 8002750:	f7ff ff8e 	bl	8002670 <USER_ADC_Read>
 8002754:	4603      	mov	r3, r0
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fabc 	bl	8000cd4 <__aeabi_ui2f>
 800275c:	4603      	mov	r3, r0
 800275e:	617b      	str	r3, [r7, #20]
	  converted = 100*(dataADC/((pow(2,12)-1)));
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f7fd fe61 	bl	8000428 <__aeabi_f2d>
 8002766:	a318      	add	r3, pc, #96	; (adr r3, 80027c8 <readADC+0xa0>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd ffde 	bl	800072c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <readADC+0xac>)
 800277e:	f7fd feab 	bl	80004d8 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe f99d 	bl	8000ac8 <__aeabi_d2f>
 800278e:	4603      	mov	r3, r0
 8002790:	613b      	str	r3, [r7, #16]
	  msg = (uint32_t)floor(converted);
 8002792:	6938      	ldr	r0, [r7, #16]
 8002794:	f7fd fe48 	bl	8000428 <__aeabi_f2d>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	f006 f94a 	bl	8008a38 <floor>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f96c 	bl	8000a88 <__aeabi_d2uiz>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
//	  EngTrModel_U.Throttle = msg;	//Actualizamos la velocidad del acelerador
//	  EngTrModel_U.BrakeTorque = 0.0; //Paramos de frenar
//	  osMessagePut(msgQueueHandle, msg, 0);
	  data[3] = msg;
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <readADC+0xb0>)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	60d3      	str	r3, [r2, #12]
	  osDelay(5);
 80027ba:	2005      	movs	r0, #5
 80027bc:	f001 ff04 	bl	80045c8 <osDelay>
	  dataADC = USER_ADC_Read();
 80027c0:	e7c6      	b.n	8002750 <readADC+0x28>
 80027c2:	bf00      	nop
 80027c4:	f3af 8000 	nop.w
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40affe00 	.word	0x40affe00
 80027d0:	40012400 	.word	0x40012400
 80027d4:	40590000 	.word	0x40590000
 80027d8:	2000053c 	.word	0x2000053c

080027dc <readState>:
	}
	  /* USER CODE END 5 */
}

void readState(void const * argument){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	EngTrModel_initialize();
 80027e4:	f7ff fa2a 	bl	8001c3c <EngTrModel_initialize>
	  /* Infinite loop */

	for(;;)
	{
		EngTrModel_step();
 80027e8:	f7fe ff4e 	bl	8001688 <EngTrModel_step>
		data[0] = EngTrModel_Y.VehicleSpeed;
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <readState+0x54>)
 80027ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe f947 	bl	8000a88 <__aeabi_d2uiz>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <readState+0x58>)
 80027fe:	6013      	str	r3, [r2, #0]
		data[1] = EngTrModel_Y.EngineSpeed;
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <readState+0x54>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f7fe f93d 	bl	8000a88 <__aeabi_d2uiz>
 800280e:	4603      	mov	r3, r0
 8002810:	4a08      	ldr	r2, [pc, #32]	; (8002834 <readState+0x58>)
 8002812:	6053      	str	r3, [r2, #4]
		data[2] = EngTrModel_Y.Gear;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <readState+0x54>)
 8002816:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f933 	bl	8000a88 <__aeabi_d2uiz>
 8002822:	4603      	mov	r3, r0
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <readState+0x58>)
 8002826:	6093      	str	r3, [r2, #8]

//		printf("Vehicle Speed: %f\r\n", EngTrModel_Y.VehicleSpeed);
//		printf("Engine Speed: %f\r\n", EngTrModel_Y.EngineSpeed);
//		printf("Gear: %f\r\n", EngTrModel_Y.Gear);
		osDelay(40);
 8002828:	2028      	movs	r0, #40	; 0x28
 800282a:	f001 fecd 	bl	80045c8 <osDelay>
		EngTrModel_step();
 800282e:	e7db      	b.n	80027e8 <readState+0xc>
 8002830:	20000270 	.word	0x20000270
 8002834:	2000053c 	.word	0x2000053c

08002838 <readControl>:
	}
}

void readControl(void const * argument){
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	for(;;){
//		r_event = osMessageGet(msgQueueHandle, 10);
//		if( r_event.status == osEventMessage )
//			value = r_event.value.v;

		value = data[3];
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <readControl+0x5c>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]

		if(!(GPIOC->IDR & GPIO_IDR_IDR13)){
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <readControl+0x60>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <readControl+0x36>
			EngTrModel_U.Throttle = 2.0;
 8002852:	4912      	ldr	r1, [pc, #72]	; (800289c <readControl+0x64>)
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800285c:	e9c1 2300 	strd	r2, r3, [r1]
			EngTrModel_U.BrakeTorque = 100.0;
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <readControl+0x64>)
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <readControl+0x68>)
 8002868:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800286c:	e00e      	b.n	800288c <readControl+0x54>
		}
		else{
			EngTrModel_U.Throttle = value;
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7fd fdb8 	bl	80003e4 <__aeabi_ui2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4908      	ldr	r1, [pc, #32]	; (800289c <readControl+0x64>)
 800287a:	e9c1 2300 	strd	r2, r3, [r1]
//			printf("%d\n\r", value);
			EngTrModel_U.BrakeTorque = 0.0;
 800287e:	4907      	ldr	r1, [pc, #28]	; (800289c <readControl+0x64>)
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		osDelay(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f001 fe9b 	bl	80045c8 <osDelay>
		value = data[3];
 8002892:	e7d5      	b.n	8002840 <readControl+0x8>
 8002894:	2000053c 	.word	0x2000053c
 8002898:	40011000 	.word	0x40011000
 800289c:	20000260 	.word	0x20000260
 80028a0:	40590000 	.word	0x40590000

080028a4 <sendLCD>:
}


/*	OUTPUT FUNCTIONS	*/

void sendLCD(void const * argument){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b092      	sub	sp, #72	; 0x48
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

	uint32_t valorAnterior[5];
	uint32_t value[5], valorCambiado;
//	osEvent r_event;

	LCD_Init( );//				inicializamos la libreria del LCD
 80028ac:	f7ff f9e6 	bl	8001c7c <LCD_Init>
	LCD_Cursor_ON( );//			cursor visible activo
 80028b0:	200e      	movs	r0, #14
 80028b2:	f7ff fb03 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Clear( );//			borra la pantalla
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff fb00 	bl	8001ebc <LCD_Write_Cmd>
	LCD_Set_Cursor( 1,0);
 80028bc:	2100      	movs	r1, #0
 80028be:	2001      	movs	r0, #1
 80028c0:	f7ff fb22 	bl	8001f08 <LCD_Set_Cursor>
	for(;;)
	{
//		r_event = osMessagePeek(msgQueueHandle, 100);
//		if( r_event.status == osEventMessage )
//			value = r_event.value.v;
		for(int i = 0; i < 5; i++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
 80028c8:	e00c      	b.n	80028e4 <sendLCD+0x40>
			value[i] = data[i];
 80028ca:	4a44      	ldr	r2, [pc, #272]	; (80029dc <sendLCD+0x138>)
 80028cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	3348      	adds	r3, #72	; 0x48
 80028d8:	443b      	add	r3, r7
 80028da:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 5; i++)
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	3301      	adds	r3, #1
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	ddef      	ble.n	80028ca <sendLCD+0x26>

		 valorCambiado = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
			  // Comprobar si el valor ha cambiado
		 for(int i = 0; i < 5; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f2:	e023      	b.n	800293c <sendLCD+0x98>
			 if (value[i] < (valorAnterior[i] - 3) || value[i] > (valorAnterior[i] + 3)) {
 80028f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	3348      	adds	r3, #72	; 0x48
 80028fa:	443b      	add	r3, r7
 80028fc:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3348      	adds	r3, #72	; 0x48
 8002906:	443b      	add	r3, r7
 8002908:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800290c:	3b03      	subs	r3, #3
 800290e:	429a      	cmp	r2, r3
 8002910:	d30e      	bcc.n	8002930 <sendLCD+0x8c>
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3348      	adds	r3, #72	; 0x48
 8002918:	443b      	add	r3, r7
 800291a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	443b      	add	r3, r7
 8002926:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800292a:	3303      	adds	r3, #3
 800292c:	429a      	cmp	r2, r3
 800292e:	d902      	bls.n	8002936 <sendLCD+0x92>
				  valorCambiado = 1;
 8002930:	2301      	movs	r3, #1
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
				  break;
 8002934:	e005      	b.n	8002942 <sendLCD+0x9e>
		 for(int i = 0; i < 5; i++){
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002938:	3301      	adds	r3, #1
 800293a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293e:	2b04      	cmp	r3, #4
 8002940:	ddd8      	ble.n	80028f4 <sendLCD+0x50>
			 }
		 }
		if (valorCambiado) {
 8002942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002944:	2b00      	cmp	r3, #0
 8002946:	d044      	beq.n	80029d2 <sendLCD+0x12e>
				  LCD_Clear();
 8002948:	2001      	movs	r0, #1
 800294a:	f7ff fab7 	bl	8001ebc <LCD_Write_Cmd>
				  LCD_Set_Cursor(1, 0);
 800294e:	2100      	movs	r1, #0
 8002950:	2001      	movs	r0, #1
 8002952:	f7ff fad9 	bl	8001f08 <LCD_Set_Cursor>
				  LCD_Put_Str("VS:");
 8002956:	4822      	ldr	r0, [pc, #136]	; (80029e0 <sendLCD+0x13c>)
 8002958:	f7ff fb01 	bl	8001f5e <LCD_Put_Str>
				  LCD_Put_Num(value[0]);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fb1b 	bl	8001f9a <LCD_Put_Num>
				  LCD_Put_Str(" ES:");
 8002964:	481f      	ldr	r0, [pc, #124]	; (80029e4 <sendLCD+0x140>)
 8002966:	f7ff fafa 	bl	8001f5e <LCD_Put_Str>
				  LCD_Put_Num(value[1]);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fb14 	bl	8001f9a <LCD_Put_Num>
				  LCD_Set_Cursor(2, 0);
 8002972:	2100      	movs	r1, #0
 8002974:	2002      	movs	r0, #2
 8002976:	f7ff fac7 	bl	8001f08 <LCD_Set_Cursor>
				  LCD_Put_Str("GR:");;
 800297a:	481b      	ldr	r0, [pc, #108]	; (80029e8 <sendLCD+0x144>)
 800297c:	f7ff faef 	bl	8001f5e <LCD_Put_Str>
				  LCD_Put_Num(value[2]);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fb09 	bl	8001f9a <LCD_Put_Num>
				  LCD_Put_Str(" TH:");
 8002988:	4818      	ldr	r0, [pc, #96]	; (80029ec <sendLCD+0x148>)
 800298a:	f7ff fae8 	bl	8001f5e <LCD_Put_Str>
				  LCD_Put_Num(value[3]);
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fb02 	bl	8001f9a <LCD_Put_Num>
				  LCD_Put_Str(" MD:");
 8002996:	4816      	ldr	r0, [pc, #88]	; (80029f0 <sendLCD+0x14c>)
 8002998:	f7ff fae1 	bl	8001f5e <LCD_Put_Str>
				  int dato = data[4];
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <sendLCD+0x138>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
				  LCD_Put_Num(dato);
 80029a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029a4:	f7ff faf9 	bl	8001f9a <LCD_Put_Num>

				  for(int i = 0; i < 5; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ac:	e00e      	b.n	80029cc <sendLCD+0x128>
					  valorAnterior[i] = value[i];
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3348      	adds	r3, #72	; 0x48
 80029b4:	443b      	add	r3, r7
 80029b6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	3348      	adds	r3, #72	; 0x48
 80029c0:	443b      	add	r3, r7
 80029c2:	f843 2c28 	str.w	r2, [r3, #-40]
				  for(int i = 0; i < 5; i++)
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	3301      	adds	r3, #1
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	dded      	ble.n	80029ae <sendLCD+0x10a>
		}
//		temp = osKernelSysTick() - (100 * counter++);
		osDelay(200);
 80029d2:	20c8      	movs	r0, #200	; 0xc8
 80029d4:	f001 fdf8 	bl	80045c8 <osDelay>
		for(int i = 0; i < 5; i++)
 80029d8:	e774      	b.n	80028c4 <sendLCD+0x20>
 80029da:	bf00      	nop
 80029dc:	2000053c 	.word	0x2000053c
 80029e0:	08009830 	.word	0x08009830
 80029e4:	08009834 	.word	0x08009834
 80029e8:	0800983c 	.word	0x0800983c
 80029ec:	08009840 	.word	0x08009840
 80029f0:	08009848 	.word	0x08009848

080029f4 <barrido>:
//
//}

/*	PROCESS FUNCTIONS	*/

void barrido(void){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	//ROWS
	//	  	 PA 12,6,11,7
	//	  First Column
	GPIOB->ODR &= ~GPIO_ODR_ODR3;
 80029f8:	4ba2      	ldr	r3, [pc, #648]	; (8002c84 <barrido+0x290>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4aa1      	ldr	r2, [pc, #644]	; (8002c84 <barrido+0x290>)
 80029fe:	f023 0308 	bic.w	r3, r3, #8
 8002a02:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002a04:	4b9f      	ldr	r3, [pc, #636]	; (8002c84 <barrido+0x290>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a9e      	ldr	r2, [pc, #632]	; (8002c84 <barrido+0x290>)
 8002a0a:	f043 0310 	orr.w	r3, r3, #16
 8002a0e:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8002a10:	4b9c      	ldr	r3, [pc, #624]	; (8002c84 <barrido+0x290>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a9b      	ldr	r2, [pc, #620]	; (8002c84 <barrido+0x290>)
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 8002a1c:	4b99      	ldr	r3, [pc, #612]	; (8002c84 <barrido+0x290>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a98      	ldr	r2, [pc, #608]	; (8002c84 <barrido+0x290>)
 8002a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a26:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //1
 8002a28:	4b97      	ldr	r3, [pc, #604]	; (8002c88 <barrido+0x294>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d112      	bne.n	8002a5a <barrido+0x66>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a34:	4b94      	ldr	r3, [pc, #592]	; (8002c88 <barrido+0x294>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a93      	ldr	r2, [pc, #588]	; (8002c88 <barrido+0x294>)
 8002a3a:	f083 0320 	eor.w	r3, r3, #32
 8002a3e:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Left\n\r");
 8002a40:	4892      	ldr	r0, [pc, #584]	; (8002c8c <barrido+0x298>)
 8002a42:	f003 fe45 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002a46:	bf00      	nop
 8002a48:	4b8f      	ldr	r3, [pc, #572]	; (8002c88 <barrido+0x294>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f9      	beq.n	8002a48 <barrido+0x54>
		HAL_Delay(10);
 8002a54:	200a      	movs	r0, #10
 8002a56:	f000 fdd3 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //4
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <barrido+0x294>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d112      	bne.n	8002a8c <barrido+0x98>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a66:	4b88      	ldr	r3, [pc, #544]	; (8002c88 <barrido+0x294>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4a87      	ldr	r2, [pc, #540]	; (8002c88 <barrido+0x294>)
 8002a6c:	f083 0320 	eor.w	r3, r3, #32
 8002a70:	60d3      	str	r3, [r2, #12]
		printf("Left\n\r");
 8002a72:	4887      	ldr	r0, [pc, #540]	; (8002c90 <barrido+0x29c>)
 8002a74:	f003 fe2c 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002a78:	bf00      	nop
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <barrido+0x294>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f9      	beq.n	8002a7a <barrido+0x86>
		HAL_Delay(10);
 8002a86:	200a      	movs	r0, #10
 8002a88:	f000 fdba 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //7
 8002a8c:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <barrido+0x294>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <barrido+0xc4>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002a98:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <barrido+0x294>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a7a      	ldr	r2, [pc, #488]	; (8002c88 <barrido+0x294>)
 8002a9e:	f083 0320 	eor.w	r3, r3, #32
 8002aa2:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002aa4:	bf00      	nop
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <barrido+0x294>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f9      	beq.n	8002aa6 <barrido+0xb2>
		HAL_Delay(10);
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f000 fda4 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //* delete
 8002ab8:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <barrido+0x294>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10f      	bne.n	8002ae4 <barrido+0xf0>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002ac4:	4b70      	ldr	r3, [pc, #448]	; (8002c88 <barrido+0x294>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a6f      	ldr	r2, [pc, #444]	; (8002c88 <barrido+0x294>)
 8002aca:	f083 0320 	eor.w	r3, r3, #32
 8002ace:	60d3      	str	r3, [r2, #12]
		//printf("");
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002ad0:	bf00      	nop
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <barrido+0x294>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f9      	beq.n	8002ad2 <barrido+0xde>
		HAL_Delay(10);
 8002ade:	200a      	movs	r0, #10
 8002ae0:	f000 fd8e 	bl	8003600 <HAL_Delay>
	}

	//ROWS
	//	  	 PA 12,6,11,7
	//Second Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002ae4:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <barrido+0x290>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <barrido+0x290>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR4;
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <barrido+0x290>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <barrido+0x290>)
 8002af6:	f023 0310 	bic.w	r3, r3, #16
 8002afa:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8002afc:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <barrido+0x290>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <barrido+0x290>)
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 8002b08:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <barrido+0x290>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <barrido+0x290>)
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b12:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //2
 8002b14:	4b5c      	ldr	r3, [pc, #368]	; (8002c88 <barrido+0x294>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d112      	bne.n	8002b46 <barrido+0x152>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <barrido+0x294>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <barrido+0x294>)
 8002b26:	f083 0320 	eor.w	r3, r3, #32
 8002b2a:	60d3      	str	r3, [r2, #12]
		printf("Forward\n\r");
 8002b2c:	4859      	ldr	r0, [pc, #356]	; (8002c94 <barrido+0x2a0>)
 8002b2e:	f003 fdcf 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002b32:	bf00      	nop
 8002b34:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <barrido+0x294>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f9      	beq.n	8002b34 <barrido+0x140>
		HAL_Delay(10);
 8002b40:	200a      	movs	r0, #10
 8002b42:	f000 fd5d 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //5
 8002b46:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <barrido+0x294>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d112      	bne.n	8002b78 <barrido+0x184>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b52:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <barrido+0x294>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <barrido+0x294>)
 8002b58:	f083 0320 	eor.w	r3, r3, #32
 8002b5c:	60d3      	str	r3, [r2, #12]
	  printf("Braking\n\r");
 8002b5e:	484e      	ldr	r0, [pc, #312]	; (8002c98 <barrido+0x2a4>)
 8002b60:	f003 fdb6 	bl	80066d0 <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002b64:	bf00      	nop
 8002b66:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <barrido+0x294>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f9      	beq.n	8002b66 <barrido+0x172>
	  HAL_Delay(10);
 8002b72:	200a      	movs	r0, #10
 8002b74:	f000 fd44 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //8
 8002b78:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <barrido+0x294>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d112      	bne.n	8002baa <barrido+0x1b6>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <barrido+0x294>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a3f      	ldr	r2, [pc, #252]	; (8002c88 <barrido+0x294>)
 8002b8a:	f083 0320 	eor.w	r3, r3, #32
 8002b8e:	60d3      	str	r3, [r2, #12]
	  printf("Backward\n\r");
 8002b90:	4842      	ldr	r0, [pc, #264]	; (8002c9c <barrido+0x2a8>)
 8002b92:	f003 fd9d 	bl	80066d0 <iprintf>
	  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002b96:	bf00      	nop
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <barrido+0x294>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f9      	beq.n	8002b98 <barrido+0x1a4>
	  HAL_Delay(10);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f000 fd2b 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //0
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <barrido+0x294>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <barrido+0x1e2>
	  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <barrido+0x294>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a33      	ldr	r2, [pc, #204]	; (8002c88 <barrido+0x294>)
 8002bbc:	f083 0320 	eor.w	r3, r3, #32
 8002bc0:	60d3      	str	r3, [r2, #12]
	  //printf("");
	  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002bc2:	bf00      	nop
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <barrido+0x294>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f9      	beq.n	8002bc4 <barrido+0x1d0>
	  HAL_Delay(10);
 8002bd0:	200a      	movs	r0, #10
 8002bd2:	f000 fd15 	bl	8003600 <HAL_Delay>
	}

	//Third Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <barrido+0x290>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <barrido+0x290>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <barrido+0x290>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a27      	ldr	r2, [pc, #156]	; (8002c84 <barrido+0x290>)
 8002be8:	f043 0310 	orr.w	r3, r3, #16
 8002bec:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR5;
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <barrido+0x290>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <barrido+0x290>)
 8002bf4:	f023 0320 	bic.w	r3, r3, #32
 8002bf8:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR10;
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <barrido+0x290>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <barrido+0x290>)
 8002c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c04:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //3
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <barrido+0x294>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d112      	bne.n	8002c38 <barrido+0x244>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <barrido+0x294>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <barrido+0x294>)
 8002c18:	f083 0320 	eor.w	r3, r3, #32
 8002c1c:	60d3      	str	r3, [r2, #12]
		printf("Turn Signal Right\n\r");
 8002c1e:	4820      	ldr	r0, [pc, #128]	; (8002ca0 <barrido+0x2ac>)
 8002c20:	f003 fd56 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002c24:	bf00      	nop
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <barrido+0x294>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f9      	beq.n	8002c26 <barrido+0x232>
		HAL_Delay(10);
 8002c32:	200a      	movs	r0, #10
 8002c34:	f000 fce4 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //6
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <barrido+0x294>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d112      	bne.n	8002c6a <barrido+0x276>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <barrido+0x294>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <barrido+0x294>)
 8002c4a:	f083 0320 	eor.w	r3, r3, #32
 8002c4e:	60d3      	str	r3, [r2, #12]
		printf("Right\n\r");
 8002c50:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <barrido+0x2b0>)
 8002c52:	f003 fd3d 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002c56:	bf00      	nop
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <barrido+0x294>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f9      	beq.n	8002c58 <barrido+0x264>
		HAL_Delay(10);
 8002c64:	200a      	movs	r0, #10
 8002c66:	f000 fccb 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //9
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <barrido+0x294>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d122      	bne.n	8002cbc <barrido+0x2c8>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <barrido+0x294>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <barrido+0x294>)
 8002c7c:	f083 0320 	eor.w	r3, r3, #32
 8002c80:	60d3      	str	r3, [r2, #12]
 8002c82:	e011      	b.n	8002ca8 <barrido+0x2b4>
 8002c84:	40010c00 	.word	0x40010c00
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	08009850 	.word	0x08009850
 8002c90:	08009864 	.word	0x08009864
 8002c94:	0800986c 	.word	0x0800986c
 8002c98:	08009878 	.word	0x08009878
 8002c9c:	08009884 	.word	0x08009884
 8002ca0:	08009890 	.word	0x08009890
 8002ca4:	080098a4 	.word	0x080098a4
		  //printf();
		  while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002ca8:	bf00      	nop
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <barrido+0x3f0>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f9      	beq.n	8002caa <barrido+0x2b6>
		  HAL_Delay(10);
 8002cb6:	200a      	movs	r0, #10
 8002cb8:	f000 fca2 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //# space
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <barrido+0x3f0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10f      	bne.n	8002ce8 <barrido+0x2f4>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002cc8:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <barrido+0x3f0>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a45      	ldr	r2, [pc, #276]	; (8002de4 <barrido+0x3f0>)
 8002cce:	f083 0320 	eor.w	r3, r3, #32
 8002cd2:	60d3      	str	r3, [r2, #12]
		  //printf("");
		  while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002cd4:	bf00      	nop
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <barrido+0x3f0>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f9      	beq.n	8002cd6 <barrido+0x2e2>
		  HAL_Delay(10);
 8002ce2:	200a      	movs	r0, #10
 8002ce4:	f000 fc8c 	bl	8003600 <HAL_Delay>
	}

	//Fourth Column
	GPIOB->ODR |= GPIO_ODR_ODR3;
 8002ce8:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <barrido+0x3f4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <barrido+0x3f4>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <barrido+0x3f4>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <barrido+0x3f4>)
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <barrido+0x3f4>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <barrido+0x3f4>)
 8002d06:	f043 0320 	orr.w	r3, r3, #32
 8002d0a:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~GPIO_ODR_ODR10;
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <barrido+0x3f4>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a35      	ldr	r2, [pc, #212]	; (8002de8 <barrido+0x3f4>)
 8002d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d16:	60d3      	str	r3, [r2, #12]

	if(!(GPIOA->IDR & GPIO_IDR_IDR12)){ //A
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <barrido+0x3f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d112      	bne.n	8002d4a <barrido+0x356>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <barrido+0x3f0>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <barrido+0x3f0>)
 8002d2a:	f083 0320 	eor.w	r3, r3, #32
 8002d2e:	60d3      	str	r3, [r2, #12]
		printf("Drive Mode\n\r");
 8002d30:	482e      	ldr	r0, [pc, #184]	; (8002dec <barrido+0x3f8>)
 8002d32:	f003 fccd 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}
 8002d36:	bf00      	nop
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <barrido+0x3f0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f9      	beq.n	8002d38 <barrido+0x344>
		HAL_Delay(10);
 8002d44:	200a      	movs	r0, #10
 8002d46:	f000 fc5b 	bl	8003600 <HAL_Delay>
	  }
	if(!(GPIOA->IDR & GPIO_IDR_IDR6)){ //B
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <barrido+0x3f0>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d112      	bne.n	8002d7c <barrido+0x388>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <barrido+0x3f0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <barrido+0x3f0>)
 8002d5c:	f083 0320 	eor.w	r3, r3, #32
 8002d60:	60d3      	str	r3, [r2, #12]
		printf("Neutral Mode\n\r");
 8002d62:	4823      	ldr	r0, [pc, #140]	; (8002df0 <barrido+0x3fc>)
 8002d64:	f003 fcb4 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR6)){}
 8002d68:	bf00      	nop
 8002d6a:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <barrido+0x3f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f9      	beq.n	8002d6a <barrido+0x376>
		HAL_Delay(10);
 8002d76:	200a      	movs	r0, #10
 8002d78:	f000 fc42 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR11)){ //C
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <barrido+0x3f0>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d112      	bne.n	8002dae <barrido+0x3ba>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <barrido+0x3f0>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <barrido+0x3f0>)
 8002d8e:	f083 0320 	eor.w	r3, r3, #32
 8002d92:	60d3      	str	r3, [r2, #12]
		printf("Reverse Mode\n\r");
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <barrido+0x400>)
 8002d96:	f003 fc9b 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR11)){}
 8002d9a:	bf00      	nop
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <barrido+0x3f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f9      	beq.n	8002d9c <barrido+0x3a8>
		HAL_Delay(10);
 8002da8:	200a      	movs	r0, #10
 8002daa:	f000 fc29 	bl	8003600 <HAL_Delay>
	}
	if(!(GPIOA->IDR & GPIO_IDR_IDR7)){ //D
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <barrido+0x3f0>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d112      	bne.n	8002de0 <barrido+0x3ec>
		GPIOA->ODR ^= GPIO_ODR_ODR5;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <barrido+0x3f0>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <barrido+0x3f0>)
 8002dc0:	f083 0320 	eor.w	r3, r3, #32
 8002dc4:	60d3      	str	r3, [r2, #12]
		printf("D1 Mode\n\r");
 8002dc6:	480c      	ldr	r0, [pc, #48]	; (8002df8 <barrido+0x404>)
 8002dc8:	f003 fc82 	bl	80066d0 <iprintf>
		while(!(GPIOA->IDR & GPIO_IDR_IDR7)){}
 8002dcc:	bf00      	nop
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <barrido+0x3f0>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f9      	beq.n	8002dce <barrido+0x3da>
		HAL_Delay(10);
 8002dda:	200a      	movs	r0, #10
 8002ddc:	f000 fc10 	bl	8003600 <HAL_Delay>
	}
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010800 	.word	0x40010800
 8002de8:	40010c00 	.word	0x40010c00
 8002dec:	080098ac 	.word	0x080098ac
 8002df0:	080098bc 	.word	0x080098bc
 8002df4:	080098cc 	.word	0x080098cc
 8002df8:	080098dc 	.word	0x080098dc

08002dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e0e:	f000 fbdb 	bl	80035c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40000800 	.word	0x40000800

08002e20 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e24:	b672      	cpsid	i
}
 8002e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <Error_Handler+0x8>
	...

08002e2c <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00f      	b.n	8002e5e <_write+0x32>
		while( ( USART1->SR & USART_SR_TXE ) == 0 ){}
 8002e3e:	bf00      	nop
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <_write+0x48>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f9      	beq.n	8002e40 <_write+0x14>
		USART1->DR = *ptr++;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	60ba      	str	r2, [r7, #8]
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <_write+0x48>)
 8002e56:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	dbeb      	blt.n	8002e3e <_write+0x12>
	}
	return len;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40013800 	.word	0x40013800

08002e78 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	617b      	str	r3, [r7, #20]
  real_T inf = 0.0;
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d10a      	bne.n	8002eaa <rtGetInf+0x32>
    inf = rtGetInfF();
 8002e94:	f000 f836 	bl	8002f04 <rtGetInfF>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fac4 	bl	8000428 <__aeabi_f2d>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002ea8:	e022      	b.n	8002ef0 <rtGetInf+0x78>
  } else {
    uint16_T one = 1U;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <rtGetInf+0x54>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d009      	beq.n	8002ede <rtGetInf+0x66>
 8002eca:	e011      	b.n	8002ef0 <rtGetInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <rtGetInf+0x88>)
 8002ece:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
        inf = tmpVal.fltVal;
 8002ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002edc:	e008      	b.n	8002ef0 <rtGetInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <rtGetInf+0x88>)
 8002ee0:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
        inf = tmpVal.fltVal;
 8002ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002eee:	bf00      	nop
      }
    }
  }

  return inf;
 8002ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	7ff00000 	.word	0x7ff00000

08002f04 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8002f0a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8002f0e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002f22:	2340      	movs	r3, #64	; 0x40
 8002f24:	617b      	str	r3, [r7, #20]
  real_T minf = 0.0;
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d10a      	bne.n	8002f4e <rtGetMinusInf+0x32>
    minf = rtGetMinusInfF();
 8002f38:	f000 f836 	bl	8002fa8 <rtGetMinusInfF>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fa72 	bl	8000428 <__aeabi_f2d>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002f4c:	e022      	b.n	8002f94 <rtGetMinusInf+0x78>
  } else {
    uint16_T one = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <rtGetMinusInf+0x54>
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d009      	beq.n	8002f82 <rtGetMinusInf+0x66>
 8002f6e:	e011      	b.n	8002f94 <rtGetMinusInf+0x78>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <rtGetMinusInf+0x88>)
 8002f72:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
        minf = tmpVal.fltVal;
 8002f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002f80:	e008      	b.n	8002f94 <rtGetMinusInf+0x78>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <rtGetMinusInf+0x88>)
 8002f84:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
        minf = tmpVal.fltVal;
 8002f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8002f92:	bf00      	nop
      }
    }
  }

  return minf;
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	fff00000 	.word	0xfff00000

08002fa8 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <rtGetMinusInfF+0x18>)
 8002fb0:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8002fb2:	687b      	ldr	r3, [r7, #4]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	ff800000 	.word	0xff800000

08002fc4 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	617b      	str	r3, [r7, #20]
  real_T nan = 0.0;
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (bitsPerReal == 32U) {
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d10a      	bne.n	8002ff6 <rtGetNaN+0x32>
    nan = rtGetNaNF();
 8002fe0:	f000 f838 	bl	8003054 <rtGetNaNF>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fa1e 	bl	8000428 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002ff4:	e024      	b.n	8003040 <rtGetNaN+0x7c>
  } else {
    uint16_T one = 1U;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	823b      	strh	r3, [r7, #16]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8002ffa:	f107 0310 	add.w	r3, r7, #16
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	74fb      	strb	r3, [r7, #19]
    switch (machByteOrder) {
 800300c:	7cfb      	ldrb	r3, [r7, #19]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <rtGetNaN+0x54>
 8003012:	2b01      	cmp	r3, #1
 8003014:	d009      	beq.n	800302a <rtGetNaN+0x66>
 8003016:	e013      	b.n	8003040 <rtGetNaN+0x7c>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <rtGetNaN+0x8c>)
 800301a:	60fb      	str	r3, [r7, #12]
        tmpVal.bitVal.words.wordL = 0x00000000U;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
        nan = tmpVal.fltVal;
 8003020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003024:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 8003028:	e00a      	b.n	8003040 <rtGetNaN+0x7c>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;
 800302a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800302e:	603b      	str	r3, [r7, #0]
        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	607b      	str	r3, [r7, #4]
        nan = tmpVal.fltVal;
 8003036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        break;
 800303e:	bf00      	nop
      }
    }
  }

  return nan;
 8003040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	fff80000 	.word	0xfff80000

08003054 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]

  uint16_T one = 1U;
 8003060:	2301      	movs	r3, #1
 8003062:	80fb      	strh	r3, [r7, #6]
  enum {
    LittleEndian,
    BigEndian
  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 8003064:	1dbb      	adds	r3, r7, #6
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	73fb      	strb	r3, [r7, #15]
  switch (machByteOrder) {
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <rtGetNaNF+0x2c>
 800307a:	2b01      	cmp	r3, #1
 800307c:	d003      	beq.n	8003086 <rtGetNaNF+0x32>
 800307e:	e006      	b.n	800308e <rtGetNaNF+0x3a>
   case LittleEndian:
    {
      nanF.wordL.wordLuint = 0xFFC00000U;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <rtGetNaNF+0x48>)
 8003082:	60bb      	str	r3, [r7, #8]
      break;
 8003084:	e003      	b.n	800308e <rtGetNaNF+0x3a>
    }

   case BigEndian:
    {
      nanF.wordL.wordLuint = 0x7FFFFFFFU;
 8003086:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800308a:	60bb      	str	r3, [r7, #8]
      break;
 800308c:	bf00      	nop
    }
  }

  return nanF.wordL.wordLreal;
 800308e:	68bb      	ldr	r3, [r7, #8]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	ffc00000 	.word	0xffc00000

080030a0 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 80030a8:	f7ff ff8c 	bl	8002fc4 <rtGetNaN>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4911      	ldr	r1, [pc, #68]	; (80030f8 <rt_InitInfAndNaN+0x58>)
 80030b2:	e9c1 2300 	strd	r2, r3, [r1]
  rtNaNF = rtGetNaNF();
 80030b6:	f7ff ffcd 	bl	8003054 <rtGetNaNF>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <rt_InitInfAndNaN+0x5c>)
 80030be:	6013      	str	r3, [r2, #0]
  rtInf = rtGetInf();
 80030c0:	f7ff feda 	bl	8002e78 <rtGetInf>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	490d      	ldr	r1, [pc, #52]	; (8003100 <rt_InitInfAndNaN+0x60>)
 80030ca:	e9c1 2300 	strd	r2, r3, [r1]
  rtInfF = rtGetInfF();
 80030ce:	f7ff ff19 	bl	8002f04 <rtGetInfF>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <rt_InitInfAndNaN+0x64>)
 80030d6:	6013      	str	r3, [r2, #0]
  rtMinusInf = rtGetMinusInf();
 80030d8:	f7ff ff20 	bl	8002f1c <rtGetMinusInf>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4909      	ldr	r1, [pc, #36]	; (8003108 <rt_InitInfAndNaN+0x68>)
 80030e2:	e9c1 2300 	strd	r2, r3, [r1]
  rtMinusInfF = rtGetMinusInfF();
 80030e6:	f7ff ff5f 	bl	8002fa8 <rtGetMinusInfF>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4a07      	ldr	r2, [pc, #28]	; (800310c <rt_InitInfAndNaN+0x6c>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000568 	.word	0x20000568
 80030fc:	20000578 	.word	0x20000578
 8003100:	20000558 	.word	0x20000558
 8003104:	20000570 	.word	0x20000570
 8003108:	20000560 	.word	0x20000560
 800310c:	20000574 	.word	0x20000574

08003110 <rtIsInf>:

/* Test if value is infinite */
boolean_T rtIsInf(real_T value)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	e9c7 0100 	strd	r0, r1, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <rtIsInf+0x40>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003124:	f7fd fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <rtIsInf+0x32>
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <rtIsInf+0x44>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003138:	f7fd fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <rtIsInf+0x36>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <rtIsInf+0x38>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000558 	.word	0x20000558
 8003154:	20000560 	.word	0x20000560

08003158 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
boolean_T rtIsNaN(real_T value)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	e9c7 0100 	strd	r0, r1, [r7]
  boolean_T result = (boolean_T) 0;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8003168:	2340      	movs	r3, #64	; 0x40
 800316a:	623b      	str	r3, [r7, #32]
  if (bitsPerReal == 32U) {
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b20      	cmp	r3, #32
 8003170:	d10b      	bne.n	800318a <rtIsNaN+0x32>
    result = rtIsNaNF((real32_T)value);
 8003172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003176:	f7fd fca7 	bl	8000ac8 <__aeabi_d2f>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f84d 	bl	800321c <rtIsNaNF>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003188:	e040      	b.n	800320c <rtIsNaN+0xb4>
  } else {
    uint16_T one = 1U;
 800318a:	2301      	movs	r3, #1
 800318c:	83bb      	strh	r3, [r7, #28]
    enum {
      LittleEndian,
      BigEndian
    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	77fb      	strb	r3, [r7, #31]
    switch (machByteOrder) {
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <rtIsNaN+0x54>
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d018      	beq.n	80031dc <rtIsNaN+0x84>
 80031aa:	e02f      	b.n	800320c <rtIsNaN+0xb4>
        union {
          LittleEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80031ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <rtIsNaN+0xc0>)
 80031b8:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <rtIsNaN+0xc0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <rtIsNaN+0x7c>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <rtIsNaN+0x78>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80031ca:	693b      	ldr	r3, [r7, #16]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <rtIsNaN+0x7c>
                             0x7FF00000 &&
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <rtIsNaN+0x7e>
 80031d4:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80031d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 80031da:	e017      	b.n	800320c <rtIsNaN+0xb4>
        union {
          BigEndianIEEEDouble bitVal;
          real_T fltVal;
        } tmpVal;

        tmpVal.fltVal = value;
 80031dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <rtIsNaN+0xc0>)
 80031e8:	4013      	ands	r3, r2
                             0x7FF00000 &&
 80031ea:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <rtIsNaN+0xc0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d109      	bne.n	8003204 <rtIsNaN+0xac>
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
                             0x7FF00000 &&
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <rtIsNaN+0xa8>
                              (tmpVal.bitVal.words.wordL != 0) ));
 80031fa:	68fb      	ldr	r3, [r7, #12]
                             ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <rtIsNaN+0xac>
                             0x7FF00000 &&
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <rtIsNaN+0xae>
 8003204:	2300      	movs	r3, #0
        result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 800320a:	bf00      	nop
      }
    }
  }

  return result;
 800320c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	7ff00000 	.word	0x7ff00000

0800321c <rtIsNaNF>:

/* Test if single-precision value is not a number */
boolean_T rtIsNaNF(real32_T value)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800322e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003232:	d106      	bne.n	8003242 <rtIsNaNF+0x26>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <rtIsNaNF+0x26>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <rtIsNaNF+0x28>
 8003242:	2300      	movs	r3, #0
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_MspInit+0x68>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_MspInit+0x68>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6193      	str	r3, [r2, #24]
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_MspInit+0x68>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_MspInit+0x68>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_MspInit+0x68>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_MspInit+0x68>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	210f      	movs	r1, #15
 800328a:	f06f 0001 	mvn.w	r0, #1
 800328e:	f000 fa90 	bl	80037b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_MspInit+0x6c>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_MspInit+0x6c>)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010000 	.word	0x40010000

080032c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_InitTick+0xe8>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a33      	ldr	r2, [pc, #204]	; (80033a8 <HAL_InitTick+0xe8>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_InitTick+0xe8>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032ee:	f107 0210 	add.w	r2, r7, #16
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fe63 	bl	8003fc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003308:	f000 fe48 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 800330c:	6378      	str	r0, [r7, #52]	; 0x34
 800330e:	e004      	b.n	800331a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003310:	f000 fe44 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 8003314:	4603      	mov	r3, r0
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_InitTick+0xec>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0c9b      	lsrs	r3, r3, #18
 8003324:	3b01      	subs	r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_InitTick+0xf0>)
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_InitTick+0xf4>)
 800332c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_InitTick+0xf0>)
 8003330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003334:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_InitTick+0xf0>)
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_InitTick+0xf0>)
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_InitTick+0xf0>)
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_InitTick+0xf0>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <HAL_InitTick+0xf0>)
 8003350:	f000 fe86 	bl	8004060 <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800335a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11b      	bne.n	800339a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003362:	4813      	ldr	r0, [pc, #76]	; (80033b0 <HAL_InitTick+0xf0>)
 8003364:	f000 fed4 	bl	8004110 <HAL_TIM_Base_Start_IT>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800336e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003372:	2b00      	cmp	r3, #0
 8003374:	d111      	bne.n	800339a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003376:	201e      	movs	r0, #30
 8003378:	f000 fa37 	bl	80037ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d808      	bhi.n	8003394 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003382:	2200      	movs	r2, #0
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	201e      	movs	r0, #30
 8003388:	f000 fa13 	bl	80037b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800338c:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <HAL_InitTick+0xf8>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e002      	b.n	800339a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800339a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3738      	adds	r7, #56	; 0x38
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	2000057c 	.word	0x2000057c
 80033b4:	40000800 	.word	0x40000800
 80033b8:	20000004 	.word	0x20000004

080033bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <NMI_Handler+0x4>

080033c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <MemManage_Handler+0x4>

080033ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <BusFault_Handler+0x4>

080033d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <UsageFault_Handler+0x4>

080033da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
	...

080033e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM4_IRQHandler+0x10>)
 80033ee:	f000 fee1 	bl	80041b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000057c 	.word	0x2000057c

080033fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return 1;
 8003400:	2301      	movs	r3, #1
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <_kill>:

int _kill(int pid, int sig)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003414:	f003 fb4a 	bl	8006aac <__errno>
 8003418:	4603      	mov	r3, r0
 800341a:	2216      	movs	r2, #22
 800341c:	601a      	str	r2, [r3, #0]
  return -1;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <_exit>:

void _exit (int status)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003432:	f04f 31ff 	mov.w	r1, #4294967295
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffe7 	bl	800340a <_kill>
  while (1) {}    /* Make sure we hang here */
 800343c:	e7fe      	b.n	800343c <_exit+0x12>

0800343e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e00a      	b.n	8003466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003450:	f3af 8000 	nop.w
 8003454:	4601      	mov	r1, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	b2ca      	uxtb	r2, r1
 800345e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	dbf0      	blt.n	8003450 <_read+0x12>
  }

  return len;
 800346e:	687b      	ldr	r3, [r7, #4]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349e:	605a      	str	r2, [r3, #4]
  return 0;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <_isatty>:

int _isatty(int file)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034b4:	2301      	movs	r3, #1
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <_sbrk+0x5c>)
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <_sbrk+0x60>)
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <_sbrk+0x64>)
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <_sbrk+0x68>)
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d207      	bcs.n	8003518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003508:	f003 fad0 	bl	8006aac <__errno>
 800350c:	4603      	mov	r3, r0
 800350e:	220c      	movs	r2, #12
 8003510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e009      	b.n	800352c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <_sbrk+0x64>)
 8003528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20005000 	.word	0x20005000
 8003538:	00000400 	.word	0x00000400
 800353c:	200005c4 	.word	0x200005c4
 8003540:	20002c68 	.word	0x20002c68

08003544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003550:	f7ff fff8 	bl	8003544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003556:	490c      	ldr	r1, [pc, #48]	; (8003588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003558:	4a0c      	ldr	r2, [pc, #48]	; (800358c <LoopFillZerobss+0x16>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800355c:	e002      	b.n	8003564 <LoopCopyDataInit>

0800355e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800355e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003562:	3304      	adds	r3, #4

08003564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003568:	d3f9      	bcc.n	800355e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800356c:	4c09      	ldr	r4, [pc, #36]	; (8003594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800356e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003570:	e001      	b.n	8003576 <LoopFillZerobss>

08003572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003574:	3204      	adds	r2, #4

08003576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003578:	d3fb      	bcc.n	8003572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800357a:	f003 fa9d 	bl	8006ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800357e:	f7fe fdc7 	bl	8002110 <main>
  bx lr
 8003582:	4770      	bx	lr
  ldr r0, =_sdata
 8003584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003588:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800358c:	0800a548 	.word	0x0800a548
  ldr r2, =_sbss
 8003590:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003594:	20002c64 	.word	0x20002c64

08003598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003598:	e7fe      	b.n	8003598 <ADC1_2_IRQHandler>
	...

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_Init+0x28>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HAL_Init+0x28>)
 80035a6:	f043 0310 	orr.w	r3, r3, #16
 80035aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 f8f5 	bl	800379c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035b2:	200f      	movs	r0, #15
 80035b4:	f7ff fe84 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035b8:	f7ff fe4a 	bl	8003250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000

080035c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_IncTick+0x1c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_IncTick+0x20>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	4a03      	ldr	r2, [pc, #12]	; (80035e8 <HAL_IncTick+0x20>)
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000008 	.word	0x20000008
 80035e8:	200005c8 	.word	0x200005c8

080035ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return uwTick;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <HAL_GetTick+0x10>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	200005c8 	.word	0x200005c8

08003600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff fff0 	bl	80035ec <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d005      	beq.n	8003626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <HAL_Delay+0x44>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003626:	bf00      	nop
 8003628:	f7ff ffe0 	bl	80035ec <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d8f7      	bhi.n	8003628 <HAL_Delay+0x28>
  {
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000008 	.word	0x20000008

08003648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367a:	4a04      	ldr	r2, [pc, #16]	; (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4906      	ldr	r1, [pc, #24]	; (80036e0 <__NVIC_EnableIRQ+0x34>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff4f 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c4:	f7ff ff64 	bl	8003690 <__NVIC_GetPriorityGrouping>
 80037c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f7ff ffb2 	bl	8003738 <NVIC_EncodePriority>
 80037d4:	4602      	mov	r2, r0
 80037d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff81 	bl	80036e4 <__NVIC_SetPriority>
}
 80037e2:	bf00      	nop
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4603      	mov	r3, r0
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff57 	bl	80036ac <__NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e272      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8087 	beq.w	8003936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4b92      	ldr	r3, [pc, #584]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00c      	beq.n	800384e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003834:	4b8f      	ldr	r3, [pc, #572]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d112      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
 8003840:	4b8c      	ldr	r3, [pc, #560]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d10b      	bne.n	8003866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4b89      	ldr	r3, [pc, #548]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x12c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d168      	bne.n	8003934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e24c      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x76>
 8003870:	4b80      	ldr	r3, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7f      	ldr	r2, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e02e      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x98>
 8003886:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xbc>
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xd4>
 80038c4:	4b6b      	ldr	r3, [pc, #428]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a67      	ldr	r2, [pc, #412]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7ff fe82 	bl	80035ec <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7ff fe7e 	bl	80035ec <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e200      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xe4>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7ff fe6e 	bl	80035ec <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff fe6a 	bl	80035ec <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1ec      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x10c>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800394e:	4b49      	ldr	r3, [pc, #292]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
 800395a:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1c0      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4939      	ldr	r1, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e03a      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d020      	beq.n	80039de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_OscConfig+0x270>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7ff fe23 	bl	80035ec <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7ff fe1f 	bl	80035ec <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1a1      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	4b2d      	ldr	r3, [pc, #180]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4927      	ldr	r1, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e015      	b.n	8003a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x270>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7ff fe02 	bl	80035ec <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7ff fdfe 	bl	80035ec <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e180      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03a      	beq.n	8003a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7ff fde2 	bl	80035ec <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2c:	f7ff fdde 	bl	80035ec <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e160      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f000 faea 	bl	8004024 <RCC_Delay>
 8003a50:	e01c      	b.n	8003a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_RCC_OscConfig+0x274>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7ff fdc8 	bl	80035ec <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5e:	e00f      	b.n	8003a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7ff fdc4 	bl	80035ec <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d908      	bls.n	8003a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e146      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	42420000 	.word	0x42420000
 8003a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b92      	ldr	r3, [pc, #584]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e9      	bne.n	8003a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a6 	beq.w	8003be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	61d3      	str	r3, [r2, #28]
 8003ab6:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b82      	ldr	r3, [pc, #520]	; (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	; (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7e      	ldr	r2, [pc, #504]	; (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7ff fd85 	bl	80035ec <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7ff fd81 	bl	80035ec <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e103      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b75      	ldr	r3, [pc, #468]	; (8003cd0 <HAL_RCC_OscConfig+0x4c8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x312>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e02d      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x334>
 8003b22:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a69      	ldr	r2, [pc, #420]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	4b67      	ldr	r3, [pc, #412]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a66      	ldr	r2, [pc, #408]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	e01c      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCC_OscConfig+0x356>
 8003b44:	4b61      	ldr	r3, [pc, #388]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a60      	ldr	r2, [pc, #384]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	4b5e      	ldr	r3, [pc, #376]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a5d      	ldr	r2, [pc, #372]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e00b      	b.n	8003b76 <HAL_RCC_OscConfig+0x36e>
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	4b58      	ldr	r3, [pc, #352]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a57      	ldr	r2, [pc, #348]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7ff fd35 	bl	80035ec <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7ff fd31 	bl	80035ec <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0b1      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCC_OscConfig+0x37e>
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003baa:	f7ff fd1f 	bl	80035ec <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7ff fd1b 	bl	80035ec <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e09b      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ee      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d061      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d146      	bne.n	8003c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7ff fcef 	bl	80035ec <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c12:	f7ff fceb 	bl	80035ec <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e06d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d108      	bne.n	8003c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	4921      	ldr	r1, [pc, #132]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a19      	ldr	r1, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	491b      	ldr	r1, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7ff fcbf 	bl	80035ec <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7ff fcbb 	bl	80035ec <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03d      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x46a>
 8003c90:	e035      	b.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_RCC_OscConfig+0x4cc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7ff fca8 	bl	80035ec <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7ff fca4 	bl	80035ec <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e026      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x498>
 8003cbe:	e01e      	b.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e019      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_OscConfig+0x500>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0d0      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d20:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d910      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b67      	ldr	r3, [pc, #412]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	4965      	ldr	r1, [pc, #404]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d040      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e073      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e06b      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4936      	ldr	r1, [pc, #216]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7ff fbf6 	bl	80035ec <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7ff fbf2 	bl	80035ec <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e053      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d210      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4922      	ldr	r1, [pc, #136]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 f821 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1d0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fa00 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800a170 	.word	0x0800a170
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d002      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x30>
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x36>
 8003f0e:	e027      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f12:	613b      	str	r3, [r7, #16]
      break;
 8003f14:	e027      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0c9b      	lsrs	r3, r3, #18
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
 8003f22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	0c5b      	lsrs	r3, r3, #17
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f3a:	5cd3      	ldrb	r3, [r2, r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e004      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0c      	ldr	r2, [pc, #48]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	613b      	str	r3, [r7, #16]
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f62:	613b      	str	r3, [r7, #16]
      break;
 8003f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f66:	693b      	ldr	r3, [r7, #16]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	007a1200 	.word	0x007a1200
 8003f7c:	0800a188 	.word	0x0800a188
 8003f80:	0800a198 	.word	0x0800a198
 8003f84:	003d0900 	.word	0x003d0900

08003f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	20000000 	.word	0x20000000

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa0:	f7ff fff2 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	0800a180 	.word	0x0800a180

08003fc4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_GetClockConfig+0x58>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0203 	and.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_RCC_GetClockConfig+0x58>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_GetClockConfig+0x58>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_RCC_GetClockConfig+0x58>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	08db      	lsrs	r3, r3, #3
 8003ffe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_GetClockConfig+0x5c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0207 	and.w	r2, r3, #7
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	40021000 	.word	0x40021000
 8004020:	40022000 	.word	0x40022000

08004024 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCC_Delay+0x34>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0a      	ldr	r2, [pc, #40]	; (800405c <RCC_Delay+0x38>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004040:	bf00      	nop
  }
  while (Delay --);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1e5a      	subs	r2, r3, #1
 8004046:	60fa      	str	r2, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f9      	bne.n	8004040 <RCC_Delay+0x1c>
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	20000000 	.word	0x20000000
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f839 	bl	80040fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 f9b4 	bl	800440c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e03a      	b.n	800419e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x58>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d009      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x58>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a14      	ldr	r2, [pc, #80]	; (80041ac <HAL_TIM_Base_Start_IT+0x9c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x58>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d111      	bne.n	800418c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b06      	cmp	r3, #6
 8004178:	d010      	beq.n	800419c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	e007      	b.n	800419c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800

080041b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0202 	mvn.w	r2, #2
 80041e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f8ed 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8e0 	bl	80043c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f8ef 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b04      	cmp	r3, #4
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0204 	mvn.w	r2, #4
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8c3 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8b6 	bl	80043c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8c5 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d122      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b08      	cmp	r3, #8
 800427e:	d11b      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0208 	mvn.w	r2, #8
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f899 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f88c 	bl	80043c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f89b 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0210 	mvn.w	r2, #16
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2208      	movs	r2, #8
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f86f 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f862 	bl	80043c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f871 	bl	80043e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10e      	bne.n	8004338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fd62 	bl	8002dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8bf 	bl	80044e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f835 	bl	80043fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b20      	cmp	r3, #32
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0220 	mvn.w	r2, #32
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f88a 	bl	80044d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <TIM_Base_SetConfig+0xb8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a26      	ldr	r2, [pc, #152]	; (80044c8 <TIM_Base_SetConfig+0xbc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0x30>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a25      	ldr	r2, [pc, #148]	; (80044cc <TIM_Base_SetConfig+0xc0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <TIM_Base_SetConfig+0xb8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <TIM_Base_SetConfig+0xbc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <TIM_Base_SetConfig+0xc0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <TIM_Base_SetConfig+0xb8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d103      	bne.n	80044b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	615a      	str	r2, [r3, #20]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40000400 	.word	0x40000400
 80044cc:	40000800 	.word	0x40000800

080044d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004506:	2b84      	cmp	r3, #132	; 0x84
 8004508:	d005      	beq.n	8004516 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800450a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	3303      	adds	r3, #3
 8004514:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004526:	f000 fc4d 	bl	8004dc4 <vTaskStartScheduler>
  
  return osOK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}

08004530 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af04      	add	r7, sp, #16
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <osThreadCreate+0x54>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01c      	beq.n	8004584 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685c      	ldr	r4, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691e      	ldr	r6, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ffc9 	bl	80044f4 <makeFreeRtosPriority>
 8004562:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456c:	9202      	str	r2, [sp, #8]
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	9100      	str	r1, [sp, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4632      	mov	r2, r6
 8004576:	4629      	mov	r1, r5
 8004578:	4620      	mov	r0, r4
 800457a:	f000 fa4d 	bl	8004a18 <xTaskCreateStatic>
 800457e:	4603      	mov	r3, r0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e01c      	b.n	80045be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685c      	ldr	r4, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004590:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ffab 	bl	80044f4 <makeFreeRtosPriority>
 800459e:	4602      	mov	r2, r0
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	9200      	str	r2, [sp, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4632      	mov	r2, r6
 80045ac:	4629      	mov	r1, r5
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 fa8e 	bl	8004ad0 <xTaskCreate>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <osDelay+0x16>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	e000      	b.n	80045e0 <osDelay+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fbbb 	bl	8004d5c <vTaskDelay>
  
  return osOK;
 80045e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d011      	beq.n	8004626 <osMessageCreate+0x36>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2400      	movs	r4, #0
 800461c:	9400      	str	r4, [sp, #0]
 800461e:	f000 f927 	bl	8004870 <xQueueGenericCreateStatic>
 8004622:	4603      	mov	r3, r0
 8004624:	e008      	b.n	8004638 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	4619      	mov	r1, r3
 8004632:	f000 f994 	bl	800495e <xQueueGenericCreate>
 8004636:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bd90      	pop	{r4, r7, pc}

08004640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f103 0208 	add.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f103 0208 	add.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d103      	bne.n	80046fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e00c      	b.n	8004716 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3308      	adds	r3, #8
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e002      	b.n	800470a <vListInsert+0x2e>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	d2f6      	bcs.n	8004704 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6852      	ldr	r2, [r2, #4]
 800476c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	d103      	bne.n	8004780 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
	...

080047a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047ca:	f000 ffc7 	bl	800575c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	3b01      	subs	r3, #1
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	441a      	add	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22ff      	movs	r2, #255	; 0xff
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d114      	bne.n	800484a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01a      	beq.n	800485e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3310      	adds	r3, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fcfd 	bl	800522c <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d012      	beq.n	800485e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <xQueueGenericReset+0xcc>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	e009      	b.n	800485e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3310      	adds	r3, #16
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fef6 	bl	8004640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3324      	adds	r3, #36	; 0x24
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fef1 	bl	8004640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800485e:	f000 ffad 	bl	80057bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004862:	2301      	movs	r3, #1
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08e      	sub	sp, #56	; 0x38
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <xQueueGenericCreateStatic+0x52>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <xQueueGenericCreateStatic+0x56>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueGenericCreateStatic+0x58>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	623b      	str	r3, [r7, #32]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <xQueueGenericCreateStatic+0x7e>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <xQueueGenericCreateStatic+0x82>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <xQueueGenericCreateStatic+0x84>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61fb      	str	r3, [r7, #28]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800490e:	2348      	movs	r3, #72	; 0x48
 8004910:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b48      	cmp	r3, #72	; 0x48
 8004916:	d00a      	beq.n	800492e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61bb      	str	r3, [r7, #24]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004940:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f843 	bl	80049da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004956:	4618      	mov	r0, r3
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08a      	sub	sp, #40	; 0x28
 8004962:	af02      	add	r7, sp, #8
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	4613      	mov	r3, r2
 800496a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	613b      	str	r3, [r7, #16]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e004      	b.n	800499e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3348      	adds	r3, #72	; 0x48
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 ff9c 	bl	80058e0 <pvPortMalloc>
 80049a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00f      	beq.n	80049d0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3348      	adds	r3, #72	; 0x48
 80049b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049be:	79fa      	ldrb	r2, [r7, #7]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f805 	bl	80049da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049d0:	69bb      	ldr	r3, [r7, #24]
	}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e002      	b.n	80049fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a08:	2101      	movs	r1, #1
 8004a0a:	69b8      	ldr	r0, [r7, #24]
 8004a0c:	f7ff fec8 	bl	80047a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af04      	add	r7, sp, #16
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xTaskCreateStatic+0x46>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	61fb      	str	r3, [r7, #28]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a5e:	23a0      	movs	r3, #160	; 0xa0
 8004a60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2ba0      	cmp	r3, #160	; 0xa0
 8004a66:	d00a      	beq.n	8004a7e <xTaskCreateStatic+0x66>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61bb      	str	r3, [r7, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01e      	beq.n	8004ac2 <xTaskCreateStatic+0xaa>
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01b      	beq.n	8004ac2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	f107 0314 	add.w	r3, r7, #20
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f851 	bl	8004b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004abc:	f000 f8e4 	bl	8004c88 <prvAddNewTaskToReadyList>
 8004ac0:	e001      	b.n	8004ac6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ac6:	697b      	ldr	r3, [r7, #20]
	}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3728      	adds	r7, #40	; 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fefb 	bl	80058e0 <pvPortMalloc>
 8004aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00e      	beq.n	8004b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004af2:	20a0      	movs	r0, #160	; 0xa0
 8004af4:	f000 fef4 	bl	80058e0 <pvPortMalloc>
 8004af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
 8004b06:	e005      	b.n	8004b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 ffad 	bl	8005a68 <vPortFree>
 8004b0e:	e001      	b.n	8004b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d017      	beq.n	8004b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9303      	str	r3, [sp, #12]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f80f 	bl	8004b5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b3e:	69f8      	ldr	r0, [r7, #28]
 8004b40:	f000 f8a2 	bl	8004c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	e002      	b.n	8004b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b50:	69bb      	ldr	r3, [r7, #24]
	}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b74:	3b01      	subs	r3, #1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	617b      	str	r3, [r7, #20]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	e012      	b.n	8004bd0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	7819      	ldrb	r1, [r3, #0]
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3334      	adds	r3, #52	; 0x34
 8004bba:	460a      	mov	r2, r1
 8004bbc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d9e9      	bls.n	8004baa <prvInitialiseNewTask+0x4e>
 8004bd6:	e000      	b.n	8004bda <prvInitialiseNewTask+0x7e>
		{
			break;
 8004bd8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d901      	bls.n	8004bec <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be8:	2306      	movs	r3, #6
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff fd3b 	bl	800467e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fd36 	bl	800467e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f1c3 0207 	rsb	r2, r3, #7
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	334c      	adds	r3, #76	; 0x4c
 8004c3c:	224c      	movs	r2, #76	; 0x4c
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fe8b 	bl	800695c <memset>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <prvInitialiseNewTask+0x120>)
 8004c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <prvInitialiseNewTask+0x124>)
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <prvInitialiseNewTask+0x128>)
 8004c56:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	69b8      	ldr	r0, [r7, #24]
 8004c5e:	f000 fc8b 	bl	8005578 <pxPortInitialiseStack>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c74:	bf00      	nop
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20002b18 	.word	0x20002b18
 8004c80:	20002b80 	.word	0x20002b80
 8004c84:	20002be8 	.word	0x20002be8

08004c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c90:	f000 fd64 	bl	800575c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <prvAddNewTaskToReadyList+0xb8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <prvAddNewTaskToReadyList+0xb8>)
 8004c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <prvAddNewTaskToReadyList+0xbc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ca6:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <prvAddNewTaskToReadyList+0xbc>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <prvAddNewTaskToReadyList+0xb8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d110      	bne.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cb4:	f000 fb34 	bl	8005320 <prvInitialiseTaskLists>
 8004cb8:	e00d      	b.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <prvAddNewTaskToReadyList+0xc0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <prvAddNewTaskToReadyList+0xbc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d802      	bhi.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <prvAddNewTaskToReadyList+0xbc>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <prvAddNewTaskToReadyList+0xc8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <prvAddNewTaskToReadyList+0xc8>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <prvAddNewTaskToReadyList+0xcc>)
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7ff fcc4 	bl	8004696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d0e:	f000 fd55 	bl	80057bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <prvAddNewTaskToReadyList+0xc0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <prvAddNewTaskToReadyList+0xbc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d207      	bcs.n	8004d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <prvAddNewTaskToReadyList+0xd0>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200006cc 	.word	0x200006cc
 8004d44:	200005cc 	.word	0x200005cc
 8004d48:	200006d8 	.word	0x200006d8
 8004d4c:	200006e8 	.word	0x200006e8
 8004d50:	200006d4 	.word	0x200006d4
 8004d54:	200005d0 	.word	0x200005d0
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <vTaskDelay+0x60>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <vTaskDelay+0x30>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60bb      	str	r3, [r7, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d8c:	f000 f884 	bl	8004e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d90:	2100      	movs	r1, #0
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fb8a 	bl	80054ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d98:	f000 f88c 	bl	8004eb4 <xTaskResumeAll>
 8004d9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <vTaskDelay+0x64>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200006f4 	.word	0x200006f4
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	1d39      	adds	r1, r7, #4
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc ff36 	bl	8001c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	9202      	str	r2, [sp, #8]
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	2300      	movs	r3, #0
 8004df0:	460a      	mov	r2, r1
 8004df2:	4921      	ldr	r1, [pc, #132]	; (8004e78 <vTaskStartScheduler+0xb4>)
 8004df4:	4821      	ldr	r0, [pc, #132]	; (8004e7c <vTaskStartScheduler+0xb8>)
 8004df6:	f7ff fe0f 	bl	8004a18 <xTaskCreateStatic>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <vTaskStartScheduler+0xbc>)
 8004dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <vTaskStartScheduler+0xbc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e001      	b.n	8004e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d11b      	bne.n	8004e50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	613b      	str	r3, [r7, #16]
}
 8004e2a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <vTaskStartScheduler+0xc0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	334c      	adds	r3, #76	; 0x4c
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <vTaskStartScheduler+0xc4>)
 8004e34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vTaskStartScheduler+0xc8>)
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <vTaskStartScheduler+0xcc>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <vTaskStartScheduler+0xd0>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e4a:	f000 fc15 	bl	8005678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e4e:	e00e      	b.n	8004e6e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d10a      	bne.n	8004e6e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <vTaskStartScheduler+0xa8>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	080098e8 	.word	0x080098e8
 8004e7c:	080052f1 	.word	0x080052f1
 8004e80:	200006f0 	.word	0x200006f0
 8004e84:	200005cc 	.word	0x200005cc
 8004e88:	20000068 	.word	0x20000068
 8004e8c:	200006ec 	.word	0x200006ec
 8004e90:	200006d8 	.word	0x200006d8
 8004e94:	200006d0 	.word	0x200006d0

08004e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004ea4:	6013      	str	r3, [r2, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	200006f4 	.word	0x200006f4

08004eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ec2:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	603b      	str	r3, [r7, #0]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ee0:	f000 fc3c 	bl	800575c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ee4:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a37      	ldr	r2, [pc, #220]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <xTaskResumeAll+0x114>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d161      	bne.n	8004fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef6:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <xTaskResumeAll+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d05d      	beq.n	8004fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004efe:	e02e      	b.n	8004f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f00:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <xTaskResumeAll+0x11c>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fc1d 	bl	800474c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fc18 	bl	800474c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <xTaskResumeAll+0x120>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <xTaskResumeAll+0x120>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a27      	ldr	r2, [pc, #156]	; (8004fd8 <xTaskResumeAll+0x124>)
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7ff fba6 	bl	8004696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4e:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <xTaskResumeAll+0x128>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d302      	bcc.n	8004f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f58:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <xTaskResumeAll+0x11c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1cc      	bne.n	8004f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f6c:	f000 fa7a 	bl	8005464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f70:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <xTaskResumeAll+0x130>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f7c:	f000 f836 	bl	8004fec <xTaskIncrementTick>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f1      	bne.n	8004f7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004f98:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <xTaskResumeAll+0x130>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <xTaskResumeAll+0x12c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <xTaskResumeAll+0x134>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fba:	f000 fbff 	bl	80057bc <vPortExitCritical>

	return xAlreadyYielded;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200006f4 	.word	0x200006f4
 8004fcc:	200006cc 	.word	0x200006cc
 8004fd0:	2000068c 	.word	0x2000068c
 8004fd4:	200006d4 	.word	0x200006d4
 8004fd8:	200005d0 	.word	0x200005d0
 8004fdc:	200005cc 	.word	0x200005cc
 8004fe0:	200006e0 	.word	0x200006e0
 8004fe4:	200006dc 	.word	0x200006dc
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff6:	4b51      	ldr	r3, [pc, #324]	; (800513c <xTaskIncrementTick+0x150>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 808d 	bne.w	800511a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005000:	4b4f      	ldr	r3, [pc, #316]	; (8005140 <xTaskIncrementTick+0x154>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005008:	4a4d      	ldr	r2, [pc, #308]	; (8005140 <xTaskIncrementTick+0x154>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d120      	bne.n	8005056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005014:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <xTaskIncrementTick+0x158>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <xTaskIncrementTick+0x48>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	603b      	str	r3, [r7, #0]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xTaskIncrementTick+0x46>
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <xTaskIncrementTick+0x158>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	4b43      	ldr	r3, [pc, #268]	; (8005148 <xTaskIncrementTick+0x15c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a41      	ldr	r2, [pc, #260]	; (8005144 <xTaskIncrementTick+0x158>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4a41      	ldr	r2, [pc, #260]	; (8005148 <xTaskIncrementTick+0x15c>)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b40      	ldr	r3, [pc, #256]	; (800514c <xTaskIncrementTick+0x160>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a3f      	ldr	r2, [pc, #252]	; (800514c <xTaskIncrementTick+0x160>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	f000 fa07 	bl	8005464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005056:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <xTaskIncrementTick+0x164>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	429a      	cmp	r2, r3
 800505e:	d34d      	bcc.n	80050fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005060:	4b38      	ldr	r3, [pc, #224]	; (8005144 <xTaskIncrementTick+0x158>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <xTaskIncrementTick+0x82>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xTaskIncrementTick+0x84>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <xTaskIncrementTick+0x164>)
 8005076:	f04f 32ff 	mov.w	r2, #4294967295
 800507a:	601a      	str	r2, [r3, #0]
					break;
 800507c:	e03e      	b.n	80050fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800507e:	4b31      	ldr	r3, [pc, #196]	; (8005144 <xTaskIncrementTick+0x158>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d203      	bcs.n	800509e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005096:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <xTaskIncrementTick+0x164>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6013      	str	r3, [r2, #0]
						break;
 800509c:	e02e      	b.n	80050fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fb52 	bl	800474c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d004      	beq.n	80050ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3318      	adds	r3, #24
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fb49 	bl	800474c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	2201      	movs	r2, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <xTaskIncrementTick+0x168>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	4a22      	ldr	r2, [pc, #136]	; (8005154 <xTaskIncrementTick+0x168>)
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <xTaskIncrementTick+0x16c>)
 80050da:	441a      	add	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7ff fad7 	bl	8004696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <xTaskIncrementTick+0x170>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3b4      	bcc.n	8005060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050fa:	e7b1      	b.n	8005060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050fc:	4b17      	ldr	r3, [pc, #92]	; (800515c <xTaskIncrementTick+0x170>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4915      	ldr	r1, [pc, #84]	; (8005158 <xTaskIncrementTick+0x16c>)
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d907      	bls.n	8005124 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e004      	b.n	8005124 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <xTaskIncrementTick+0x174>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3301      	adds	r3, #1
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <xTaskIncrementTick+0x174>)
 8005122:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <xTaskIncrementTick+0x178>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005130:	697b      	ldr	r3, [r7, #20]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200006f4 	.word	0x200006f4
 8005140:	200006d0 	.word	0x200006d0
 8005144:	20000684 	.word	0x20000684
 8005148:	20000688 	.word	0x20000688
 800514c:	200006e4 	.word	0x200006e4
 8005150:	200006ec 	.word	0x200006ec
 8005154:	200006d4 	.word	0x200006d4
 8005158:	200005d0 	.word	0x200005d0
 800515c:	200005cc 	.word	0x200005cc
 8005160:	200006dc 	.word	0x200006dc
 8005164:	200006e0 	.word	0x200006e0

08005168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800516e:	4b29      	ldr	r3, [pc, #164]	; (8005214 <vTaskSwitchContext+0xac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005176:	4b28      	ldr	r3, [pc, #160]	; (8005218 <vTaskSwitchContext+0xb0>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800517c:	e044      	b.n	8005208 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800517e:	4b26      	ldr	r3, [pc, #152]	; (8005218 <vTaskSwitchContext+0xb0>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <vTaskSwitchContext+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	fab3 f383 	clz	r3, r3
 8005190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005192:	7afb      	ldrb	r3, [r7, #11]
 8005194:	f1c3 031f 	rsb	r3, r3, #31
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	4921      	ldr	r1, [pc, #132]	; (8005220 <vTaskSwitchContext+0xb8>)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vTaskSwitchContext+0x5a>
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a14      	ldr	r2, [pc, #80]	; (8005220 <vTaskSwitchContext+0xb8>)
 80051d0:	4413      	add	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3308      	adds	r3, #8
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d104      	bne.n	80051f4 <vTaskSwitchContext+0x8c>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <vTaskSwitchContext+0xbc>)
 80051fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <vTaskSwitchContext+0xbc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	334c      	adds	r3, #76	; 0x4c
 8005204:	4a08      	ldr	r2, [pc, #32]	; (8005228 <vTaskSwitchContext+0xc0>)
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	200006f4 	.word	0x200006f4
 8005218:	200006e0 	.word	0x200006e0
 800521c:	200006d4 	.word	0x200006d4
 8005220:	200005d0 	.word	0x200005d0
 8005224:	200005cc 	.word	0x200005cc
 8005228:	20000068 	.word	0x20000068

0800522c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60fb      	str	r3, [r7, #12]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	3318      	adds	r3, #24
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fa75 	bl	800474c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <xTaskRemoveFromEventList+0xac>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11c      	bne.n	80052a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fa6c 	bl	800474c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	2201      	movs	r2, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <xTaskRemoveFromEventList+0xb0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4313      	orrs	r3, r2
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <xTaskRemoveFromEventList+0xb0>)
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <xTaskRemoveFromEventList+0xb4>)
 8005294:	441a      	add	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3304      	adds	r3, #4
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f7ff f9fa 	bl	8004696 <vListInsertEnd>
 80052a2:	e005      	b.n	80052b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4619      	mov	r1, r3
 80052aa:	480e      	ldr	r0, [pc, #56]	; (80052e4 <xTaskRemoveFromEventList+0xb8>)
 80052ac:	f7ff f9f3 	bl	8004696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <xTaskRemoveFromEventList+0xbc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d905      	bls.n	80052ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <xTaskRemoveFromEventList+0xc0>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e001      	b.n	80052ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200006f4 	.word	0x200006f4
 80052dc:	200006d4 	.word	0x200006d4
 80052e0:	200005d0 	.word	0x200005d0
 80052e4:	2000068c 	.word	0x2000068c
 80052e8:	200005cc 	.word	0x200005cc
 80052ec:	200006e0 	.word	0x200006e0

080052f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052f8:	f000 f852 	bl	80053a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvIdleTask+0x28>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d9f9      	bls.n	80052f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <prvIdleTask+0x2c>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005314:	e7f0      	b.n	80052f8 <prvIdleTask+0x8>
 8005316:	bf00      	nop
 8005318:	200005d0 	.word	0x200005d0
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005326:	2300      	movs	r3, #0
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	e00c      	b.n	8005346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <prvInitialiseTaskLists+0x60>)
 8005338:	4413      	add	r3, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f980 	bl	8004640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3301      	adds	r3, #1
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d9ef      	bls.n	800532c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800534c:	480d      	ldr	r0, [pc, #52]	; (8005384 <prvInitialiseTaskLists+0x64>)
 800534e:	f7ff f977 	bl	8004640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005352:	480d      	ldr	r0, [pc, #52]	; (8005388 <prvInitialiseTaskLists+0x68>)
 8005354:	f7ff f974 	bl	8004640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005358:	480c      	ldr	r0, [pc, #48]	; (800538c <prvInitialiseTaskLists+0x6c>)
 800535a:	f7ff f971 	bl	8004640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800535e:	480c      	ldr	r0, [pc, #48]	; (8005390 <prvInitialiseTaskLists+0x70>)
 8005360:	f7ff f96e 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005364:	480b      	ldr	r0, [pc, #44]	; (8005394 <prvInitialiseTaskLists+0x74>)
 8005366:	f7ff f96b 	bl	8004640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <prvInitialiseTaskLists+0x78>)
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <prvInitialiseTaskLists+0x64>)
 800536e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvInitialiseTaskLists+0x7c>)
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <prvInitialiseTaskLists+0x68>)
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200005d0 	.word	0x200005d0
 8005384:	2000065c 	.word	0x2000065c
 8005388:	20000670 	.word	0x20000670
 800538c:	2000068c 	.word	0x2000068c
 8005390:	200006a0 	.word	0x200006a0
 8005394:	200006b8 	.word	0x200006b8
 8005398:	20000684 	.word	0x20000684
 800539c:	20000688 	.word	0x20000688

080053a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a6:	e019      	b.n	80053dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053a8:	f000 f9d8 	bl	800575c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <prvCheckTasksWaitingTermination+0x50>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f9c7 	bl	800474c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <prvCheckTasksWaitingTermination+0x54>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <prvCheckTasksWaitingTermination+0x54>)
 80053c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <prvCheckTasksWaitingTermination+0x58>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <prvCheckTasksWaitingTermination+0x58>)
 80053d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053d2:	f000 f9f3 	bl	80057bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f810 	bl	80053fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <prvCheckTasksWaitingTermination+0x58>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e1      	bne.n	80053a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200006a0 	.word	0x200006a0
 80053f4:	200006cc 	.word	0x200006cc
 80053f8:	200006b4 	.word	0x200006b4

080053fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	334c      	adds	r3, #76	; 0x4c
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fac3 	bl	8006994 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005414:	2b00      	cmp	r3, #0
 8005416:	d108      	bne.n	800542a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fb23 	bl	8005a68 <vPortFree>
				vPortFree( pxTCB );
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fb20 	bl	8005a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005428:	e018      	b.n	800545c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005430:	2b01      	cmp	r3, #1
 8005432:	d103      	bne.n	800543c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fb17 	bl	8005a68 <vPortFree>
	}
 800543a:	e00f      	b.n	800545c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005442:	2b02      	cmp	r3, #2
 8005444:	d00a      	beq.n	800545c <prvDeleteTCB+0x60>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvDeleteTCB+0x5e>
	}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <prvResetNextTaskUnblockTime+0x40>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <prvResetNextTaskUnblockTime+0x14>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <prvResetNextTaskUnblockTime+0x16>
 8005478:	2300      	movs	r3, #0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvResetNextTaskUnblockTime+0x44>)
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005486:	e008      	b.n	800549a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005488:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <prvResetNextTaskUnblockTime+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <prvResetNextTaskUnblockTime+0x44>)
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	20000684 	.word	0x20000684
 80054a8:	200006ec 	.word	0x200006ec

080054ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054b6:	4b29      	ldr	r3, [pc, #164]	; (800555c <prvAddCurrentTaskToDelayedList+0xb0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054bc:	4b28      	ldr	r3, [pc, #160]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f942 	bl	800474c <uxListRemove>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80054ce:	4b24      	ldr	r3, [pc, #144]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	2201      	movs	r2, #1
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43da      	mvns	r2, r3
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4013      	ands	r3, r2
 80054e2:	4a20      	ldr	r2, [pc, #128]	; (8005564 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d10a      	bne.n	8005504 <prvAddCurrentTaskToDelayedList+0x58>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f4:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	481a      	ldr	r0, [pc, #104]	; (8005568 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054fe:	f7ff f8ca 	bl	8004696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005502:	e026      	b.n	8005552 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d209      	bcs.n	8005530 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <prvAddCurrentTaskToDelayedList+0xc0>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b0f      	ldr	r3, [pc, #60]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7ff f8d7 	bl	80046dc <vListInsert>
}
 800552e:	e010      	b.n	8005552 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005530:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3304      	adds	r3, #4
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7ff f8cd 	bl	80046dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	d202      	bcs.n	8005552 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200006d0 	.word	0x200006d0
 8005560:	200005cc 	.word	0x200005cc
 8005564:	200006d4 	.word	0x200006d4
 8005568:	200006b8 	.word	0x200006b8
 800556c:	20000688 	.word	0x20000688
 8005570:	20000684 	.word	0x20000684
 8005574:	200006ec 	.word	0x200006ec

08005578 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3b04      	subs	r3, #4
 8005588:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b04      	subs	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <pxPortInitialiseStack+0x54>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b14      	subs	r3, #20
 80055b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3b20      	subs	r3, #32
 80055be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	080055d1 	.word	0x080055d1

080055d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <prvTaskExitError+0x54>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d00a      	beq.n	80055fa <prvTaskExitError+0x2a>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60fb      	str	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <prvTaskExitError+0x28>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60bb      	str	r3, [r7, #8]
}
 800560c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800560e:	bf00      	nop
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0fc      	beq.n	8005610 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
	...

08005630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <pxCurrentTCBConst2>)
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800563a:	f380 8809 	msr	PSP, r0
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	f04e 0e0d 	orr.w	lr, lr, #13
 800564e:	4770      	bx	lr

08005650 <pxCurrentTCBConst2>:
 8005650:	200005cc 	.word	0x200005cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005658:	4806      	ldr	r0, [pc, #24]	; (8005674 <prvPortStartFirstTask+0x1c>)
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f380 8808 	msr	MSP, r0
 8005662:	b662      	cpsie	i
 8005664:	b661      	cpsie	f
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	df00      	svc	0
 8005670:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005672:	bf00      	nop
 8005674:	e000ed08 	.word	0xe000ed08

08005678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800567e:	4b32      	ldr	r3, [pc, #200]	; (8005748 <xPortStartScheduler+0xd0>)
 8005680:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	22ff      	movs	r2, #255	; 0xff
 800568e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <xPortStartScheduler+0xd4>)
 80056a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056a6:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <xPortStartScheduler+0xd8>)
 80056a8:	2207      	movs	r2, #7
 80056aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ac:	e009      	b.n	80056c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80056ae:	4b28      	ldr	r3, [pc, #160]	; (8005750 <xPortStartScheduler+0xd8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	4a26      	ldr	r2, [pc, #152]	; (8005750 <xPortStartScheduler+0xd8>)
 80056b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d0ef      	beq.n	80056ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <xPortStartScheduler+0xd8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1c3 0307 	rsb	r3, r3, #7
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00a      	beq.n	80056f0 <xPortStartScheduler+0x78>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056f0:	4b17      	ldr	r3, [pc, #92]	; (8005750 <xPortStartScheduler+0xd8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <xPortStartScheduler+0xd8>)
 80056f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <xPortStartScheduler+0xd8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <xPortStartScheduler+0xd8>)
 8005704:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <xPortStartScheduler+0xdc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a10      	ldr	r2, [pc, #64]	; (8005754 <xPortStartScheduler+0xdc>)
 8005714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <xPortStartScheduler+0xdc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <xPortStartScheduler+0xdc>)
 8005720:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005724:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005726:	f000 f8b9 	bl	800589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <xPortStartScheduler+0xe0>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005730:	f7ff ff92 	bl	8005658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005734:	f7ff fd18 	bl	8005168 <vTaskSwitchContext>
	prvTaskExitError();
 8005738:	f7ff ff4a 	bl	80055d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	e000e400 	.word	0xe000e400
 800574c:	200006f8 	.word	0x200006f8
 8005750:	200006fc 	.word	0x200006fc
 8005754:	e000ed20 	.word	0xe000ed20
 8005758:	2000000c 	.word	0x2000000c

0800575c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	607b      	str	r3, [r7, #4]
}
 8005774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005776:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <vPortEnterCritical+0x58>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <vPortEnterCritical+0x58>)
 800577e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <vPortEnterCritical+0x58>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10f      	bne.n	80057a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <vPortEnterCritical+0x5c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	603b      	str	r3, [r7, #0]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vPortEnterCritical+0x4a>
	}
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	2000000c 	.word	0x2000000c
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <vPortExitCritical+0x4c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <vPortExitCritical+0x24>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	607b      	str	r3, [r7, #4]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057e0:	4b09      	ldr	r3, [pc, #36]	; (8005808 <vPortExitCritical+0x4c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4a08      	ldr	r2, [pc, #32]	; (8005808 <vPortExitCritical+0x4c>)
 80057e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <vPortExitCritical+0x4c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <vPortExitCritical+0x42>
 80057f2:	2300      	movs	r3, #0
 80057f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	2000000c 	.word	0x2000000c
 800580c:	00000000 	.word	0x00000000

08005810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005810:	f3ef 8009 	mrs	r0, PSP
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <pxCurrentTCBConst>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005820:	6010      	str	r0, [r2, #0]
 8005822:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005826:	f04f 0050 	mov.w	r0, #80	; 0x50
 800582a:	f380 8811 	msr	BASEPRI, r0
 800582e:	f7ff fc9b 	bl	8005168 <vTaskSwitchContext>
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8811 	msr	BASEPRI, r0
 800583a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	6808      	ldr	r0, [r1, #0]
 8005842:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005846:	f380 8809 	msr	PSP, r0
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	4770      	bx	lr

08005850 <pxCurrentTCBConst>:
 8005850:	200005cc 	.word	0x200005cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7ff fbbb 	bl	8004fec <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <SysTick_Handler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <vPortSetupTimerInterrupt+0x30>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b03      	ldr	r3, [pc, #12]	; (80058cc <vPortSetupTimerInterrupt+0x30>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	e000e010 	.word	0xe000e010
 80058d0:	e000e018 	.word	0xe000e018
 80058d4:	20000000 	.word	0x20000000
 80058d8:	10624dd3 	.word	0x10624dd3
 80058dc:	e000e014 	.word	0xe000e014

080058e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058ec:	f7ff fad4 	bl	8004e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f0:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <pvPortMalloc+0x174>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058f8:	f000 f910 	bl	8005b1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058fc:	4b56      	ldr	r3, [pc, #344]	; (8005a58 <pvPortMalloc+0x178>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 808e 	bne.w	8005a26 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01d      	beq.n	800594c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005910:	2208      	movs	r2, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4413      	add	r3, r2
 8005916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	2b00      	cmp	r3, #0
 8005920:	d014      	beq.n	800594c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f023 0307 	bic.w	r3, r3, #7
 8005928:	3308      	adds	r3, #8
 800592a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <pvPortMalloc+0x6c>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	617b      	str	r3, [r7, #20]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d069      	beq.n	8005a26 <pvPortMalloc+0x146>
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <pvPortMalloc+0x17c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d864      	bhi.n	8005a26 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800595c:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <pvPortMalloc+0x180>)
 800595e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <pvPortMalloc+0x180>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005966:	e004      	b.n	8005972 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d903      	bls.n	8005984 <pvPortMalloc+0xa4>
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f1      	bne.n	8005968 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005984:	4b33      	ldr	r3, [pc, #204]	; (8005a54 <pvPortMalloc+0x174>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	429a      	cmp	r2, r3
 800598c:	d04b      	beq.n	8005a26 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2208      	movs	r2, #8
 8005994:	4413      	add	r3, r2
 8005996:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	2308      	movs	r3, #8
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d91f      	bls.n	80059f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <pvPortMalloc+0xf8>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	613b      	str	r3, [r7, #16]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1ad2      	subs	r2, r2, r3
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f000 f8f8 	bl	8005be0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <pvPortMalloc+0x17c>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <pvPortMalloc+0x17c>)
 80059fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <pvPortMalloc+0x17c>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <pvPortMalloc+0x184>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d203      	bcs.n	8005a12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a0a:	4b14      	ldr	r3, [pc, #80]	; (8005a5c <pvPortMalloc+0x17c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <pvPortMalloc+0x184>)
 8005a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <pvPortMalloc+0x178>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a26:	f7ff fa45 	bl	8004eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <pvPortMalloc+0x16a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60fb      	str	r3, [r7, #12]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <pvPortMalloc+0x168>
	return pvReturn;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20002b08 	.word	0x20002b08
 8005a58:	20002b14 	.word	0x20002b14
 8005a5c:	20002b0c 	.word	0x20002b0c
 8005a60:	20002b00 	.word	0x20002b00
 8005a64:	20002b10 	.word	0x20002b10

08005a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d048      	beq.n	8005b0c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <vPortFree+0xac>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <vPortFree+0x44>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60fb      	str	r3, [r7, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <vPortFree+0x62>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60bb      	str	r3, [r7, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <vPortFree+0xac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d019      	beq.n	8005b0c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d115      	bne.n	8005b0c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <vPortFree+0xac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005af0:	f7ff f9d2 	bl	8004e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <vPortFree+0xb0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4413      	add	r3, r2
 8005afe:	4a06      	ldr	r2, [pc, #24]	; (8005b18 <vPortFree+0xb0>)
 8005b00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b02:	6938      	ldr	r0, [r7, #16]
 8005b04:	f000 f86c 	bl	8005be0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b08:	f7ff f9d4 	bl	8004eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b0c:	bf00      	nop
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20002b14 	.word	0x20002b14
 8005b18:	20002b0c 	.word	0x20002b0c

08005b1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b22:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8005b26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <prvHeapInit+0xac>)
 8005b2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3307      	adds	r3, #7
 8005b3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <prvHeapInit+0xac>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <prvHeapInit+0xb0>)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <prvHeapInit+0xb0>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b68:	2208      	movs	r2, #8
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <prvHeapInit+0xb4>)
 8005b7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <prvHeapInit+0xb4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2200      	movs	r2, #0
 8005b84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <prvHeapInit+0xb4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	1ad2      	subs	r2, r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <prvHeapInit+0xb4>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <prvHeapInit+0xb8>)
 8005baa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <prvHeapInit+0xbc>)
 8005bb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <prvHeapInit+0xc0>)
 8005bb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bba:	601a      	str	r2, [r3, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000700 	.word	0x20000700
 8005bcc:	20002b00 	.word	0x20002b00
 8005bd0:	20002b08 	.word	0x20002b08
 8005bd4:	20002b10 	.word	0x20002b10
 8005bd8:	20002b0c 	.word	0x20002b0c
 8005bdc:	20002b14 	.word	0x20002b14

08005be0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005be8:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <prvInsertBlockIntoFreeList+0xa8>)
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e002      	b.n	8005bf4 <prvInsertBlockIntoFreeList+0x14>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d8f7      	bhi.n	8005bee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4413      	add	r3, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d108      	bne.n	8005c22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d118      	bne.n	8005c68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <prvInsertBlockIntoFreeList+0xac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d00d      	beq.n	8005c5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e008      	b.n	8005c70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <prvInsertBlockIntoFreeList+0xac>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e003      	b.n	8005c70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d002      	beq.n	8005c7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr
 8005c88:	20002b00 	.word	0x20002b00
 8005c8c:	20002b08 	.word	0x20002b08

08005c90 <__cvt>:
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c96:	461f      	mov	r7, r3
 8005c98:	bfbb      	ittet	lt
 8005c9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c9e:	461f      	movlt	r7, r3
 8005ca0:	2300      	movge	r3, #0
 8005ca2:	232d      	movlt	r3, #45	; 0x2d
 8005ca4:	b088      	sub	sp, #32
 8005ca6:	4614      	mov	r4, r2
 8005ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005caa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cac:	7013      	strb	r3, [r2, #0]
 8005cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cb4:	f023 0820 	bic.w	r8, r3, #32
 8005cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cbc:	d005      	beq.n	8005cca <__cvt+0x3a>
 8005cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cc2:	d100      	bne.n	8005cc6 <__cvt+0x36>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e000      	b.n	8005ccc <__cvt+0x3c>
 8005cca:	2303      	movs	r3, #3
 8005ccc:	aa07      	add	r2, sp, #28
 8005cce:	9204      	str	r2, [sp, #16]
 8005cd0:	aa06      	add	r2, sp, #24
 8005cd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cd6:	e9cd 3500 	strd	r3, r5, [sp]
 8005cda:	4622      	mov	r2, r4
 8005cdc:	463b      	mov	r3, r7
 8005cde:	f000 ffb7 	bl	8006c50 <_dtoa_r>
 8005ce2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	d102      	bne.n	8005cf0 <__cvt+0x60>
 8005cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cec:	07db      	lsls	r3, r3, #31
 8005cee:	d522      	bpl.n	8005d36 <__cvt+0xa6>
 8005cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cf4:	eb06 0905 	add.w	r9, r6, r5
 8005cf8:	d110      	bne.n	8005d1c <__cvt+0x8c>
 8005cfa:	7833      	ldrb	r3, [r6, #0]
 8005cfc:	2b30      	cmp	r3, #48	; 0x30
 8005cfe:	d10a      	bne.n	8005d16 <__cvt+0x86>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4620      	mov	r0, r4
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fe4e 	bl	80009a8 <__aeabi_dcmpeq>
 8005d0c:	b918      	cbnz	r0, 8005d16 <__cvt+0x86>
 8005d0e:	f1c5 0501 	rsb	r5, r5, #1
 8005d12:	f8ca 5000 	str.w	r5, [sl]
 8005d16:	f8da 3000 	ldr.w	r3, [sl]
 8005d1a:	4499      	add	r9, r3
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4620      	mov	r0, r4
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8005d28:	b108      	cbz	r0, 8005d2e <__cvt+0x9e>
 8005d2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d2e:	2230      	movs	r2, #48	; 0x30
 8005d30:	9b07      	ldr	r3, [sp, #28]
 8005d32:	454b      	cmp	r3, r9
 8005d34:	d307      	bcc.n	8005d46 <__cvt+0xb6>
 8005d36:	4630      	mov	r0, r6
 8005d38:	9b07      	ldr	r3, [sp, #28]
 8005d3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d3c:	1b9b      	subs	r3, r3, r6
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	b008      	add	sp, #32
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	9107      	str	r1, [sp, #28]
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e7f0      	b.n	8005d30 <__cvt+0xa0>

08005d4e <__exponent>:
 8005d4e:	4603      	mov	r3, r0
 8005d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d52:	2900      	cmp	r1, #0
 8005d54:	f803 2b02 	strb.w	r2, [r3], #2
 8005d58:	bfb6      	itet	lt
 8005d5a:	222d      	movlt	r2, #45	; 0x2d
 8005d5c:	222b      	movge	r2, #43	; 0x2b
 8005d5e:	4249      	neglt	r1, r1
 8005d60:	2909      	cmp	r1, #9
 8005d62:	7042      	strb	r2, [r0, #1]
 8005d64:	dd2a      	ble.n	8005dbc <__exponent+0x6e>
 8005d66:	f10d 0207 	add.w	r2, sp, #7
 8005d6a:	4617      	mov	r7, r2
 8005d6c:	260a      	movs	r6, #10
 8005d6e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d72:	4694      	mov	ip, r2
 8005d74:	fb06 1415 	mls	r4, r6, r5, r1
 8005d78:	3430      	adds	r4, #48	; 0x30
 8005d7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d7e:	460c      	mov	r4, r1
 8005d80:	2c63      	cmp	r4, #99	; 0x63
 8005d82:	4629      	mov	r1, r5
 8005d84:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d88:	dcf1      	bgt.n	8005d6e <__exponent+0x20>
 8005d8a:	3130      	adds	r1, #48	; 0x30
 8005d8c:	f1ac 0402 	sub.w	r4, ip, #2
 8005d90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d94:	4622      	mov	r2, r4
 8005d96:	1c41      	adds	r1, r0, #1
 8005d98:	42ba      	cmp	r2, r7
 8005d9a:	d30a      	bcc.n	8005db2 <__exponent+0x64>
 8005d9c:	f10d 0209 	add.w	r2, sp, #9
 8005da0:	eba2 020c 	sub.w	r2, r2, ip
 8005da4:	42bc      	cmp	r4, r7
 8005da6:	bf88      	it	hi
 8005da8:	2200      	movhi	r2, #0
 8005daa:	4413      	add	r3, r2
 8005dac:	1a18      	subs	r0, r3, r0
 8005dae:	b003      	add	sp, #12
 8005db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005db6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dba:	e7ed      	b.n	8005d98 <__exponent+0x4a>
 8005dbc:	2330      	movs	r3, #48	; 0x30
 8005dbe:	3130      	adds	r1, #48	; 0x30
 8005dc0:	7083      	strb	r3, [r0, #2]
 8005dc2:	70c1      	strb	r1, [r0, #3]
 8005dc4:	1d03      	adds	r3, r0, #4
 8005dc6:	e7f1      	b.n	8005dac <__exponent+0x5e>

08005dc8 <_printf_float>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	b091      	sub	sp, #68	; 0x44
 8005dce:	460c      	mov	r4, r1
 8005dd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	4605      	mov	r5, r0
 8005dda:	f000 fdc7 	bl	800696c <_localeconv_r>
 8005dde:	6803      	ldr	r3, [r0, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	9309      	str	r3, [sp, #36]	; 0x24
 8005de4:	f7fa f9b4 	bl	8000150 <strlen>
 8005de8:	2300      	movs	r3, #0
 8005dea:	930e      	str	r3, [sp, #56]	; 0x38
 8005dec:	f8d8 3000 	ldr.w	r3, [r8]
 8005df0:	900a      	str	r0, [sp, #40]	; 0x28
 8005df2:	3307      	adds	r3, #7
 8005df4:	f023 0307 	bic.w	r3, r3, #7
 8005df8:	f103 0208 	add.w	r2, r3, #8
 8005dfc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e00:	f8d4 b000 	ldr.w	fp, [r4]
 8005e04:	f8c8 2000 	str.w	r2, [r8]
 8005e08:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	4643      	mov	r3, r8
 8005e10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e14:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1e:	4650      	mov	r0, sl
 8005e20:	4b9c      	ldr	r3, [pc, #624]	; (8006094 <_printf_float+0x2cc>)
 8005e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e24:	f7fa fdf2 	bl	8000a0c <__aeabi_dcmpun>
 8005e28:	bb70      	cbnz	r0, 8005e88 <_printf_float+0xc0>
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	4650      	mov	r0, sl
 8005e30:	4b98      	ldr	r3, [pc, #608]	; (8006094 <_printf_float+0x2cc>)
 8005e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e34:	f7fa fdcc 	bl	80009d0 <__aeabi_dcmple>
 8005e38:	bb30      	cbnz	r0, 8005e88 <_printf_float+0xc0>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4650      	mov	r0, sl
 8005e40:	4641      	mov	r1, r8
 8005e42:	f7fa fdbb 	bl	80009bc <__aeabi_dcmplt>
 8005e46:	b110      	cbz	r0, 8005e4e <_printf_float+0x86>
 8005e48:	232d      	movs	r3, #45	; 0x2d
 8005e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4e:	4a92      	ldr	r2, [pc, #584]	; (8006098 <_printf_float+0x2d0>)
 8005e50:	4b92      	ldr	r3, [pc, #584]	; (800609c <_printf_float+0x2d4>)
 8005e52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e56:	bf94      	ite	ls
 8005e58:	4690      	movls	r8, r2
 8005e5a:	4698      	movhi	r8, r3
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	f04f 0a00 	mov.w	sl, #0
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	f02b 0304 	bic.w	r3, fp, #4
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	4633      	mov	r3, r6
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	9700      	str	r7, [sp, #0]
 8005e72:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e74:	f000 f9d6 	bl	8006224 <_printf_common>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f040 8090 	bne.w	8005f9e <_printf_float+0x1d6>
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	b011      	add	sp, #68	; 0x44
 8005e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e88:	4652      	mov	r2, sl
 8005e8a:	4643      	mov	r3, r8
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4641      	mov	r1, r8
 8005e90:	f7fa fdbc 	bl	8000a0c <__aeabi_dcmpun>
 8005e94:	b148      	cbz	r0, 8005eaa <_printf_float+0xe2>
 8005e96:	f1b8 0f00 	cmp.w	r8, #0
 8005e9a:	bfb8      	it	lt
 8005e9c:	232d      	movlt	r3, #45	; 0x2d
 8005e9e:	4a80      	ldr	r2, [pc, #512]	; (80060a0 <_printf_float+0x2d8>)
 8005ea0:	bfb8      	it	lt
 8005ea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ea6:	4b7f      	ldr	r3, [pc, #508]	; (80060a4 <_printf_float+0x2dc>)
 8005ea8:	e7d3      	b.n	8005e52 <_printf_float+0x8a>
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	d142      	bne.n	8005f3a <_printf_float+0x172>
 8005eb4:	2306      	movs	r3, #6
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	9206      	str	r2, [sp, #24]
 8005ebc:	aa0e      	add	r2, sp, #56	; 0x38
 8005ebe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ec2:	aa0d      	add	r2, sp, #52	; 0x34
 8005ec4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ec8:	9203      	str	r2, [sp, #12]
 8005eca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005ece:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	4628      	mov	r0, r5
 8005edc:	4643      	mov	r3, r8
 8005ede:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ee0:	f7ff fed6 	bl	8005c90 <__cvt>
 8005ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	2947      	cmp	r1, #71	; 0x47
 8005eea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eec:	d108      	bne.n	8005f00 <_printf_float+0x138>
 8005eee:	1cc8      	adds	r0, r1, #3
 8005ef0:	db02      	blt.n	8005ef8 <_printf_float+0x130>
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	dd40      	ble.n	8005f7a <_printf_float+0x1b2>
 8005ef8:	f1a9 0902 	sub.w	r9, r9, #2
 8005efc:	fa5f f989 	uxtb.w	r9, r9
 8005f00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f04:	d81f      	bhi.n	8005f46 <_printf_float+0x17e>
 8005f06:	464a      	mov	r2, r9
 8005f08:	3901      	subs	r1, #1
 8005f0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f0e:	910d      	str	r1, [sp, #52]	; 0x34
 8005f10:	f7ff ff1d 	bl	8005d4e <__exponent>
 8005f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f16:	4682      	mov	sl, r0
 8005f18:	1813      	adds	r3, r2, r0
 8005f1a:	2a01      	cmp	r2, #1
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	dc02      	bgt.n	8005f26 <_printf_float+0x15e>
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	07d2      	lsls	r2, r2, #31
 8005f24:	d501      	bpl.n	8005f2a <_printf_float+0x162>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d09b      	beq.n	8005e6a <_printf_float+0xa2>
 8005f32:	232d      	movs	r3, #45	; 0x2d
 8005f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f38:	e797      	b.n	8005e6a <_printf_float+0xa2>
 8005f3a:	2947      	cmp	r1, #71	; 0x47
 8005f3c:	d1bc      	bne.n	8005eb8 <_printf_float+0xf0>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ba      	bne.n	8005eb8 <_printf_float+0xf0>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7b7      	b.n	8005eb6 <_printf_float+0xee>
 8005f46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f4a:	d118      	bne.n	8005f7e <_printf_float+0x1b6>
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	6863      	ldr	r3, [r4, #4]
 8005f50:	dd0b      	ble.n	8005f6a <_printf_float+0x1a2>
 8005f52:	6121      	str	r1, [r4, #16]
 8005f54:	b913      	cbnz	r3, 8005f5c <_printf_float+0x194>
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	07d0      	lsls	r0, r2, #31
 8005f5a:	d502      	bpl.n	8005f62 <_printf_float+0x19a>
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	440b      	add	r3, r1
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	f04f 0a00 	mov.w	sl, #0
 8005f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f68:	e7df      	b.n	8005f2a <_printf_float+0x162>
 8005f6a:	b913      	cbnz	r3, 8005f72 <_printf_float+0x1aa>
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	07d2      	lsls	r2, r2, #31
 8005f70:	d501      	bpl.n	8005f76 <_printf_float+0x1ae>
 8005f72:	3302      	adds	r3, #2
 8005f74:	e7f4      	b.n	8005f60 <_printf_float+0x198>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e7f2      	b.n	8005f60 <_printf_float+0x198>
 8005f7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f80:	4299      	cmp	r1, r3
 8005f82:	db05      	blt.n	8005f90 <_printf_float+0x1c8>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	6121      	str	r1, [r4, #16]
 8005f88:	07d8      	lsls	r0, r3, #31
 8005f8a:	d5ea      	bpl.n	8005f62 <_printf_float+0x19a>
 8005f8c:	1c4b      	adds	r3, r1, #1
 8005f8e:	e7e7      	b.n	8005f60 <_printf_float+0x198>
 8005f90:	2900      	cmp	r1, #0
 8005f92:	bfcc      	ite	gt
 8005f94:	2201      	movgt	r2, #1
 8005f96:	f1c1 0202 	rsble	r2, r1, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	e7e0      	b.n	8005f60 <_printf_float+0x198>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	055a      	lsls	r2, r3, #21
 8005fa2:	d407      	bmi.n	8005fb4 <_printf_float+0x1ec>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d12b      	bne.n	800600a <_printf_float+0x242>
 8005fb2:	e764      	b.n	8005e7e <_printf_float+0xb6>
 8005fb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fb8:	f240 80dd 	bls.w	8006176 <_printf_float+0x3ae>
 8005fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f7fa fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d033      	beq.n	8006034 <_printf_float+0x26c>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	4a35      	ldr	r2, [pc, #212]	; (80060a8 <_printf_float+0x2e0>)
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f af51 	beq.w	8005e7e <_printf_float+0xb6>
 8005fdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	db02      	blt.n	8005fea <_printf_float+0x222>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	07d8      	lsls	r0, r3, #31
 8005fe8:	d50f      	bpl.n	800600a <_printf_float+0x242>
 8005fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f af42 	beq.w	8005e7e <_printf_float+0xb6>
 8005ffa:	f04f 0800 	mov.w	r8, #0
 8005ffe:	f104 091a 	add.w	r9, r4, #26
 8006002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006004:	3b01      	subs	r3, #1
 8006006:	4543      	cmp	r3, r8
 8006008:	dc09      	bgt.n	800601e <_printf_float+0x256>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	079b      	lsls	r3, r3, #30
 800600e:	f100 8104 	bmi.w	800621a <_printf_float+0x452>
 8006012:	68e0      	ldr	r0, [r4, #12]
 8006014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006016:	4298      	cmp	r0, r3
 8006018:	bfb8      	it	lt
 800601a:	4618      	movlt	r0, r3
 800601c:	e731      	b.n	8005e82 <_printf_float+0xba>
 800601e:	2301      	movs	r3, #1
 8006020:	464a      	mov	r2, r9
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f af28 	beq.w	8005e7e <_printf_float+0xb6>
 800602e:	f108 0801 	add.w	r8, r8, #1
 8006032:	e7e6      	b.n	8006002 <_printf_float+0x23a>
 8006034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006036:	2b00      	cmp	r3, #0
 8006038:	dc38      	bgt.n	80060ac <_printf_float+0x2e4>
 800603a:	2301      	movs	r3, #1
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	4a19      	ldr	r2, [pc, #100]	; (80060a8 <_printf_float+0x2e0>)
 8006042:	47b8      	blx	r7
 8006044:	3001      	adds	r0, #1
 8006046:	f43f af1a 	beq.w	8005e7e <_printf_float+0xb6>
 800604a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800604e:	4313      	orrs	r3, r2
 8006050:	d102      	bne.n	8006058 <_printf_float+0x290>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	07d9      	lsls	r1, r3, #31
 8006056:	d5d8      	bpl.n	800600a <_printf_float+0x242>
 8006058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	47b8      	blx	r7
 8006062:	3001      	adds	r0, #1
 8006064:	f43f af0b 	beq.w	8005e7e <_printf_float+0xb6>
 8006068:	f04f 0900 	mov.w	r9, #0
 800606c:	f104 0a1a 	add.w	sl, r4, #26
 8006070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006072:	425b      	negs	r3, r3
 8006074:	454b      	cmp	r3, r9
 8006076:	dc01      	bgt.n	800607c <_printf_float+0x2b4>
 8006078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800607a:	e794      	b.n	8005fa6 <_printf_float+0x1de>
 800607c:	2301      	movs	r3, #1
 800607e:	4652      	mov	r2, sl
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f aef9 	beq.w	8005e7e <_printf_float+0xb6>
 800608c:	f109 0901 	add.w	r9, r9, #1
 8006090:	e7ee      	b.n	8006070 <_printf_float+0x2a8>
 8006092:	bf00      	nop
 8006094:	7fefffff 	.word	0x7fefffff
 8006098:	0800a19a 	.word	0x0800a19a
 800609c:	0800a19e 	.word	0x0800a19e
 80060a0:	0800a1a2 	.word	0x0800a1a2
 80060a4:	0800a1a6 	.word	0x0800a1a6
 80060a8:	0800a1aa 	.word	0x0800a1aa
 80060ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060b0:	429a      	cmp	r2, r3
 80060b2:	bfa8      	it	ge
 80060b4:	461a      	movge	r2, r3
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	4691      	mov	r9, r2
 80060ba:	dc37      	bgt.n	800612c <_printf_float+0x364>
 80060bc:	f04f 0b00 	mov.w	fp, #0
 80060c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c4:	f104 021a 	add.w	r2, r4, #26
 80060c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060cc:	ebaa 0309 	sub.w	r3, sl, r9
 80060d0:	455b      	cmp	r3, fp
 80060d2:	dc33      	bgt.n	800613c <_printf_float+0x374>
 80060d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060d8:	429a      	cmp	r2, r3
 80060da:	db3b      	blt.n	8006154 <_printf_float+0x38c>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	07da      	lsls	r2, r3, #31
 80060e0:	d438      	bmi.n	8006154 <_printf_float+0x38c>
 80060e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80060e6:	eba2 0903 	sub.w	r9, r2, r3
 80060ea:	eba2 020a 	sub.w	r2, r2, sl
 80060ee:	4591      	cmp	r9, r2
 80060f0:	bfa8      	it	ge
 80060f2:	4691      	movge	r9, r2
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	dc34      	bgt.n	8006164 <_printf_float+0x39c>
 80060fa:	f04f 0800 	mov.w	r8, #0
 80060fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006102:	f104 0a1a 	add.w	sl, r4, #26
 8006106:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	eba3 0309 	sub.w	r3, r3, r9
 8006110:	4543      	cmp	r3, r8
 8006112:	f77f af7a 	ble.w	800600a <_printf_float+0x242>
 8006116:	2301      	movs	r3, #1
 8006118:	4652      	mov	r2, sl
 800611a:	4631      	mov	r1, r6
 800611c:	4628      	mov	r0, r5
 800611e:	47b8      	blx	r7
 8006120:	3001      	adds	r0, #1
 8006122:	f43f aeac 	beq.w	8005e7e <_printf_float+0xb6>
 8006126:	f108 0801 	add.w	r8, r8, #1
 800612a:	e7ec      	b.n	8006106 <_printf_float+0x33e>
 800612c:	4613      	mov	r3, r2
 800612e:	4631      	mov	r1, r6
 8006130:	4642      	mov	r2, r8
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	d1c0      	bne.n	80060bc <_printf_float+0x2f4>
 800613a:	e6a0      	b.n	8005e7e <_printf_float+0xb6>
 800613c:	2301      	movs	r3, #1
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	920b      	str	r2, [sp, #44]	; 0x2c
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f ae99 	beq.w	8005e7e <_printf_float+0xb6>
 800614c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800614e:	f10b 0b01 	add.w	fp, fp, #1
 8006152:	e7b9      	b.n	80060c8 <_printf_float+0x300>
 8006154:	4631      	mov	r1, r6
 8006156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	d1bf      	bne.n	80060e2 <_printf_float+0x31a>
 8006162:	e68c      	b.n	8005e7e <_printf_float+0xb6>
 8006164:	464b      	mov	r3, r9
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	eb08 020a 	add.w	r2, r8, sl
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	d1c2      	bne.n	80060fa <_printf_float+0x332>
 8006174:	e683      	b.n	8005e7e <_printf_float+0xb6>
 8006176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006178:	2a01      	cmp	r2, #1
 800617a:	dc01      	bgt.n	8006180 <_printf_float+0x3b8>
 800617c:	07db      	lsls	r3, r3, #31
 800617e:	d539      	bpl.n	80061f4 <_printf_float+0x42c>
 8006180:	2301      	movs	r3, #1
 8006182:	4642      	mov	r2, r8
 8006184:	4631      	mov	r1, r6
 8006186:	4628      	mov	r0, r5
 8006188:	47b8      	blx	r7
 800618a:	3001      	adds	r0, #1
 800618c:	f43f ae77 	beq.w	8005e7e <_printf_float+0xb6>
 8006190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006194:	4631      	mov	r1, r6
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	f43f ae6f 	beq.w	8005e7e <_printf_float+0xb6>
 80061a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061a4:	2200      	movs	r2, #0
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80061ac:	f7fa fbfc 	bl	80009a8 <__aeabi_dcmpeq>
 80061b0:	b9d8      	cbnz	r0, 80061ea <_printf_float+0x422>
 80061b2:	f109 33ff 	add.w	r3, r9, #4294967295
 80061b6:	f108 0201 	add.w	r2, r8, #1
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d10e      	bne.n	80061e2 <_printf_float+0x41a>
 80061c4:	e65b      	b.n	8005e7e <_printf_float+0xb6>
 80061c6:	2301      	movs	r3, #1
 80061c8:	464a      	mov	r2, r9
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae54 	beq.w	8005e7e <_printf_float+0xb6>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061dc:	3b01      	subs	r3, #1
 80061de:	4543      	cmp	r3, r8
 80061e0:	dcf1      	bgt.n	80061c6 <_printf_float+0x3fe>
 80061e2:	4653      	mov	r3, sl
 80061e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061e8:	e6de      	b.n	8005fa8 <_printf_float+0x1e0>
 80061ea:	f04f 0800 	mov.w	r8, #0
 80061ee:	f104 091a 	add.w	r9, r4, #26
 80061f2:	e7f2      	b.n	80061da <_printf_float+0x412>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4642      	mov	r2, r8
 80061f8:	e7df      	b.n	80061ba <_printf_float+0x3f2>
 80061fa:	2301      	movs	r3, #1
 80061fc:	464a      	mov	r2, r9
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f ae3a 	beq.w	8005e7e <_printf_float+0xb6>
 800620a:	f108 0801 	add.w	r8, r8, #1
 800620e:	68e3      	ldr	r3, [r4, #12]
 8006210:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006212:	1a5b      	subs	r3, r3, r1
 8006214:	4543      	cmp	r3, r8
 8006216:	dcf0      	bgt.n	80061fa <_printf_float+0x432>
 8006218:	e6fb      	b.n	8006012 <_printf_float+0x24a>
 800621a:	f04f 0800 	mov.w	r8, #0
 800621e:	f104 0919 	add.w	r9, r4, #25
 8006222:	e7f4      	b.n	800620e <_printf_float+0x446>

08006224 <_printf_common>:
 8006224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006228:	4616      	mov	r6, r2
 800622a:	4699      	mov	r9, r3
 800622c:	688a      	ldr	r2, [r1, #8]
 800622e:	690b      	ldr	r3, [r1, #16]
 8006230:	4607      	mov	r7, r0
 8006232:	4293      	cmp	r3, r2
 8006234:	bfb8      	it	lt
 8006236:	4613      	movlt	r3, r2
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800623e:	460c      	mov	r4, r1
 8006240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006244:	b10a      	cbz	r2, 800624a <_printf_common+0x26>
 8006246:	3301      	adds	r3, #1
 8006248:	6033      	str	r3, [r6, #0]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	0699      	lsls	r1, r3, #26
 800624e:	bf42      	ittt	mi
 8006250:	6833      	ldrmi	r3, [r6, #0]
 8006252:	3302      	addmi	r3, #2
 8006254:	6033      	strmi	r3, [r6, #0]
 8006256:	6825      	ldr	r5, [r4, #0]
 8006258:	f015 0506 	ands.w	r5, r5, #6
 800625c:	d106      	bne.n	800626c <_printf_common+0x48>
 800625e:	f104 0a19 	add.w	sl, r4, #25
 8006262:	68e3      	ldr	r3, [r4, #12]
 8006264:	6832      	ldr	r2, [r6, #0]
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	42ab      	cmp	r3, r5
 800626a:	dc2b      	bgt.n	80062c4 <_printf_common+0xa0>
 800626c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006270:	1e13      	subs	r3, r2, #0
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	bf18      	it	ne
 8006276:	2301      	movne	r3, #1
 8006278:	0692      	lsls	r2, r2, #26
 800627a:	d430      	bmi.n	80062de <_printf_common+0xba>
 800627c:	4649      	mov	r1, r9
 800627e:	4638      	mov	r0, r7
 8006280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006284:	47c0      	blx	r8
 8006286:	3001      	adds	r0, #1
 8006288:	d023      	beq.n	80062d2 <_printf_common+0xae>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6922      	ldr	r2, [r4, #16]
 800628e:	f003 0306 	and.w	r3, r3, #6
 8006292:	2b04      	cmp	r3, #4
 8006294:	bf14      	ite	ne
 8006296:	2500      	movne	r5, #0
 8006298:	6833      	ldreq	r3, [r6, #0]
 800629a:	f04f 0600 	mov.w	r6, #0
 800629e:	bf08      	it	eq
 80062a0:	68e5      	ldreq	r5, [r4, #12]
 80062a2:	f104 041a 	add.w	r4, r4, #26
 80062a6:	bf08      	it	eq
 80062a8:	1aed      	subeq	r5, r5, r3
 80062aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062ae:	bf08      	it	eq
 80062b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bfc4      	itt	gt
 80062b8:	1a9b      	subgt	r3, r3, r2
 80062ba:	18ed      	addgt	r5, r5, r3
 80062bc:	42b5      	cmp	r5, r6
 80062be:	d11a      	bne.n	80062f6 <_printf_common+0xd2>
 80062c0:	2000      	movs	r0, #0
 80062c2:	e008      	b.n	80062d6 <_printf_common+0xb2>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4652      	mov	r2, sl
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d103      	bne.n	80062da <_printf_common+0xb6>
 80062d2:	f04f 30ff 	mov.w	r0, #4294967295
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	3501      	adds	r5, #1
 80062dc:	e7c1      	b.n	8006262 <_printf_common+0x3e>
 80062de:	2030      	movs	r0, #48	; 0x30
 80062e0:	18e1      	adds	r1, r4, r3
 80062e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ec:	4422      	add	r2, r4
 80062ee:	3302      	adds	r3, #2
 80062f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f4:	e7c2      	b.n	800627c <_printf_common+0x58>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4622      	mov	r2, r4
 80062fa:	4649      	mov	r1, r9
 80062fc:	4638      	mov	r0, r7
 80062fe:	47c0      	blx	r8
 8006300:	3001      	adds	r0, #1
 8006302:	d0e6      	beq.n	80062d2 <_printf_common+0xae>
 8006304:	3601      	adds	r6, #1
 8006306:	e7d9      	b.n	80062bc <_printf_common+0x98>

08006308 <_printf_i>:
 8006308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	7e0f      	ldrb	r7, [r1, #24]
 800630e:	4691      	mov	r9, r2
 8006310:	2f78      	cmp	r7, #120	; 0x78
 8006312:	4680      	mov	r8, r0
 8006314:	460c      	mov	r4, r1
 8006316:	469a      	mov	sl, r3
 8006318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800631a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800631e:	d807      	bhi.n	8006330 <_printf_i+0x28>
 8006320:	2f62      	cmp	r7, #98	; 0x62
 8006322:	d80a      	bhi.n	800633a <_printf_i+0x32>
 8006324:	2f00      	cmp	r7, #0
 8006326:	f000 80d5 	beq.w	80064d4 <_printf_i+0x1cc>
 800632a:	2f58      	cmp	r7, #88	; 0x58
 800632c:	f000 80c1 	beq.w	80064b2 <_printf_i+0x1aa>
 8006330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006338:	e03a      	b.n	80063b0 <_printf_i+0xa8>
 800633a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800633e:	2b15      	cmp	r3, #21
 8006340:	d8f6      	bhi.n	8006330 <_printf_i+0x28>
 8006342:	a101      	add	r1, pc, #4	; (adr r1, 8006348 <_printf_i+0x40>)
 8006344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006348:	080063a1 	.word	0x080063a1
 800634c:	080063b5 	.word	0x080063b5
 8006350:	08006331 	.word	0x08006331
 8006354:	08006331 	.word	0x08006331
 8006358:	08006331 	.word	0x08006331
 800635c:	08006331 	.word	0x08006331
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006331 	.word	0x08006331
 8006368:	08006331 	.word	0x08006331
 800636c:	08006331 	.word	0x08006331
 8006370:	08006331 	.word	0x08006331
 8006374:	080064bb 	.word	0x080064bb
 8006378:	080063e1 	.word	0x080063e1
 800637c:	08006475 	.word	0x08006475
 8006380:	08006331 	.word	0x08006331
 8006384:	08006331 	.word	0x08006331
 8006388:	080064dd 	.word	0x080064dd
 800638c:	08006331 	.word	0x08006331
 8006390:	080063e1 	.word	0x080063e1
 8006394:	08006331 	.word	0x08006331
 8006398:	08006331 	.word	0x08006331
 800639c:	0800647d 	.word	0x0800647d
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0a0      	b.n	80064f6 <_printf_i+0x1ee>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	0607      	lsls	r7, r0, #24
 80063ba:	f103 0104 	add.w	r1, r3, #4
 80063be:	6029      	str	r1, [r5, #0]
 80063c0:	d501      	bpl.n	80063c6 <_printf_i+0xbe>
 80063c2:	681e      	ldr	r6, [r3, #0]
 80063c4:	e003      	b.n	80063ce <_printf_i+0xc6>
 80063c6:	0646      	lsls	r6, r0, #25
 80063c8:	d5fb      	bpl.n	80063c2 <_printf_i+0xba>
 80063ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	da03      	bge.n	80063da <_printf_i+0xd2>
 80063d2:	232d      	movs	r3, #45	; 0x2d
 80063d4:	4276      	negs	r6, r6
 80063d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063da:	230a      	movs	r3, #10
 80063dc:	4859      	ldr	r0, [pc, #356]	; (8006544 <_printf_i+0x23c>)
 80063de:	e012      	b.n	8006406 <_printf_i+0xfe>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	1d19      	adds	r1, r3, #4
 80063e6:	6029      	str	r1, [r5, #0]
 80063e8:	0605      	lsls	r5, r0, #24
 80063ea:	d501      	bpl.n	80063f0 <_printf_i+0xe8>
 80063ec:	681e      	ldr	r6, [r3, #0]
 80063ee:	e002      	b.n	80063f6 <_printf_i+0xee>
 80063f0:	0641      	lsls	r1, r0, #25
 80063f2:	d5fb      	bpl.n	80063ec <_printf_i+0xe4>
 80063f4:	881e      	ldrh	r6, [r3, #0]
 80063f6:	2f6f      	cmp	r7, #111	; 0x6f
 80063f8:	bf0c      	ite	eq
 80063fa:	2308      	moveq	r3, #8
 80063fc:	230a      	movne	r3, #10
 80063fe:	4851      	ldr	r0, [pc, #324]	; (8006544 <_printf_i+0x23c>)
 8006400:	2100      	movs	r1, #0
 8006402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006406:	6865      	ldr	r5, [r4, #4]
 8006408:	2d00      	cmp	r5, #0
 800640a:	bfa8      	it	ge
 800640c:	6821      	ldrge	r1, [r4, #0]
 800640e:	60a5      	str	r5, [r4, #8]
 8006410:	bfa4      	itt	ge
 8006412:	f021 0104 	bicge.w	r1, r1, #4
 8006416:	6021      	strge	r1, [r4, #0]
 8006418:	b90e      	cbnz	r6, 800641e <_printf_i+0x116>
 800641a:	2d00      	cmp	r5, #0
 800641c:	d04b      	beq.n	80064b6 <_printf_i+0x1ae>
 800641e:	4615      	mov	r5, r2
 8006420:	fbb6 f1f3 	udiv	r1, r6, r3
 8006424:	fb03 6711 	mls	r7, r3, r1, r6
 8006428:	5dc7      	ldrb	r7, [r0, r7]
 800642a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800642e:	4637      	mov	r7, r6
 8006430:	42bb      	cmp	r3, r7
 8006432:	460e      	mov	r6, r1
 8006434:	d9f4      	bls.n	8006420 <_printf_i+0x118>
 8006436:	2b08      	cmp	r3, #8
 8006438:	d10b      	bne.n	8006452 <_printf_i+0x14a>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	07de      	lsls	r6, r3, #31
 800643e:	d508      	bpl.n	8006452 <_printf_i+0x14a>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	6861      	ldr	r1, [r4, #4]
 8006444:	4299      	cmp	r1, r3
 8006446:	bfde      	ittt	le
 8006448:	2330      	movle	r3, #48	; 0x30
 800644a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800644e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006452:	1b52      	subs	r2, r2, r5
 8006454:	6122      	str	r2, [r4, #16]
 8006456:	464b      	mov	r3, r9
 8006458:	4621      	mov	r1, r4
 800645a:	4640      	mov	r0, r8
 800645c:	f8cd a000 	str.w	sl, [sp]
 8006460:	aa03      	add	r2, sp, #12
 8006462:	f7ff fedf 	bl	8006224 <_printf_common>
 8006466:	3001      	adds	r0, #1
 8006468:	d14a      	bne.n	8006500 <_printf_i+0x1f8>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	b004      	add	sp, #16
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f043 0320 	orr.w	r3, r3, #32
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	2778      	movs	r7, #120	; 0x78
 800647e:	4832      	ldr	r0, [pc, #200]	; (8006548 <_printf_i+0x240>)
 8006480:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	6829      	ldr	r1, [r5, #0]
 8006488:	061f      	lsls	r7, r3, #24
 800648a:	f851 6b04 	ldr.w	r6, [r1], #4
 800648e:	d402      	bmi.n	8006496 <_printf_i+0x18e>
 8006490:	065f      	lsls	r7, r3, #25
 8006492:	bf48      	it	mi
 8006494:	b2b6      	uxthmi	r6, r6
 8006496:	07df      	lsls	r7, r3, #31
 8006498:	bf48      	it	mi
 800649a:	f043 0320 	orrmi.w	r3, r3, #32
 800649e:	6029      	str	r1, [r5, #0]
 80064a0:	bf48      	it	mi
 80064a2:	6023      	strmi	r3, [r4, #0]
 80064a4:	b91e      	cbnz	r6, 80064ae <_printf_i+0x1a6>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f023 0320 	bic.w	r3, r3, #32
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	2310      	movs	r3, #16
 80064b0:	e7a6      	b.n	8006400 <_printf_i+0xf8>
 80064b2:	4824      	ldr	r0, [pc, #144]	; (8006544 <_printf_i+0x23c>)
 80064b4:	e7e4      	b.n	8006480 <_printf_i+0x178>
 80064b6:	4615      	mov	r5, r2
 80064b8:	e7bd      	b.n	8006436 <_printf_i+0x12e>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	6826      	ldr	r6, [r4, #0]
 80064be:	1d18      	adds	r0, r3, #4
 80064c0:	6961      	ldr	r1, [r4, #20]
 80064c2:	6028      	str	r0, [r5, #0]
 80064c4:	0635      	lsls	r5, r6, #24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	d501      	bpl.n	80064ce <_printf_i+0x1c6>
 80064ca:	6019      	str	r1, [r3, #0]
 80064cc:	e002      	b.n	80064d4 <_printf_i+0x1cc>
 80064ce:	0670      	lsls	r0, r6, #25
 80064d0:	d5fb      	bpl.n	80064ca <_printf_i+0x1c2>
 80064d2:	8019      	strh	r1, [r3, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	4615      	mov	r5, r2
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	e7bc      	b.n	8006456 <_printf_i+0x14e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	2100      	movs	r1, #0
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	681d      	ldr	r5, [r3, #0]
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 fb0c 	bl	8006b06 <memchr>
 80064ee:	b108      	cbz	r0, 80064f4 <_printf_i+0x1ec>
 80064f0:	1b40      	subs	r0, r0, r5
 80064f2:	6060      	str	r0, [r4, #4]
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	6123      	str	r3, [r4, #16]
 80064f8:	2300      	movs	r3, #0
 80064fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fe:	e7aa      	b.n	8006456 <_printf_i+0x14e>
 8006500:	462a      	mov	r2, r5
 8006502:	4649      	mov	r1, r9
 8006504:	4640      	mov	r0, r8
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	47d0      	blx	sl
 800650a:	3001      	adds	r0, #1
 800650c:	d0ad      	beq.n	800646a <_printf_i+0x162>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	079b      	lsls	r3, r3, #30
 8006512:	d413      	bmi.n	800653c <_printf_i+0x234>
 8006514:	68e0      	ldr	r0, [r4, #12]
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	4298      	cmp	r0, r3
 800651a:	bfb8      	it	lt
 800651c:	4618      	movlt	r0, r3
 800651e:	e7a6      	b.n	800646e <_printf_i+0x166>
 8006520:	2301      	movs	r3, #1
 8006522:	4632      	mov	r2, r6
 8006524:	4649      	mov	r1, r9
 8006526:	4640      	mov	r0, r8
 8006528:	47d0      	blx	sl
 800652a:	3001      	adds	r0, #1
 800652c:	d09d      	beq.n	800646a <_printf_i+0x162>
 800652e:	3501      	adds	r5, #1
 8006530:	68e3      	ldr	r3, [r4, #12]
 8006532:	9903      	ldr	r1, [sp, #12]
 8006534:	1a5b      	subs	r3, r3, r1
 8006536:	42ab      	cmp	r3, r5
 8006538:	dcf2      	bgt.n	8006520 <_printf_i+0x218>
 800653a:	e7eb      	b.n	8006514 <_printf_i+0x20c>
 800653c:	2500      	movs	r5, #0
 800653e:	f104 0619 	add.w	r6, r4, #25
 8006542:	e7f5      	b.n	8006530 <_printf_i+0x228>
 8006544:	0800a1ac 	.word	0x0800a1ac
 8006548:	0800a1bd 	.word	0x0800a1bd

0800654c <std>:
 800654c:	2300      	movs	r3, #0
 800654e:	b510      	push	{r4, lr}
 8006550:	4604      	mov	r4, r0
 8006552:	e9c0 3300 	strd	r3, r3, [r0]
 8006556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800655a:	6083      	str	r3, [r0, #8]
 800655c:	8181      	strh	r1, [r0, #12]
 800655e:	6643      	str	r3, [r0, #100]	; 0x64
 8006560:	81c2      	strh	r2, [r0, #14]
 8006562:	6183      	str	r3, [r0, #24]
 8006564:	4619      	mov	r1, r3
 8006566:	2208      	movs	r2, #8
 8006568:	305c      	adds	r0, #92	; 0x5c
 800656a:	f000 f9f7 	bl	800695c <memset>
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <std+0x58>)
 8006570:	6224      	str	r4, [r4, #32]
 8006572:	6263      	str	r3, [r4, #36]	; 0x24
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <std+0x5c>)
 8006576:	62a3      	str	r3, [r4, #40]	; 0x28
 8006578:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <std+0x60>)
 800657a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <std+0x64>)
 800657e:	6323      	str	r3, [r4, #48]	; 0x30
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <std+0x68>)
 8006582:	429c      	cmp	r4, r3
 8006584:	d006      	beq.n	8006594 <std+0x48>
 8006586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800658a:	4294      	cmp	r4, r2
 800658c:	d002      	beq.n	8006594 <std+0x48>
 800658e:	33d0      	adds	r3, #208	; 0xd0
 8006590:	429c      	cmp	r4, r3
 8006592:	d105      	bne.n	80065a0 <std+0x54>
 8006594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659c:	f000 bab0 	b.w	8006b00 <__retarget_lock_init_recursive>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	080067ad 	.word	0x080067ad
 80065a8:	080067cf 	.word	0x080067cf
 80065ac:	08006807 	.word	0x08006807
 80065b0:	0800682b 	.word	0x0800682b
 80065b4:	20002b18 	.word	0x20002b18

080065b8 <stdio_exit_handler>:
 80065b8:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <stdio_exit_handler+0xc>)
 80065ba:	4903      	ldr	r1, [pc, #12]	; (80065c8 <stdio_exit_handler+0x10>)
 80065bc:	4803      	ldr	r0, [pc, #12]	; (80065cc <stdio_exit_handler+0x14>)
 80065be:	f000 b869 	b.w	8006694 <_fwalk_sglue>
 80065c2:	bf00      	nop
 80065c4:	20000010 	.word	0x20000010
 80065c8:	08008489 	.word	0x08008489
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <cleanup_stdio>:
 80065d0:	6841      	ldr	r1, [r0, #4]
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <cleanup_stdio+0x34>)
 80065d4:	b510      	push	{r4, lr}
 80065d6:	4299      	cmp	r1, r3
 80065d8:	4604      	mov	r4, r0
 80065da:	d001      	beq.n	80065e0 <cleanup_stdio+0x10>
 80065dc:	f001 ff54 	bl	8008488 <_fflush_r>
 80065e0:	68a1      	ldr	r1, [r4, #8]
 80065e2:	4b09      	ldr	r3, [pc, #36]	; (8006608 <cleanup_stdio+0x38>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <cleanup_stdio+0x1e>
 80065e8:	4620      	mov	r0, r4
 80065ea:	f001 ff4d 	bl	8008488 <_fflush_r>
 80065ee:	68e1      	ldr	r1, [r4, #12]
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <cleanup_stdio+0x3c>)
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d004      	beq.n	8006600 <cleanup_stdio+0x30>
 80065f6:	4620      	mov	r0, r4
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f001 bf44 	b.w	8008488 <_fflush_r>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	20002b18 	.word	0x20002b18
 8006608:	20002b80 	.word	0x20002b80
 800660c:	20002be8 	.word	0x20002be8

08006610 <global_stdio_init.part.0>:
 8006610:	b510      	push	{r4, lr}
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <global_stdio_init.part.0+0x30>)
 8006614:	4c0b      	ldr	r4, [pc, #44]	; (8006644 <global_stdio_init.part.0+0x34>)
 8006616:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <global_stdio_init.part.0+0x38>)
 8006618:	4620      	mov	r0, r4
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	2104      	movs	r1, #4
 800661e:	2200      	movs	r2, #0
 8006620:	f7ff ff94 	bl	800654c <std>
 8006624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006628:	2201      	movs	r2, #1
 800662a:	2109      	movs	r1, #9
 800662c:	f7ff ff8e 	bl	800654c <std>
 8006630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006634:	2202      	movs	r2, #2
 8006636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663a:	2112      	movs	r1, #18
 800663c:	f7ff bf86 	b.w	800654c <std>
 8006640:	20002c50 	.word	0x20002c50
 8006644:	20002b18 	.word	0x20002b18
 8006648:	080065b9 	.word	0x080065b9

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 ba58 	b.w	8006b02 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	20002c59 	.word	0x20002c59

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 ba53 	b.w	8006b04 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	20002c59 	.word	0x20002c59

08006664 <__sinit>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4604      	mov	r4, r0
 8006668:	f7ff fff0 	bl	800664c <__sfp_lock_acquire>
 800666c:	6a23      	ldr	r3, [r4, #32]
 800666e:	b11b      	cbz	r3, 8006678 <__sinit+0x14>
 8006670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006674:	f7ff bff0 	b.w	8006658 <__sfp_lock_release>
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <__sinit+0x28>)
 800667a:	6223      	str	r3, [r4, #32]
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <__sinit+0x2c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <__sinit+0xc>
 8006684:	f7ff ffc4 	bl	8006610 <global_stdio_init.part.0>
 8006688:	e7f2      	b.n	8006670 <__sinit+0xc>
 800668a:	bf00      	nop
 800668c:	080065d1 	.word	0x080065d1
 8006690:	20002c50 	.word	0x20002c50

08006694 <_fwalk_sglue>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	4607      	mov	r7, r0
 800669a:	4688      	mov	r8, r1
 800669c:	4614      	mov	r4, r2
 800669e:	2600      	movs	r6, #0
 80066a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066a4:	f1b9 0901 	subs.w	r9, r9, #1
 80066a8:	d505      	bpl.n	80066b6 <_fwalk_sglue+0x22>
 80066aa:	6824      	ldr	r4, [r4, #0]
 80066ac:	2c00      	cmp	r4, #0
 80066ae:	d1f7      	bne.n	80066a0 <_fwalk_sglue+0xc>
 80066b0:	4630      	mov	r0, r6
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d907      	bls.n	80066cc <_fwalk_sglue+0x38>
 80066bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066c0:	3301      	adds	r3, #1
 80066c2:	d003      	beq.n	80066cc <_fwalk_sglue+0x38>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c0      	blx	r8
 80066ca:	4306      	orrs	r6, r0
 80066cc:	3568      	adds	r5, #104	; 0x68
 80066ce:	e7e9      	b.n	80066a4 <_fwalk_sglue+0x10>

080066d0 <iprintf>:
 80066d0:	b40f      	push	{r0, r1, r2, r3}
 80066d2:	b507      	push	{r0, r1, r2, lr}
 80066d4:	4906      	ldr	r1, [pc, #24]	; (80066f0 <iprintf+0x20>)
 80066d6:	ab04      	add	r3, sp, #16
 80066d8:	6808      	ldr	r0, [r1, #0]
 80066da:	f853 2b04 	ldr.w	r2, [r3], #4
 80066de:	6881      	ldr	r1, [r0, #8]
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f001 fd35 	bl	8008150 <_vfiprintf_r>
 80066e6:	b003      	add	sp, #12
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b004      	add	sp, #16
 80066ee:	4770      	bx	lr
 80066f0:	20000068 	.word	0x20000068

080066f4 <_puts_r>:
 80066f4:	6a03      	ldr	r3, [r0, #32]
 80066f6:	b570      	push	{r4, r5, r6, lr}
 80066f8:	4605      	mov	r5, r0
 80066fa:	460e      	mov	r6, r1
 80066fc:	6884      	ldr	r4, [r0, #8]
 80066fe:	b90b      	cbnz	r3, 8006704 <_puts_r+0x10>
 8006700:	f7ff ffb0 	bl	8006664 <__sinit>
 8006704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006706:	07db      	lsls	r3, r3, #31
 8006708:	d405      	bmi.n	8006716 <_puts_r+0x22>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	0598      	lsls	r0, r3, #22
 800670e:	d402      	bmi.n	8006716 <_puts_r+0x22>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 f9f6 	bl	8006b02 <__retarget_lock_acquire_recursive>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d513      	bpl.n	8006744 <_puts_r+0x50>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b18b      	cbz	r3, 8006744 <_puts_r+0x50>
 8006720:	3e01      	subs	r6, #1
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	b9e9      	cbnz	r1, 800676a <_puts_r+0x76>
 800672e:	2b00      	cmp	r3, #0
 8006730:	da2e      	bge.n	8006790 <_puts_r+0x9c>
 8006732:	4622      	mov	r2, r4
 8006734:	210a      	movs	r1, #10
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f87b 	bl	8006832 <__swbuf_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d007      	beq.n	8006750 <_puts_r+0x5c>
 8006740:	250a      	movs	r5, #10
 8006742:	e007      	b.n	8006754 <_puts_r+0x60>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f8b0 	bl	80068ac <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0e7      	beq.n	8006720 <_puts_r+0x2c>
 8006750:	f04f 35ff 	mov.w	r5, #4294967295
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d405      	bmi.n	8006766 <_puts_r+0x72>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d402      	bmi.n	8006766 <_puts_r+0x72>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 f9cf 	bl	8006b04 <__retarget_lock_release_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	2b00      	cmp	r3, #0
 800676c:	da04      	bge.n	8006778 <_puts_r+0x84>
 800676e:	69a2      	ldr	r2, [r4, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	dc06      	bgt.n	8006782 <_puts_r+0x8e>
 8006774:	290a      	cmp	r1, #10
 8006776:	d004      	beq.n	8006782 <_puts_r+0x8e>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	7019      	strb	r1, [r3, #0]
 8006780:	e7cf      	b.n	8006722 <_puts_r+0x2e>
 8006782:	4622      	mov	r2, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f854 	bl	8006832 <__swbuf_r>
 800678a:	3001      	adds	r0, #1
 800678c:	d1c9      	bne.n	8006722 <_puts_r+0x2e>
 800678e:	e7df      	b.n	8006750 <_puts_r+0x5c>
 8006790:	250a      	movs	r5, #10
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	701d      	strb	r5, [r3, #0]
 800679a:	e7db      	b.n	8006754 <_puts_r+0x60>

0800679c <puts>:
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <puts+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f7ff bfa7 	b.w	80066f4 <_puts_r>
 80067a6:	bf00      	nop
 80067a8:	20000068 	.word	0x20000068

080067ac <__sread>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	460c      	mov	r4, r1
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	f000 f956 	bl	8006a64 <_read_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bfab      	itete	ge
 80067bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067be:	89a3      	ldrhlt	r3, [r4, #12]
 80067c0:	181b      	addge	r3, r3, r0
 80067c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067c6:	bfac      	ite	ge
 80067c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ca:	81a3      	strhlt	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__swrite>:
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	461f      	mov	r7, r3
 80067d4:	898b      	ldrh	r3, [r1, #12]
 80067d6:	4605      	mov	r5, r0
 80067d8:	05db      	lsls	r3, r3, #23
 80067da:	460c      	mov	r4, r1
 80067dc:	4616      	mov	r6, r2
 80067de:	d505      	bpl.n	80067ec <__swrite+0x1e>
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	f000 f92a 	bl	8006a40 <_lseek_r>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	4632      	mov	r2, r6
 80067f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	4628      	mov	r0, r5
 80067f8:	463b      	mov	r3, r7
 80067fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	f000 b941 	b.w	8006a88 <_write_r>

08006806 <__sseek>:
 8006806:	b510      	push	{r4, lr}
 8006808:	460c      	mov	r4, r1
 800680a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680e:	f000 f917 	bl	8006a40 <_lseek_r>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	bf15      	itete	ne
 8006818:	6560      	strne	r0, [r4, #84]	; 0x54
 800681a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800681e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006822:	81a3      	strheq	r3, [r4, #12]
 8006824:	bf18      	it	ne
 8006826:	81a3      	strhne	r3, [r4, #12]
 8006828:	bd10      	pop	{r4, pc}

0800682a <__sclose>:
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 b8a1 	b.w	8006974 <_close_r>

08006832 <__swbuf_r>:
 8006832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006834:	460e      	mov	r6, r1
 8006836:	4614      	mov	r4, r2
 8006838:	4605      	mov	r5, r0
 800683a:	b118      	cbz	r0, 8006844 <__swbuf_r+0x12>
 800683c:	6a03      	ldr	r3, [r0, #32]
 800683e:	b90b      	cbnz	r3, 8006844 <__swbuf_r+0x12>
 8006840:	f7ff ff10 	bl	8006664 <__sinit>
 8006844:	69a3      	ldr	r3, [r4, #24]
 8006846:	60a3      	str	r3, [r4, #8]
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	071a      	lsls	r2, r3, #28
 800684c:	d525      	bpl.n	800689a <__swbuf_r+0x68>
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	b31b      	cbz	r3, 800689a <__swbuf_r+0x68>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	b2f6      	uxtb	r6, r6
 8006858:	1a98      	subs	r0, r3, r2
 800685a:	6963      	ldr	r3, [r4, #20]
 800685c:	4637      	mov	r7, r6
 800685e:	4283      	cmp	r3, r0
 8006860:	dc04      	bgt.n	800686c <__swbuf_r+0x3a>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f001 fe0f 	bl	8008488 <_fflush_r>
 800686a:	b9e0      	cbnz	r0, 80068a6 <__swbuf_r+0x74>
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	701e      	strb	r6, [r3, #0]
 800687a:	6962      	ldr	r2, [r4, #20]
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	429a      	cmp	r2, r3
 8006880:	d004      	beq.n	800688c <__swbuf_r+0x5a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	07db      	lsls	r3, r3, #31
 8006886:	d506      	bpl.n	8006896 <__swbuf_r+0x64>
 8006888:	2e0a      	cmp	r6, #10
 800688a:	d104      	bne.n	8006896 <__swbuf_r+0x64>
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f001 fdfa 	bl	8008488 <_fflush_r>
 8006894:	b938      	cbnz	r0, 80068a6 <__swbuf_r+0x74>
 8006896:	4638      	mov	r0, r7
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f805 	bl	80068ac <__swsetup_r>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0d5      	beq.n	8006852 <__swbuf_r+0x20>
 80068a6:	f04f 37ff 	mov.w	r7, #4294967295
 80068aa:	e7f4      	b.n	8006896 <__swbuf_r+0x64>

080068ac <__swsetup_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <__swsetup_r+0xac>)
 80068b0:	4605      	mov	r5, r0
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	460c      	mov	r4, r1
 80068b6:	b118      	cbz	r0, 80068c0 <__swsetup_r+0x14>
 80068b8:	6a03      	ldr	r3, [r0, #32]
 80068ba:	b90b      	cbnz	r3, 80068c0 <__swsetup_r+0x14>
 80068bc:	f7ff fed2 	bl	8006664 <__sinit>
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c6:	0718      	lsls	r0, r3, #28
 80068c8:	d422      	bmi.n	8006910 <__swsetup_r+0x64>
 80068ca:	06d9      	lsls	r1, r3, #27
 80068cc:	d407      	bmi.n	80068de <__swsetup_r+0x32>
 80068ce:	2309      	movs	r3, #9
 80068d0:	602b      	str	r3, [r5, #0]
 80068d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	e034      	b.n	8006948 <__swsetup_r+0x9c>
 80068de:	0758      	lsls	r0, r3, #29
 80068e0:	d512      	bpl.n	8006908 <__swsetup_r+0x5c>
 80068e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068e4:	b141      	cbz	r1, 80068f8 <__swsetup_r+0x4c>
 80068e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ea:	4299      	cmp	r1, r3
 80068ec:	d002      	beq.n	80068f4 <__swsetup_r+0x48>
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 ff92 	bl	8007818 <_free_r>
 80068f4:	2300      	movs	r3, #0
 80068f6:	6363      	str	r3, [r4, #52]	; 0x34
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	2300      	movs	r3, #0
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	f043 0308 	orr.w	r3, r3, #8
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	b94b      	cbnz	r3, 8006928 <__swsetup_r+0x7c>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800691a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691e:	d003      	beq.n	8006928 <__swsetup_r+0x7c>
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f001 fdfd 	bl	8008522 <__smakebuf_r>
 8006928:	89a0      	ldrh	r0, [r4, #12]
 800692a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800692e:	f010 0301 	ands.w	r3, r0, #1
 8006932:	d00a      	beq.n	800694a <__swsetup_r+0x9e>
 8006934:	2300      	movs	r3, #0
 8006936:	60a3      	str	r3, [r4, #8]
 8006938:	6963      	ldr	r3, [r4, #20]
 800693a:	425b      	negs	r3, r3
 800693c:	61a3      	str	r3, [r4, #24]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	b943      	cbnz	r3, 8006954 <__swsetup_r+0xa8>
 8006942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006946:	d1c4      	bne.n	80068d2 <__swsetup_r+0x26>
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	0781      	lsls	r1, r0, #30
 800694c:	bf58      	it	pl
 800694e:	6963      	ldrpl	r3, [r4, #20]
 8006950:	60a3      	str	r3, [r4, #8]
 8006952:	e7f4      	b.n	800693e <__swsetup_r+0x92>
 8006954:	2000      	movs	r0, #0
 8006956:	e7f7      	b.n	8006948 <__swsetup_r+0x9c>
 8006958:	20000068 	.word	0x20000068

0800695c <memset>:
 800695c:	4603      	mov	r3, r0
 800695e:	4402      	add	r2, r0
 8006960:	4293      	cmp	r3, r2
 8006962:	d100      	bne.n	8006966 <memset+0xa>
 8006964:	4770      	bx	lr
 8006966:	f803 1b01 	strb.w	r1, [r3], #1
 800696a:	e7f9      	b.n	8006960 <memset+0x4>

0800696c <_localeconv_r>:
 800696c:	4800      	ldr	r0, [pc, #0]	; (8006970 <_localeconv_r+0x4>)
 800696e:	4770      	bx	lr
 8006970:	2000015c 	.word	0x2000015c

08006974 <_close_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	2300      	movs	r3, #0
 8006978:	4d05      	ldr	r5, [pc, #20]	; (8006990 <_close_r+0x1c>)
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fc fd7a 	bl	8003478 <_close>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_close_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_close_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20002c54 	.word	0x20002c54

08006994 <_reclaim_reent>:
 8006994:	4b29      	ldr	r3, [pc, #164]	; (8006a3c <_reclaim_reent+0xa8>)
 8006996:	b570      	push	{r4, r5, r6, lr}
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4604      	mov	r4, r0
 800699c:	4283      	cmp	r3, r0
 800699e:	d04b      	beq.n	8006a38 <_reclaim_reent+0xa4>
 80069a0:	69c3      	ldr	r3, [r0, #28]
 80069a2:	b143      	cbz	r3, 80069b6 <_reclaim_reent+0x22>
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d144      	bne.n	8006a34 <_reclaim_reent+0xa0>
 80069aa:	69e3      	ldr	r3, [r4, #28]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	b111      	cbz	r1, 80069b6 <_reclaim_reent+0x22>
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 ff31 	bl	8007818 <_free_r>
 80069b6:	6961      	ldr	r1, [r4, #20]
 80069b8:	b111      	cbz	r1, 80069c0 <_reclaim_reent+0x2c>
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 ff2c 	bl	8007818 <_free_r>
 80069c0:	69e1      	ldr	r1, [r4, #28]
 80069c2:	b111      	cbz	r1, 80069ca <_reclaim_reent+0x36>
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 ff27 	bl	8007818 <_free_r>
 80069ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80069cc:	b111      	cbz	r1, 80069d4 <_reclaim_reent+0x40>
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 ff22 	bl	8007818 <_free_r>
 80069d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d6:	b111      	cbz	r1, 80069de <_reclaim_reent+0x4a>
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 ff1d 	bl	8007818 <_free_r>
 80069de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069e0:	b111      	cbz	r1, 80069e8 <_reclaim_reent+0x54>
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 ff18 	bl	8007818 <_free_r>
 80069e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069ea:	b111      	cbz	r1, 80069f2 <_reclaim_reent+0x5e>
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 ff13 	bl	8007818 <_free_r>
 80069f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80069f4:	b111      	cbz	r1, 80069fc <_reclaim_reent+0x68>
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 ff0e 	bl	8007818 <_free_r>
 80069fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069fe:	b111      	cbz	r1, 8006a06 <_reclaim_reent+0x72>
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 ff09 	bl	8007818 <_free_r>
 8006a06:	6a23      	ldr	r3, [r4, #32]
 8006a08:	b1b3      	cbz	r3, 8006a38 <_reclaim_reent+0xa4>
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a10:	4718      	bx	r3
 8006a12:	5949      	ldr	r1, [r1, r5]
 8006a14:	b941      	cbnz	r1, 8006a28 <_reclaim_reent+0x94>
 8006a16:	3504      	adds	r5, #4
 8006a18:	69e3      	ldr	r3, [r4, #28]
 8006a1a:	2d80      	cmp	r5, #128	; 0x80
 8006a1c:	68d9      	ldr	r1, [r3, #12]
 8006a1e:	d1f8      	bne.n	8006a12 <_reclaim_reent+0x7e>
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fef9 	bl	8007818 <_free_r>
 8006a26:	e7c0      	b.n	80069aa <_reclaim_reent+0x16>
 8006a28:	680e      	ldr	r6, [r1, #0]
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 fef4 	bl	8007818 <_free_r>
 8006a30:	4631      	mov	r1, r6
 8006a32:	e7ef      	b.n	8006a14 <_reclaim_reent+0x80>
 8006a34:	2500      	movs	r5, #0
 8006a36:	e7ef      	b.n	8006a18 <_reclaim_reent+0x84>
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000068 	.word	0x20000068

08006a40 <_lseek_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4d05      	ldr	r5, [pc, #20]	; (8006a60 <_lseek_r+0x20>)
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fc fd36 	bl	80034c0 <_lseek>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_lseek_r+0x1e>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_lseek_r+0x1e>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20002c54 	.word	0x20002c54

08006a64 <_read_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4d05      	ldr	r5, [pc, #20]	; (8006a84 <_read_r+0x20>)
 8006a70:	602a      	str	r2, [r5, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7fc fce3 	bl	800343e <_read>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_read_r+0x1e>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_read_r+0x1e>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20002c54 	.word	0x20002c54

08006a88 <_write_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	2200      	movs	r2, #0
 8006a92:	4d05      	ldr	r5, [pc, #20]	; (8006aa8 <_write_r+0x20>)
 8006a94:	602a      	str	r2, [r5, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7fc f9c8 	bl	8002e2c <_write>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_write_r+0x1e>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_write_r+0x1e>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20002c54 	.word	0x20002c54

08006aac <__errno>:
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <__errno+0x8>)
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000068 	.word	0x20000068

08006ab8 <__libc_init_array>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	2600      	movs	r6, #0
 8006abc:	4d0c      	ldr	r5, [pc, #48]	; (8006af0 <__libc_init_array+0x38>)
 8006abe:	4c0d      	ldr	r4, [pc, #52]	; (8006af4 <__libc_init_array+0x3c>)
 8006ac0:	1b64      	subs	r4, r4, r5
 8006ac2:	10a4      	asrs	r4, r4, #2
 8006ac4:	42a6      	cmp	r6, r4
 8006ac6:	d109      	bne.n	8006adc <__libc_init_array+0x24>
 8006ac8:	f002 fdf8 	bl	80096bc <_init>
 8006acc:	2600      	movs	r6, #0
 8006ace:	4d0a      	ldr	r5, [pc, #40]	; (8006af8 <__libc_init_array+0x40>)
 8006ad0:	4c0a      	ldr	r4, [pc, #40]	; (8006afc <__libc_init_array+0x44>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	42a6      	cmp	r6, r4
 8006ad8:	d105      	bne.n	8006ae6 <__libc_init_array+0x2e>
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae0:	4798      	blx	r3
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__libc_init_array+0xc>
 8006ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aea:	4798      	blx	r3
 8006aec:	3601      	adds	r6, #1
 8006aee:	e7f2      	b.n	8006ad6 <__libc_init_array+0x1e>
 8006af0:	0800a540 	.word	0x0800a540
 8006af4:	0800a540 	.word	0x0800a540
 8006af8:	0800a540 	.word	0x0800a540
 8006afc:	0800a544 	.word	0x0800a544

08006b00 <__retarget_lock_init_recursive>:
 8006b00:	4770      	bx	lr

08006b02 <__retarget_lock_acquire_recursive>:
 8006b02:	4770      	bx	lr

08006b04 <__retarget_lock_release_recursive>:
 8006b04:	4770      	bx	lr

08006b06 <memchr>:
 8006b06:	4603      	mov	r3, r0
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	b2c9      	uxtb	r1, r1
 8006b0c:	4402      	add	r2, r0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	d101      	bne.n	8006b18 <memchr+0x12>
 8006b14:	2000      	movs	r0, #0
 8006b16:	e003      	b.n	8006b20 <memchr+0x1a>
 8006b18:	7804      	ldrb	r4, [r0, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	428c      	cmp	r4, r1
 8006b1e:	d1f6      	bne.n	8006b0e <memchr+0x8>
 8006b20:	bd10      	pop	{r4, pc}

08006b22 <memcpy>:
 8006b22:	440a      	add	r2, r1
 8006b24:	4291      	cmp	r1, r2
 8006b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b2a:	d100      	bne.n	8006b2e <memcpy+0xc>
 8006b2c:	4770      	bx	lr
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b34:	4291      	cmp	r1, r2
 8006b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b3a:	d1f9      	bne.n	8006b30 <memcpy+0xe>
 8006b3c:	bd10      	pop	{r4, pc}

08006b3e <quorem>:
 8006b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b42:	6903      	ldr	r3, [r0, #16]
 8006b44:	690c      	ldr	r4, [r1, #16]
 8006b46:	4607      	mov	r7, r0
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	db7f      	blt.n	8006c4c <quorem+0x10e>
 8006b4c:	3c01      	subs	r4, #1
 8006b4e:	f100 0514 	add.w	r5, r0, #20
 8006b52:	f101 0814 	add.w	r8, r1, #20
 8006b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b64:	3301      	adds	r3, #1
 8006b66:	429a      	cmp	r2, r3
 8006b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b74:	d331      	bcc.n	8006bda <quorem+0x9c>
 8006b76:	f04f 0e00 	mov.w	lr, #0
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	46ac      	mov	ip, r5
 8006b7e:	46f2      	mov	sl, lr
 8006b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b84:	b293      	uxth	r3, r2
 8006b86:	fb06 e303 	mla	r3, r6, r3, lr
 8006b8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b8e:	0c1a      	lsrs	r2, r3, #16
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	fb06 220e 	mla	r2, r6, lr, r2
 8006b96:	ebaa 0303 	sub.w	r3, sl, r3
 8006b9a:	f8dc a000 	ldr.w	sl, [ip]
 8006b9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ba2:	fa1f fa8a 	uxth.w	sl, sl
 8006ba6:	4453      	add	r3, sl
 8006ba8:	f8dc a000 	ldr.w	sl, [ip]
 8006bac:	b292      	uxth	r2, r2
 8006bae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bbc:	4581      	cmp	r9, r0
 8006bbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8006bc6:	d2db      	bcs.n	8006b80 <quorem+0x42>
 8006bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bcc:	b92b      	cbnz	r3, 8006bda <quorem+0x9c>
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	429d      	cmp	r5, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	d32d      	bcc.n	8006c34 <quorem+0xf6>
 8006bd8:	613c      	str	r4, [r7, #16]
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f001 f992 	bl	8007f04 <__mcmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	db23      	blt.n	8006c2c <quorem+0xee>
 8006be4:	4629      	mov	r1, r5
 8006be6:	2000      	movs	r0, #0
 8006be8:	3601      	adds	r6, #1
 8006bea:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bee:	f8d1 c000 	ldr.w	ip, [r1]
 8006bf2:	b293      	uxth	r3, r2
 8006bf4:	1ac3      	subs	r3, r0, r3
 8006bf6:	0c12      	lsrs	r2, r2, #16
 8006bf8:	fa1f f08c 	uxth.w	r0, ip
 8006bfc:	4403      	add	r3, r0
 8006bfe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006c02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c0c:	45c1      	cmp	r9, r8
 8006c0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c12:	f841 3b04 	str.w	r3, [r1], #4
 8006c16:	d2e8      	bcs.n	8006bea <quorem+0xac>
 8006c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c20:	b922      	cbnz	r2, 8006c2c <quorem+0xee>
 8006c22:	3b04      	subs	r3, #4
 8006c24:	429d      	cmp	r5, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	d30a      	bcc.n	8006c40 <quorem+0x102>
 8006c2a:	613c      	str	r4, [r7, #16]
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	b003      	add	sp, #12
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	3b04      	subs	r3, #4
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d1cd      	bne.n	8006bd8 <quorem+0x9a>
 8006c3c:	3c01      	subs	r4, #1
 8006c3e:	e7c8      	b.n	8006bd2 <quorem+0x94>
 8006c40:	6812      	ldr	r2, [r2, #0]
 8006c42:	3b04      	subs	r3, #4
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d1f0      	bne.n	8006c2a <quorem+0xec>
 8006c48:	3c01      	subs	r4, #1
 8006c4a:	e7eb      	b.n	8006c24 <quorem+0xe6>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7ee      	b.n	8006c2e <quorem+0xf0>

08006c50 <_dtoa_r>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	4616      	mov	r6, r2
 8006c56:	461f      	mov	r7, r3
 8006c58:	69c4      	ldr	r4, [r0, #28]
 8006c5a:	b099      	sub	sp, #100	; 0x64
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c66:	b974      	cbnz	r4, 8006c86 <_dtoa_r+0x36>
 8006c68:	2010      	movs	r0, #16
 8006c6a:	f000 fe1d 	bl	80078a8 <malloc>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	61e8      	str	r0, [r5, #28]
 8006c72:	b920      	cbnz	r0, 8006c7e <_dtoa_r+0x2e>
 8006c74:	21ef      	movs	r1, #239	; 0xef
 8006c76:	4bac      	ldr	r3, [pc, #688]	; (8006f28 <_dtoa_r+0x2d8>)
 8006c78:	48ac      	ldr	r0, [pc, #688]	; (8006f2c <_dtoa_r+0x2dc>)
 8006c7a:	f001 fcc1 	bl	8008600 <__assert_func>
 8006c7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c82:	6004      	str	r4, [r0, #0]
 8006c84:	60c4      	str	r4, [r0, #12]
 8006c86:	69eb      	ldr	r3, [r5, #28]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	b151      	cbz	r1, 8006ca2 <_dtoa_r+0x52>
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4093      	lsls	r3, r2
 8006c92:	604a      	str	r2, [r1, #4]
 8006c94:	608b      	str	r3, [r1, #8]
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 fefa 	bl	8007a90 <_Bfree>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	69eb      	ldr	r3, [r5, #28]
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	1e3b      	subs	r3, r7, #0
 8006ca4:	bfaf      	iteee	ge
 8006ca6:	2300      	movge	r3, #0
 8006ca8:	2201      	movlt	r2, #1
 8006caa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006cae:	9305      	strlt	r3, [sp, #20]
 8006cb0:	bfa8      	it	ge
 8006cb2:	f8c8 3000 	strge.w	r3, [r8]
 8006cb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006cba:	4b9d      	ldr	r3, [pc, #628]	; (8006f30 <_dtoa_r+0x2e0>)
 8006cbc:	bfb8      	it	lt
 8006cbe:	f8c8 2000 	strlt.w	r2, [r8]
 8006cc2:	ea33 0309 	bics.w	r3, r3, r9
 8006cc6:	d119      	bne.n	8006cfc <_dtoa_r+0xac>
 8006cc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ccc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cd4:	4333      	orrs	r3, r6
 8006cd6:	f000 8589 	beq.w	80077ec <_dtoa_r+0xb9c>
 8006cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cdc:	b953      	cbnz	r3, 8006cf4 <_dtoa_r+0xa4>
 8006cde:	4b95      	ldr	r3, [pc, #596]	; (8006f34 <_dtoa_r+0x2e4>)
 8006ce0:	e023      	b.n	8006d2a <_dtoa_r+0xda>
 8006ce2:	4b95      	ldr	r3, [pc, #596]	; (8006f38 <_dtoa_r+0x2e8>)
 8006ce4:	9303      	str	r3, [sp, #12]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	9803      	ldr	r0, [sp, #12]
 8006cee:	b019      	add	sp, #100	; 0x64
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	4b8f      	ldr	r3, [pc, #572]	; (8006f34 <_dtoa_r+0x2e4>)
 8006cf6:	9303      	str	r3, [sp, #12]
 8006cf8:	3303      	adds	r3, #3
 8006cfa:	e7f5      	b.n	8006ce8 <_dtoa_r+0x98>
 8006cfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f7f9 fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006d10:	4680      	mov	r8, r0
 8006d12:	b160      	cbz	r0, 8006d2e <_dtoa_r+0xde>
 8006d14:	2301      	movs	r3, #1
 8006d16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8562 	beq.w	80077e6 <_dtoa_r+0xb96>
 8006d22:	4b86      	ldr	r3, [pc, #536]	; (8006f3c <_dtoa_r+0x2ec>)
 8006d24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	e7de      	b.n	8006cec <_dtoa_r+0x9c>
 8006d2e:	ab16      	add	r3, sp, #88	; 0x58
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	ab17      	add	r3, sp, #92	; 0x5c
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	4628      	mov	r0, r5
 8006d38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d3c:	f001 f98a 	bl	8008054 <__d2b>
 8006d40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006d44:	4682      	mov	sl, r0
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	d07e      	beq.n	8006e48 <_dtoa_r+0x1f8>
 8006d4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d58:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d64:	4619      	mov	r1, r3
 8006d66:	2200      	movs	r2, #0
 8006d68:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <_dtoa_r+0x2f0>)
 8006d6a:	f7f9 f9fd 	bl	8000168 <__aeabi_dsub>
 8006d6e:	a368      	add	r3, pc, #416	; (adr r3, 8006f10 <_dtoa_r+0x2c0>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	a367      	add	r3, pc, #412	; (adr r3, 8006f18 <_dtoa_r+0x2c8>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 f9f5 	bl	800016c <__adddf3>
 8006d82:	4606      	mov	r6, r0
 8006d84:	4620      	mov	r0, r4
 8006d86:	460f      	mov	r7, r1
 8006d88:	f7f9 fb3c 	bl	8000404 <__aeabi_i2d>
 8006d8c:	a364      	add	r3, pc, #400	; (adr r3, 8006f20 <_dtoa_r+0x2d0>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fba1 	bl	80004d8 <__aeabi_dmul>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 f9e5 	bl	800016c <__adddf3>
 8006da2:	4606      	mov	r6, r0
 8006da4:	460f      	mov	r7, r1
 8006da6:	f7f9 fe47 	bl	8000a38 <__aeabi_d2iz>
 8006daa:	2200      	movs	r2, #0
 8006dac:	4683      	mov	fp, r0
 8006dae:	2300      	movs	r3, #0
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7f9 fe02 	bl	80009bc <__aeabi_dcmplt>
 8006db8:	b148      	cbz	r0, 8006dce <_dtoa_r+0x17e>
 8006dba:	4658      	mov	r0, fp
 8006dbc:	f7f9 fb22 	bl	8000404 <__aeabi_i2d>
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	f7f9 fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8006dc8:	b908      	cbnz	r0, 8006dce <_dtoa_r+0x17e>
 8006dca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dce:	f1bb 0f16 	cmp.w	fp, #22
 8006dd2:	d857      	bhi.n	8006e84 <_dtoa_r+0x234>
 8006dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd8:	4b5a      	ldr	r3, [pc, #360]	; (8006f44 <_dtoa_r+0x2f4>)
 8006dda:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d04e      	beq.n	8006e88 <_dtoa_r+0x238>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006df2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006df4:	1b1b      	subs	r3, r3, r4
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	bf46      	itte	mi
 8006dfa:	f1c3 0901 	rsbmi	r9, r3, #1
 8006dfe:	2300      	movmi	r3, #0
 8006e00:	f04f 0900 	movpl.w	r9, #0
 8006e04:	9209      	str	r2, [sp, #36]	; 0x24
 8006e06:	bf48      	it	mi
 8006e08:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006e0a:	f1bb 0f00 	cmp.w	fp, #0
 8006e0e:	db3d      	blt.n	8006e8c <_dtoa_r+0x23c>
 8006e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e12:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006e16:	445b      	add	r3, fp
 8006e18:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	d867      	bhi.n	8006ef4 <_dtoa_r+0x2a4>
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	bfc4      	itt	gt
 8006e28:	3b04      	subgt	r3, #4
 8006e2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e2e:	bfc8      	it	gt
 8006e30:	2400      	movgt	r4, #0
 8006e32:	f1a3 0302 	sub.w	r3, r3, #2
 8006e36:	bfd8      	it	le
 8006e38:	2401      	movle	r4, #1
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	f200 8086 	bhi.w	8006f4c <_dtoa_r+0x2fc>
 8006e40:	e8df f003 	tbb	[pc, r3]
 8006e44:	5637392c 	.word	0x5637392c
 8006e48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e4c:	441c      	add	r4, r3
 8006e4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	bfc1      	itttt	gt
 8006e56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e5a:	fa09 f903 	lslgt.w	r9, r9, r3
 8006e5e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006e62:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006e66:	bfd6      	itet	le
 8006e68:	f1c3 0320 	rsble	r3, r3, #32
 8006e6c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006e70:	fa06 f003 	lslle.w	r0, r6, r3
 8006e74:	f7f9 fab6 	bl	80003e4 <__aeabi_ui2d>
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006e7e:	3c01      	subs	r4, #1
 8006e80:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e82:	e76f      	b.n	8006d64 <_dtoa_r+0x114>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7b3      	b.n	8006df0 <_dtoa_r+0x1a0>
 8006e88:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e8a:	e7b2      	b.n	8006df2 <_dtoa_r+0x1a2>
 8006e8c:	f1cb 0300 	rsb	r3, fp, #0
 8006e90:	930a      	str	r3, [sp, #40]	; 0x28
 8006e92:	2300      	movs	r3, #0
 8006e94:	eba9 090b 	sub.w	r9, r9, fp
 8006e98:	930e      	str	r3, [sp, #56]	; 0x38
 8006e9a:	e7c0      	b.n	8006e1e <_dtoa_r+0x1ce>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ea0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dc55      	bgt.n	8006f52 <_dtoa_r+0x302>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	9306      	str	r3, [sp, #24]
 8006eac:	9308      	str	r3, [sp, #32]
 8006eae:	9223      	str	r2, [sp, #140]	; 0x8c
 8006eb0:	e00b      	b.n	8006eca <_dtoa_r+0x27a>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f3      	b.n	8006e9e <_dtoa_r+0x24e>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ebc:	445b      	add	r3, fp
 8006ebe:	9306      	str	r3, [sp, #24]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	9308      	str	r3, [sp, #32]
 8006ec6:	bfb8      	it	lt
 8006ec8:	2301      	movlt	r3, #1
 8006eca:	2100      	movs	r1, #0
 8006ecc:	2204      	movs	r2, #4
 8006ece:	69e8      	ldr	r0, [r5, #28]
 8006ed0:	f102 0614 	add.w	r6, r2, #20
 8006ed4:	429e      	cmp	r6, r3
 8006ed6:	d940      	bls.n	8006f5a <_dtoa_r+0x30a>
 8006ed8:	6041      	str	r1, [r0, #4]
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 fd98 	bl	8007a10 <_Balloc>
 8006ee0:	9003      	str	r0, [sp, #12]
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d13c      	bne.n	8006f60 <_dtoa_r+0x310>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	f240 11af 	movw	r1, #431	; 0x1af
 8006eec:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <_dtoa_r+0x2f8>)
 8006eee:	e6c3      	b.n	8006c78 <_dtoa_r+0x28>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e7e1      	b.n	8006eb8 <_dtoa_r+0x268>
 8006ef4:	2401      	movs	r4, #1
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006efa:	9322      	str	r3, [sp, #136]	; 0x88
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295
 8006f00:	2200      	movs	r2, #0
 8006f02:	9306      	str	r3, [sp, #24]
 8006f04:	9308      	str	r3, [sp, #32]
 8006f06:	2312      	movs	r3, #18
 8006f08:	e7d1      	b.n	8006eae <_dtoa_r+0x25e>
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	636f4361 	.word	0x636f4361
 8006f14:	3fd287a7 	.word	0x3fd287a7
 8006f18:	8b60c8b3 	.word	0x8b60c8b3
 8006f1c:	3fc68a28 	.word	0x3fc68a28
 8006f20:	509f79fb 	.word	0x509f79fb
 8006f24:	3fd34413 	.word	0x3fd34413
 8006f28:	0800a1db 	.word	0x0800a1db
 8006f2c:	0800a1f2 	.word	0x0800a1f2
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	0800a1d7 	.word	0x0800a1d7
 8006f38:	0800a1ce 	.word	0x0800a1ce
 8006f3c:	0800a1ab 	.word	0x0800a1ab
 8006f40:	3ff80000 	.word	0x3ff80000
 8006f44:	0800a2e0 	.word	0x0800a2e0
 8006f48:	0800a24a 	.word	0x0800a24a
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f50:	e7d4      	b.n	8006efc <_dtoa_r+0x2ac>
 8006f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f54:	9306      	str	r3, [sp, #24]
 8006f56:	9308      	str	r3, [sp, #32]
 8006f58:	e7b7      	b.n	8006eca <_dtoa_r+0x27a>
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	0052      	lsls	r2, r2, #1
 8006f5e:	e7b7      	b.n	8006ed0 <_dtoa_r+0x280>
 8006f60:	69eb      	ldr	r3, [r5, #28]
 8006f62:	9a03      	ldr	r2, [sp, #12]
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	9b08      	ldr	r3, [sp, #32]
 8006f68:	2b0e      	cmp	r3, #14
 8006f6a:	f200 80a8 	bhi.w	80070be <_dtoa_r+0x46e>
 8006f6e:	2c00      	cmp	r4, #0
 8006f70:	f000 80a5 	beq.w	80070be <_dtoa_r+0x46e>
 8006f74:	f1bb 0f00 	cmp.w	fp, #0
 8006f78:	dd34      	ble.n	8006fe4 <_dtoa_r+0x394>
 8006f7a:	4b9a      	ldr	r3, [pc, #616]	; (80071e4 <_dtoa_r+0x594>)
 8006f7c:	f00b 020f 	and.w	r2, fp, #15
 8006f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006f88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f90:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006f94:	d016      	beq.n	8006fc4 <_dtoa_r+0x374>
 8006f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f9a:	4b93      	ldr	r3, [pc, #588]	; (80071e8 <_dtoa_r+0x598>)
 8006f9c:	2703      	movs	r7, #3
 8006f9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa2:	f7f9 fbc3 	bl	800072c <__aeabi_ddiv>
 8006fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006faa:	f004 040f 	and.w	r4, r4, #15
 8006fae:	4e8e      	ldr	r6, [pc, #568]	; (80071e8 <_dtoa_r+0x598>)
 8006fb0:	b954      	cbnz	r4, 8006fc8 <_dtoa_r+0x378>
 8006fb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fba:	f7f9 fbb7 	bl	800072c <__aeabi_ddiv>
 8006fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fc2:	e029      	b.n	8007018 <_dtoa_r+0x3c8>
 8006fc4:	2702      	movs	r7, #2
 8006fc6:	e7f2      	b.n	8006fae <_dtoa_r+0x35e>
 8006fc8:	07e1      	lsls	r1, r4, #31
 8006fca:	d508      	bpl.n	8006fde <_dtoa_r+0x38e>
 8006fcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fd4:	f7f9 fa80 	bl	80004d8 <__aeabi_dmul>
 8006fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fdc:	3701      	adds	r7, #1
 8006fde:	1064      	asrs	r4, r4, #1
 8006fe0:	3608      	adds	r6, #8
 8006fe2:	e7e5      	b.n	8006fb0 <_dtoa_r+0x360>
 8006fe4:	f000 80a5 	beq.w	8007132 <_dtoa_r+0x4e2>
 8006fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fec:	f1cb 0400 	rsb	r4, fp, #0
 8006ff0:	4b7c      	ldr	r3, [pc, #496]	; (80071e4 <_dtoa_r+0x594>)
 8006ff2:	f004 020f 	and.w	r2, r4, #15
 8006ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fa6b 	bl	80004d8 <__aeabi_dmul>
 8007002:	2702      	movs	r7, #2
 8007004:	2300      	movs	r3, #0
 8007006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800700a:	4e77      	ldr	r6, [pc, #476]	; (80071e8 <_dtoa_r+0x598>)
 800700c:	1124      	asrs	r4, r4, #4
 800700e:	2c00      	cmp	r4, #0
 8007010:	f040 8084 	bne.w	800711c <_dtoa_r+0x4cc>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1d2      	bne.n	8006fbe <_dtoa_r+0x36e>
 8007018:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800701c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8087 	beq.w	8007136 <_dtoa_r+0x4e6>
 8007028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800702c:	2200      	movs	r2, #0
 800702e:	4b6f      	ldr	r3, [pc, #444]	; (80071ec <_dtoa_r+0x59c>)
 8007030:	f7f9 fcc4 	bl	80009bc <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	d07e      	beq.n	8007136 <_dtoa_r+0x4e6>
 8007038:	9b08      	ldr	r3, [sp, #32]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d07b      	beq.n	8007136 <_dtoa_r+0x4e6>
 800703e:	9b06      	ldr	r3, [sp, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	dd38      	ble.n	80070b6 <_dtoa_r+0x466>
 8007044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007048:	2200      	movs	r2, #0
 800704a:	4b69      	ldr	r3, [pc, #420]	; (80071f0 <_dtoa_r+0x5a0>)
 800704c:	f7f9 fa44 	bl	80004d8 <__aeabi_dmul>
 8007050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007054:	9c06      	ldr	r4, [sp, #24]
 8007056:	f10b 38ff 	add.w	r8, fp, #4294967295
 800705a:	3701      	adds	r7, #1
 800705c:	4638      	mov	r0, r7
 800705e:	f7f9 f9d1 	bl	8000404 <__aeabi_i2d>
 8007062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	2200      	movs	r2, #0
 800706c:	4b61      	ldr	r3, [pc, #388]	; (80071f4 <_dtoa_r+0x5a4>)
 800706e:	f7f9 f87d 	bl	800016c <__adddf3>
 8007072:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800707a:	9611      	str	r6, [sp, #68]	; 0x44
 800707c:	2c00      	cmp	r4, #0
 800707e:	d15d      	bne.n	800713c <_dtoa_r+0x4ec>
 8007080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007084:	2200      	movs	r2, #0
 8007086:	4b5c      	ldr	r3, [pc, #368]	; (80071f8 <_dtoa_r+0x5a8>)
 8007088:	f7f9 f86e 	bl	8000168 <__aeabi_dsub>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007094:	4633      	mov	r3, r6
 8007096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007098:	f7f9 fcae 	bl	80009f8 <__aeabi_dcmpgt>
 800709c:	2800      	cmp	r0, #0
 800709e:	f040 8295 	bne.w	80075cc <_dtoa_r+0x97c>
 80070a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80070ac:	f7f9 fc86 	bl	80009bc <__aeabi_dcmplt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f040 8289 	bne.w	80075c8 <_dtoa_r+0x978>
 80070b6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80070ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f2c0 8151 	blt.w	8007368 <_dtoa_r+0x718>
 80070c6:	f1bb 0f0e 	cmp.w	fp, #14
 80070ca:	f300 814d 	bgt.w	8007368 <_dtoa_r+0x718>
 80070ce:	4b45      	ldr	r3, [pc, #276]	; (80071e4 <_dtoa_r+0x594>)
 80070d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070d8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f280 80da 	bge.w	8007298 <_dtoa_r+0x648>
 80070e4:	9b08      	ldr	r3, [sp, #32]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f300 80d6 	bgt.w	8007298 <_dtoa_r+0x648>
 80070ec:	f040 826b 	bne.w	80075c6 <_dtoa_r+0x976>
 80070f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070f4:	2200      	movs	r2, #0
 80070f6:	4b40      	ldr	r3, [pc, #256]	; (80071f8 <_dtoa_r+0x5a8>)
 80070f8:	f7f9 f9ee 	bl	80004d8 <__aeabi_dmul>
 80070fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007100:	f7f9 fc70 	bl	80009e4 <__aeabi_dcmpge>
 8007104:	9c08      	ldr	r4, [sp, #32]
 8007106:	4626      	mov	r6, r4
 8007108:	2800      	cmp	r0, #0
 800710a:	f040 8241 	bne.w	8007590 <_dtoa_r+0x940>
 800710e:	2331      	movs	r3, #49	; 0x31
 8007110:	9f03      	ldr	r7, [sp, #12]
 8007112:	f10b 0b01 	add.w	fp, fp, #1
 8007116:	f807 3b01 	strb.w	r3, [r7], #1
 800711a:	e23d      	b.n	8007598 <_dtoa_r+0x948>
 800711c:	07e2      	lsls	r2, r4, #31
 800711e:	d505      	bpl.n	800712c <_dtoa_r+0x4dc>
 8007120:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007124:	f7f9 f9d8 	bl	80004d8 <__aeabi_dmul>
 8007128:	2301      	movs	r3, #1
 800712a:	3701      	adds	r7, #1
 800712c:	1064      	asrs	r4, r4, #1
 800712e:	3608      	adds	r6, #8
 8007130:	e76d      	b.n	800700e <_dtoa_r+0x3be>
 8007132:	2702      	movs	r7, #2
 8007134:	e770      	b.n	8007018 <_dtoa_r+0x3c8>
 8007136:	46d8      	mov	r8, fp
 8007138:	9c08      	ldr	r4, [sp, #32]
 800713a:	e78f      	b.n	800705c <_dtoa_r+0x40c>
 800713c:	9903      	ldr	r1, [sp, #12]
 800713e:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <_dtoa_r+0x594>)
 8007140:	4421      	add	r1, r4
 8007142:	9112      	str	r1, [sp, #72]	; 0x48
 8007144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007146:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800714a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800714e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007152:	2900      	cmp	r1, #0
 8007154:	d054      	beq.n	8007200 <_dtoa_r+0x5b0>
 8007156:	2000      	movs	r0, #0
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <_dtoa_r+0x5ac>)
 800715a:	f7f9 fae7 	bl	800072c <__aeabi_ddiv>
 800715e:	463b      	mov	r3, r7
 8007160:	4632      	mov	r2, r6
 8007162:	f7f9 f801 	bl	8000168 <__aeabi_dsub>
 8007166:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800716a:	9f03      	ldr	r7, [sp, #12]
 800716c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007170:	f7f9 fc62 	bl	8000a38 <__aeabi_d2iz>
 8007174:	4604      	mov	r4, r0
 8007176:	f7f9 f945 	bl	8000404 <__aeabi_i2d>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007182:	f7f8 fff1 	bl	8000168 <__aeabi_dsub>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	3430      	adds	r4, #48	; 0x30
 800718c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007194:	f807 4b01 	strb.w	r4, [r7], #1
 8007198:	f7f9 fc10 	bl	80009bc <__aeabi_dcmplt>
 800719c:	2800      	cmp	r0, #0
 800719e:	d173      	bne.n	8007288 <_dtoa_r+0x638>
 80071a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a4:	2000      	movs	r0, #0
 80071a6:	4911      	ldr	r1, [pc, #68]	; (80071ec <_dtoa_r+0x59c>)
 80071a8:	f7f8 ffde 	bl	8000168 <__aeabi_dsub>
 80071ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071b0:	f7f9 fc04 	bl	80009bc <__aeabi_dcmplt>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f040 80b6 	bne.w	8007326 <_dtoa_r+0x6d6>
 80071ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071bc:	429f      	cmp	r7, r3
 80071be:	f43f af7a 	beq.w	80070b6 <_dtoa_r+0x466>
 80071c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c6:	2200      	movs	r2, #0
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <_dtoa_r+0x5a0>)
 80071ca:	f7f9 f985 	bl	80004d8 <__aeabi_dmul>
 80071ce:	2200      	movs	r2, #0
 80071d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <_dtoa_r+0x5a0>)
 80071da:	f7f9 f97d 	bl	80004d8 <__aeabi_dmul>
 80071de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e2:	e7c3      	b.n	800716c <_dtoa_r+0x51c>
 80071e4:	0800a2e0 	.word	0x0800a2e0
 80071e8:	0800a2b8 	.word	0x0800a2b8
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	40240000 	.word	0x40240000
 80071f4:	401c0000 	.word	0x401c0000
 80071f8:	40140000 	.word	0x40140000
 80071fc:	3fe00000 	.word	0x3fe00000
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 f968 	bl	80004d8 <__aeabi_dmul>
 8007208:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800720a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800720e:	9c03      	ldr	r4, [sp, #12]
 8007210:	9314      	str	r3, [sp, #80]	; 0x50
 8007212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007216:	f7f9 fc0f 	bl	8000a38 <__aeabi_d2iz>
 800721a:	9015      	str	r0, [sp, #84]	; 0x54
 800721c:	f7f9 f8f2 	bl	8000404 <__aeabi_i2d>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007228:	f7f8 ff9e 	bl	8000168 <__aeabi_dsub>
 800722c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800722e:	4606      	mov	r6, r0
 8007230:	3330      	adds	r3, #48	; 0x30
 8007232:	f804 3b01 	strb.w	r3, [r4], #1
 8007236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007238:	460f      	mov	r7, r1
 800723a:	429c      	cmp	r4, r3
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	d124      	bne.n	800728c <_dtoa_r+0x63c>
 8007242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007246:	4baf      	ldr	r3, [pc, #700]	; (8007504 <_dtoa_r+0x8b4>)
 8007248:	f7f8 ff90 	bl	800016c <__adddf3>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f9 fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8007258:	2800      	cmp	r0, #0
 800725a:	d163      	bne.n	8007324 <_dtoa_r+0x6d4>
 800725c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007260:	2000      	movs	r0, #0
 8007262:	49a8      	ldr	r1, [pc, #672]	; (8007504 <_dtoa_r+0x8b4>)
 8007264:	f7f8 ff80 	bl	8000168 <__aeabi_dsub>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fba4 	bl	80009bc <__aeabi_dcmplt>
 8007274:	2800      	cmp	r0, #0
 8007276:	f43f af1e 	beq.w	80070b6 <_dtoa_r+0x466>
 800727a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800727c:	1e7b      	subs	r3, r7, #1
 800727e:	9314      	str	r3, [sp, #80]	; 0x50
 8007280:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d0f8      	beq.n	800727a <_dtoa_r+0x62a>
 8007288:	46c3      	mov	fp, r8
 800728a:	e03b      	b.n	8007304 <_dtoa_r+0x6b4>
 800728c:	4b9e      	ldr	r3, [pc, #632]	; (8007508 <_dtoa_r+0x8b8>)
 800728e:	f7f9 f923 	bl	80004d8 <__aeabi_dmul>
 8007292:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007296:	e7bc      	b.n	8007212 <_dtoa_r+0x5c2>
 8007298:	9f03      	ldr	r7, [sp, #12]
 800729a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800729e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 fa41 	bl	800072c <__aeabi_ddiv>
 80072aa:	f7f9 fbc5 	bl	8000a38 <__aeabi_d2iz>
 80072ae:	4604      	mov	r4, r0
 80072b0:	f7f9 f8a8 	bl	8000404 <__aeabi_i2d>
 80072b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b8:	f7f9 f90e 	bl	80004d8 <__aeabi_dmul>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4640      	mov	r0, r8
 80072c2:	4649      	mov	r1, r9
 80072c4:	f7f8 ff50 	bl	8000168 <__aeabi_dsub>
 80072c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80072cc:	f807 6b01 	strb.w	r6, [r7], #1
 80072d0:	9e03      	ldr	r6, [sp, #12]
 80072d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80072d6:	1bbe      	subs	r6, r7, r6
 80072d8:	45b4      	cmp	ip, r6
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	d136      	bne.n	800734e <_dtoa_r+0x6fe>
 80072e0:	f7f8 ff44 	bl	800016c <__adddf3>
 80072e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072e8:	4680      	mov	r8, r0
 80072ea:	4689      	mov	r9, r1
 80072ec:	f7f9 fb84 	bl	80009f8 <__aeabi_dcmpgt>
 80072f0:	bb58      	cbnz	r0, 800734a <_dtoa_r+0x6fa>
 80072f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f9 fb55 	bl	80009a8 <__aeabi_dcmpeq>
 80072fe:	b108      	cbz	r0, 8007304 <_dtoa_r+0x6b4>
 8007300:	07e3      	lsls	r3, r4, #31
 8007302:	d422      	bmi.n	800734a <_dtoa_r+0x6fa>
 8007304:	4651      	mov	r1, sl
 8007306:	4628      	mov	r0, r5
 8007308:	f000 fbc2 	bl	8007a90 <_Bfree>
 800730c:	2300      	movs	r3, #0
 800730e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007310:	703b      	strb	r3, [r7, #0]
 8007312:	f10b 0301 	add.w	r3, fp, #1
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800731a:	2b00      	cmp	r3, #0
 800731c:	f43f ace6 	beq.w	8006cec <_dtoa_r+0x9c>
 8007320:	601f      	str	r7, [r3, #0]
 8007322:	e4e3      	b.n	8006cec <_dtoa_r+0x9c>
 8007324:	4627      	mov	r7, r4
 8007326:	463b      	mov	r3, r7
 8007328:	461f      	mov	r7, r3
 800732a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800732e:	2a39      	cmp	r2, #57	; 0x39
 8007330:	d107      	bne.n	8007342 <_dtoa_r+0x6f2>
 8007332:	9a03      	ldr	r2, [sp, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d1f7      	bne.n	8007328 <_dtoa_r+0x6d8>
 8007338:	2230      	movs	r2, #48	; 0x30
 800733a:	9903      	ldr	r1, [sp, #12]
 800733c:	f108 0801 	add.w	r8, r8, #1
 8007340:	700a      	strb	r2, [r1, #0]
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	3201      	adds	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	e79e      	b.n	8007288 <_dtoa_r+0x638>
 800734a:	46d8      	mov	r8, fp
 800734c:	e7eb      	b.n	8007326 <_dtoa_r+0x6d6>
 800734e:	2200      	movs	r2, #0
 8007350:	4b6d      	ldr	r3, [pc, #436]	; (8007508 <_dtoa_r+0x8b8>)
 8007352:	f7f9 f8c1 	bl	80004d8 <__aeabi_dmul>
 8007356:	2200      	movs	r2, #0
 8007358:	2300      	movs	r3, #0
 800735a:	4680      	mov	r8, r0
 800735c:	4689      	mov	r9, r1
 800735e:	f7f9 fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8007362:	2800      	cmp	r0, #0
 8007364:	d09b      	beq.n	800729e <_dtoa_r+0x64e>
 8007366:	e7cd      	b.n	8007304 <_dtoa_r+0x6b4>
 8007368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800736a:	2a00      	cmp	r2, #0
 800736c:	f000 80c4 	beq.w	80074f8 <_dtoa_r+0x8a8>
 8007370:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007372:	2a01      	cmp	r2, #1
 8007374:	f300 80a8 	bgt.w	80074c8 <_dtoa_r+0x878>
 8007378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800737a:	2a00      	cmp	r2, #0
 800737c:	f000 80a0 	beq.w	80074c0 <_dtoa_r+0x870>
 8007380:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007384:	464f      	mov	r7, r9
 8007386:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800738a:	2101      	movs	r1, #1
 800738c:	441a      	add	r2, r3
 800738e:	4628      	mov	r0, r5
 8007390:	4499      	add	r9, r3
 8007392:	9209      	str	r2, [sp, #36]	; 0x24
 8007394:	f000 fc32 	bl	8007bfc <__i2b>
 8007398:	4606      	mov	r6, r0
 800739a:	b15f      	cbz	r7, 80073b4 <_dtoa_r+0x764>
 800739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dd08      	ble.n	80073b4 <_dtoa_r+0x764>
 80073a2:	42bb      	cmp	r3, r7
 80073a4:	bfa8      	it	ge
 80073a6:	463b      	movge	r3, r7
 80073a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073aa:	eba9 0903 	sub.w	r9, r9, r3
 80073ae:	1aff      	subs	r7, r7, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	9309      	str	r3, [sp, #36]	; 0x24
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	b1f3      	cbz	r3, 80073f6 <_dtoa_r+0x7a6>
 80073b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80a0 	beq.w	8007500 <_dtoa_r+0x8b0>
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	dd10      	ble.n	80073e6 <_dtoa_r+0x796>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4622      	mov	r2, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f000 fcd5 	bl	8007d78 <__pow5mult>
 80073ce:	4652      	mov	r2, sl
 80073d0:	4601      	mov	r1, r0
 80073d2:	4606      	mov	r6, r0
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 fc27 	bl	8007c28 <__multiply>
 80073da:	4680      	mov	r8, r0
 80073dc:	4651      	mov	r1, sl
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 fb56 	bl	8007a90 <_Bfree>
 80073e4:	46c2      	mov	sl, r8
 80073e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e8:	1b1a      	subs	r2, r3, r4
 80073ea:	d004      	beq.n	80073f6 <_dtoa_r+0x7a6>
 80073ec:	4651      	mov	r1, sl
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 fcc2 	bl	8007d78 <__pow5mult>
 80073f4:	4682      	mov	sl, r0
 80073f6:	2101      	movs	r1, #1
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 fbff 	bl	8007bfc <__i2b>
 80073fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007400:	4604      	mov	r4, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f340 8082 	ble.w	800750c <_dtoa_r+0x8bc>
 8007408:	461a      	mov	r2, r3
 800740a:	4601      	mov	r1, r0
 800740c:	4628      	mov	r0, r5
 800740e:	f000 fcb3 	bl	8007d78 <__pow5mult>
 8007412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007414:	4604      	mov	r4, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	dd7b      	ble.n	8007512 <_dtoa_r+0x8c2>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007424:	6918      	ldr	r0, [r3, #16]
 8007426:	f000 fb9b 	bl	8007b60 <__hi0bits>
 800742a:	f1c0 0020 	rsb	r0, r0, #32
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	4418      	add	r0, r3
 8007432:	f010 001f 	ands.w	r0, r0, #31
 8007436:	f000 8092 	beq.w	800755e <_dtoa_r+0x90e>
 800743a:	f1c0 0320 	rsb	r3, r0, #32
 800743e:	2b04      	cmp	r3, #4
 8007440:	f340 8085 	ble.w	800754e <_dtoa_r+0x8fe>
 8007444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007446:	f1c0 001c 	rsb	r0, r0, #28
 800744a:	4403      	add	r3, r0
 800744c:	4481      	add	r9, r0
 800744e:	4407      	add	r7, r0
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	dd05      	ble.n	8007464 <_dtoa_r+0x814>
 8007458:	4651      	mov	r1, sl
 800745a:	464a      	mov	r2, r9
 800745c:	4628      	mov	r0, r5
 800745e:	f000 fce5 	bl	8007e2c <__lshift>
 8007462:	4682      	mov	sl, r0
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd05      	ble.n	8007476 <_dtoa_r+0x826>
 800746a:	4621      	mov	r1, r4
 800746c:	461a      	mov	r2, r3
 800746e:	4628      	mov	r0, r5
 8007470:	f000 fcdc 	bl	8007e2c <__lshift>
 8007474:	4604      	mov	r4, r0
 8007476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d072      	beq.n	8007562 <_dtoa_r+0x912>
 800747c:	4621      	mov	r1, r4
 800747e:	4650      	mov	r0, sl
 8007480:	f000 fd40 	bl	8007f04 <__mcmp>
 8007484:	2800      	cmp	r0, #0
 8007486:	da6c      	bge.n	8007562 <_dtoa_r+0x912>
 8007488:	2300      	movs	r3, #0
 800748a:	4651      	mov	r1, sl
 800748c:	220a      	movs	r2, #10
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fb20 	bl	8007ad4 <__multadd>
 8007494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007496:	4682      	mov	sl, r0
 8007498:	f10b 3bff 	add.w	fp, fp, #4294967295
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 81ac 	beq.w	80077fa <_dtoa_r+0xbaa>
 80074a2:	2300      	movs	r3, #0
 80074a4:	4631      	mov	r1, r6
 80074a6:	220a      	movs	r2, #10
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fb13 	bl	8007ad4 <__multadd>
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	4606      	mov	r6, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f300 8093 	bgt.w	80075de <_dtoa_r+0x98e>
 80074b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	dc59      	bgt.n	8007572 <_dtoa_r+0x922>
 80074be:	e08e      	b.n	80075de <_dtoa_r+0x98e>
 80074c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074c6:	e75d      	b.n	8007384 <_dtoa_r+0x734>
 80074c8:	9b08      	ldr	r3, [sp, #32]
 80074ca:	1e5c      	subs	r4, r3, #1
 80074cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	bfbf      	itttt	lt
 80074d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80074d6:	1ae3      	sublt	r3, r4, r3
 80074d8:	18d2      	addlt	r2, r2, r3
 80074da:	bfa8      	it	ge
 80074dc:	1b1c      	subge	r4, r3, r4
 80074de:	9b08      	ldr	r3, [sp, #32]
 80074e0:	bfbe      	ittt	lt
 80074e2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074e4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80074e6:	2400      	movlt	r4, #0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bfb5      	itete	lt
 80074ec:	eba9 0703 	sublt.w	r7, r9, r3
 80074f0:	464f      	movge	r7, r9
 80074f2:	2300      	movlt	r3, #0
 80074f4:	9b08      	ldrge	r3, [sp, #32]
 80074f6:	e747      	b.n	8007388 <_dtoa_r+0x738>
 80074f8:	464f      	mov	r7, r9
 80074fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074fe:	e74c      	b.n	800739a <_dtoa_r+0x74a>
 8007500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007502:	e773      	b.n	80073ec <_dtoa_r+0x79c>
 8007504:	3fe00000 	.word	0x3fe00000
 8007508:	40240000 	.word	0x40240000
 800750c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800750e:	2b01      	cmp	r3, #1
 8007510:	dc18      	bgt.n	8007544 <_dtoa_r+0x8f4>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	b9b3      	cbnz	r3, 8007544 <_dtoa_r+0x8f4>
 8007516:	9b05      	ldr	r3, [sp, #20]
 8007518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800751c:	b993      	cbnz	r3, 8007544 <_dtoa_r+0x8f4>
 800751e:	9b05      	ldr	r3, [sp, #20]
 8007520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007524:	0d1b      	lsrs	r3, r3, #20
 8007526:	051b      	lsls	r3, r3, #20
 8007528:	b17b      	cbz	r3, 800754a <_dtoa_r+0x8fa>
 800752a:	f04f 0801 	mov.w	r8, #1
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	f109 0901 	add.w	r9, r9, #1
 8007534:	3301      	adds	r3, #1
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f af6f 	bne.w	800741e <_dtoa_r+0x7ce>
 8007540:	2001      	movs	r0, #1
 8007542:	e774      	b.n	800742e <_dtoa_r+0x7de>
 8007544:	f04f 0800 	mov.w	r8, #0
 8007548:	e7f6      	b.n	8007538 <_dtoa_r+0x8e8>
 800754a:	4698      	mov	r8, r3
 800754c:	e7f4      	b.n	8007538 <_dtoa_r+0x8e8>
 800754e:	d080      	beq.n	8007452 <_dtoa_r+0x802>
 8007550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007552:	331c      	adds	r3, #28
 8007554:	441a      	add	r2, r3
 8007556:	4499      	add	r9, r3
 8007558:	441f      	add	r7, r3
 800755a:	9209      	str	r2, [sp, #36]	; 0x24
 800755c:	e779      	b.n	8007452 <_dtoa_r+0x802>
 800755e:	4603      	mov	r3, r0
 8007560:	e7f6      	b.n	8007550 <_dtoa_r+0x900>
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	dc34      	bgt.n	80075d2 <_dtoa_r+0x982>
 8007568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800756a:	2b02      	cmp	r3, #2
 800756c:	dd31      	ble.n	80075d2 <_dtoa_r+0x982>
 800756e:	9b08      	ldr	r3, [sp, #32]
 8007570:	9306      	str	r3, [sp, #24]
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	b963      	cbnz	r3, 8007590 <_dtoa_r+0x940>
 8007576:	4621      	mov	r1, r4
 8007578:	2205      	movs	r2, #5
 800757a:	4628      	mov	r0, r5
 800757c:	f000 faaa 	bl	8007ad4 <__multadd>
 8007580:	4601      	mov	r1, r0
 8007582:	4604      	mov	r4, r0
 8007584:	4650      	mov	r0, sl
 8007586:	f000 fcbd 	bl	8007f04 <__mcmp>
 800758a:	2800      	cmp	r0, #0
 800758c:	f73f adbf 	bgt.w	800710e <_dtoa_r+0x4be>
 8007590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007592:	9f03      	ldr	r7, [sp, #12]
 8007594:	ea6f 0b03 	mvn.w	fp, r3
 8007598:	f04f 0800 	mov.w	r8, #0
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fa76 	bl	8007a90 <_Bfree>
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	f43f aead 	beq.w	8007304 <_dtoa_r+0x6b4>
 80075aa:	f1b8 0f00 	cmp.w	r8, #0
 80075ae:	d005      	beq.n	80075bc <_dtoa_r+0x96c>
 80075b0:	45b0      	cmp	r8, r6
 80075b2:	d003      	beq.n	80075bc <_dtoa_r+0x96c>
 80075b4:	4641      	mov	r1, r8
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fa6a 	bl	8007a90 <_Bfree>
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 fa66 	bl	8007a90 <_Bfree>
 80075c4:	e69e      	b.n	8007304 <_dtoa_r+0x6b4>
 80075c6:	2400      	movs	r4, #0
 80075c8:	4626      	mov	r6, r4
 80075ca:	e7e1      	b.n	8007590 <_dtoa_r+0x940>
 80075cc:	46c3      	mov	fp, r8
 80075ce:	4626      	mov	r6, r4
 80075d0:	e59d      	b.n	800710e <_dtoa_r+0x4be>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80c8 	beq.w	800776a <_dtoa_r+0xb1a>
 80075da:	9b08      	ldr	r3, [sp, #32]
 80075dc:	9306      	str	r3, [sp, #24]
 80075de:	2f00      	cmp	r7, #0
 80075e0:	dd05      	ble.n	80075ee <_dtoa_r+0x99e>
 80075e2:	4631      	mov	r1, r6
 80075e4:	463a      	mov	r2, r7
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 fc20 	bl	8007e2c <__lshift>
 80075ec:	4606      	mov	r6, r0
 80075ee:	f1b8 0f00 	cmp.w	r8, #0
 80075f2:	d05b      	beq.n	80076ac <_dtoa_r+0xa5c>
 80075f4:	4628      	mov	r0, r5
 80075f6:	6871      	ldr	r1, [r6, #4]
 80075f8:	f000 fa0a 	bl	8007a10 <_Balloc>
 80075fc:	4607      	mov	r7, r0
 80075fe:	b928      	cbnz	r0, 800760c <_dtoa_r+0x9bc>
 8007600:	4602      	mov	r2, r0
 8007602:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007606:	4b81      	ldr	r3, [pc, #516]	; (800780c <_dtoa_r+0xbbc>)
 8007608:	f7ff bb36 	b.w	8006c78 <_dtoa_r+0x28>
 800760c:	6932      	ldr	r2, [r6, #16]
 800760e:	f106 010c 	add.w	r1, r6, #12
 8007612:	3202      	adds	r2, #2
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	300c      	adds	r0, #12
 8007618:	f7ff fa83 	bl	8006b22 <memcpy>
 800761c:	2201      	movs	r2, #1
 800761e:	4639      	mov	r1, r7
 8007620:	4628      	mov	r0, r5
 8007622:	f000 fc03 	bl	8007e2c <__lshift>
 8007626:	46b0      	mov	r8, r6
 8007628:	4606      	mov	r6, r0
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	9a03      	ldr	r2, [sp, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	9b06      	ldr	r3, [sp, #24]
 8007634:	4413      	add	r3, r2
 8007636:	930b      	str	r3, [sp, #44]	; 0x2c
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	930a      	str	r3, [sp, #40]	; 0x28
 8007640:	9b08      	ldr	r3, [sp, #32]
 8007642:	4621      	mov	r1, r4
 8007644:	3b01      	subs	r3, #1
 8007646:	4650      	mov	r0, sl
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	f7ff fa78 	bl	8006b3e <quorem>
 800764e:	4641      	mov	r1, r8
 8007650:	9006      	str	r0, [sp, #24]
 8007652:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007656:	4650      	mov	r0, sl
 8007658:	f000 fc54 	bl	8007f04 <__mcmp>
 800765c:	4632      	mov	r2, r6
 800765e:	9009      	str	r0, [sp, #36]	; 0x24
 8007660:	4621      	mov	r1, r4
 8007662:	4628      	mov	r0, r5
 8007664:	f000 fc6a 	bl	8007f3c <__mdiff>
 8007668:	68c2      	ldr	r2, [r0, #12]
 800766a:	4607      	mov	r7, r0
 800766c:	bb02      	cbnz	r2, 80076b0 <_dtoa_r+0xa60>
 800766e:	4601      	mov	r1, r0
 8007670:	4650      	mov	r0, sl
 8007672:	f000 fc47 	bl	8007f04 <__mcmp>
 8007676:	4602      	mov	r2, r0
 8007678:	4639      	mov	r1, r7
 800767a:	4628      	mov	r0, r5
 800767c:	920c      	str	r2, [sp, #48]	; 0x30
 800767e:	f000 fa07 	bl	8007a90 <_Bfree>
 8007682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007686:	9f08      	ldr	r7, [sp, #32]
 8007688:	ea43 0102 	orr.w	r1, r3, r2
 800768c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768e:	4319      	orrs	r1, r3
 8007690:	d110      	bne.n	80076b4 <_dtoa_r+0xa64>
 8007692:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007696:	d029      	beq.n	80076ec <_dtoa_r+0xa9c>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	dd02      	ble.n	80076a4 <_dtoa_r+0xa54>
 800769e:	9b06      	ldr	r3, [sp, #24]
 80076a0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	f883 9000 	strb.w	r9, [r3]
 80076aa:	e777      	b.n	800759c <_dtoa_r+0x94c>
 80076ac:	4630      	mov	r0, r6
 80076ae:	e7ba      	b.n	8007626 <_dtoa_r+0x9d6>
 80076b0:	2201      	movs	r2, #1
 80076b2:	e7e1      	b.n	8007678 <_dtoa_r+0xa28>
 80076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	db04      	blt.n	80076c4 <_dtoa_r+0xa74>
 80076ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 80076bc:	430b      	orrs	r3, r1
 80076be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c0:	430b      	orrs	r3, r1
 80076c2:	d120      	bne.n	8007706 <_dtoa_r+0xab6>
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	dded      	ble.n	80076a4 <_dtoa_r+0xa54>
 80076c8:	4651      	mov	r1, sl
 80076ca:	2201      	movs	r2, #1
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fbad 	bl	8007e2c <__lshift>
 80076d2:	4621      	mov	r1, r4
 80076d4:	4682      	mov	sl, r0
 80076d6:	f000 fc15 	bl	8007f04 <__mcmp>
 80076da:	2800      	cmp	r0, #0
 80076dc:	dc03      	bgt.n	80076e6 <_dtoa_r+0xa96>
 80076de:	d1e1      	bne.n	80076a4 <_dtoa_r+0xa54>
 80076e0:	f019 0f01 	tst.w	r9, #1
 80076e4:	d0de      	beq.n	80076a4 <_dtoa_r+0xa54>
 80076e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80076ea:	d1d8      	bne.n	800769e <_dtoa_r+0xa4e>
 80076ec:	2339      	movs	r3, #57	; 0x39
 80076ee:	9a04      	ldr	r2, [sp, #16]
 80076f0:	7013      	strb	r3, [r2, #0]
 80076f2:	463b      	mov	r3, r7
 80076f4:	461f      	mov	r7, r3
 80076f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	2a39      	cmp	r2, #57	; 0x39
 80076fe:	d06b      	beq.n	80077d8 <_dtoa_r+0xb88>
 8007700:	3201      	adds	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e74a      	b.n	800759c <_dtoa_r+0x94c>
 8007706:	2a00      	cmp	r2, #0
 8007708:	dd07      	ble.n	800771a <_dtoa_r+0xaca>
 800770a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800770e:	d0ed      	beq.n	80076ec <_dtoa_r+0xa9c>
 8007710:	9a04      	ldr	r2, [sp, #16]
 8007712:	f109 0301 	add.w	r3, r9, #1
 8007716:	7013      	strb	r3, [r2, #0]
 8007718:	e740      	b.n	800759c <_dtoa_r+0x94c>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800771e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007722:	4293      	cmp	r3, r2
 8007724:	d042      	beq.n	80077ac <_dtoa_r+0xb5c>
 8007726:	4651      	mov	r1, sl
 8007728:	2300      	movs	r3, #0
 800772a:	220a      	movs	r2, #10
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f9d1 	bl	8007ad4 <__multadd>
 8007732:	45b0      	cmp	r8, r6
 8007734:	4682      	mov	sl, r0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f04f 020a 	mov.w	r2, #10
 800773e:	4641      	mov	r1, r8
 8007740:	4628      	mov	r0, r5
 8007742:	d107      	bne.n	8007754 <_dtoa_r+0xb04>
 8007744:	f000 f9c6 	bl	8007ad4 <__multadd>
 8007748:	4680      	mov	r8, r0
 800774a:	4606      	mov	r6, r0
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	3301      	adds	r3, #1
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	e775      	b.n	8007640 <_dtoa_r+0x9f0>
 8007754:	f000 f9be 	bl	8007ad4 <__multadd>
 8007758:	4631      	mov	r1, r6
 800775a:	4680      	mov	r8, r0
 800775c:	2300      	movs	r3, #0
 800775e:	220a      	movs	r2, #10
 8007760:	4628      	mov	r0, r5
 8007762:	f000 f9b7 	bl	8007ad4 <__multadd>
 8007766:	4606      	mov	r6, r0
 8007768:	e7f0      	b.n	800774c <_dtoa_r+0xafc>
 800776a:	9b08      	ldr	r3, [sp, #32]
 800776c:	9306      	str	r3, [sp, #24]
 800776e:	9f03      	ldr	r7, [sp, #12]
 8007770:	4621      	mov	r1, r4
 8007772:	4650      	mov	r0, sl
 8007774:	f7ff f9e3 	bl	8006b3e <quorem>
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800777e:	f807 9b01 	strb.w	r9, [r7], #1
 8007782:	1afa      	subs	r2, r7, r3
 8007784:	9b06      	ldr	r3, [sp, #24]
 8007786:	4293      	cmp	r3, r2
 8007788:	dd07      	ble.n	800779a <_dtoa_r+0xb4a>
 800778a:	4651      	mov	r1, sl
 800778c:	2300      	movs	r3, #0
 800778e:	220a      	movs	r2, #10
 8007790:	4628      	mov	r0, r5
 8007792:	f000 f99f 	bl	8007ad4 <__multadd>
 8007796:	4682      	mov	sl, r0
 8007798:	e7ea      	b.n	8007770 <_dtoa_r+0xb20>
 800779a:	9b06      	ldr	r3, [sp, #24]
 800779c:	f04f 0800 	mov.w	r8, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bfcc      	ite	gt
 80077a4:	461f      	movgt	r7, r3
 80077a6:	2701      	movle	r7, #1
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	441f      	add	r7, r3
 80077ac:	4651      	mov	r1, sl
 80077ae:	2201      	movs	r2, #1
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 fb3b 	bl	8007e2c <__lshift>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4682      	mov	sl, r0
 80077ba:	f000 fba3 	bl	8007f04 <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	dc97      	bgt.n	80076f2 <_dtoa_r+0xaa2>
 80077c2:	d102      	bne.n	80077ca <_dtoa_r+0xb7a>
 80077c4:	f019 0f01 	tst.w	r9, #1
 80077c8:	d193      	bne.n	80076f2 <_dtoa_r+0xaa2>
 80077ca:	463b      	mov	r3, r7
 80077cc:	461f      	mov	r7, r3
 80077ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077d2:	2a30      	cmp	r2, #48	; 0x30
 80077d4:	d0fa      	beq.n	80077cc <_dtoa_r+0xb7c>
 80077d6:	e6e1      	b.n	800759c <_dtoa_r+0x94c>
 80077d8:	9a03      	ldr	r2, [sp, #12]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d18a      	bne.n	80076f4 <_dtoa_r+0xaa4>
 80077de:	2331      	movs	r3, #49	; 0x31
 80077e0:	f10b 0b01 	add.w	fp, fp, #1
 80077e4:	e797      	b.n	8007716 <_dtoa_r+0xac6>
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <_dtoa_r+0xbc0>)
 80077e8:	f7ff ba9f 	b.w	8006d2a <_dtoa_r+0xda>
 80077ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f aa77 	bne.w	8006ce2 <_dtoa_r+0x92>
 80077f4:	4b07      	ldr	r3, [pc, #28]	; (8007814 <_dtoa_r+0xbc4>)
 80077f6:	f7ff ba98 	b.w	8006d2a <_dtoa_r+0xda>
 80077fa:	9b06      	ldr	r3, [sp, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dcb6      	bgt.n	800776e <_dtoa_r+0xb1e>
 8007800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007802:	2b02      	cmp	r3, #2
 8007804:	f73f aeb5 	bgt.w	8007572 <_dtoa_r+0x922>
 8007808:	e7b1      	b.n	800776e <_dtoa_r+0xb1e>
 800780a:	bf00      	nop
 800780c:	0800a24a 	.word	0x0800a24a
 8007810:	0800a1aa 	.word	0x0800a1aa
 8007814:	0800a1ce 	.word	0x0800a1ce

08007818 <_free_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	2900      	cmp	r1, #0
 800781e:	d040      	beq.n	80078a2 <_free_r+0x8a>
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f0c      	subs	r4, r1, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	18e4      	addlt	r4, r4, r3
 800782c:	f000 f8e4 	bl	80079f8 <__malloc_lock>
 8007830:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <_free_r+0x8c>)
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	b933      	cbnz	r3, 8007844 <_free_r+0x2c>
 8007836:	6063      	str	r3, [r4, #4]
 8007838:	6014      	str	r4, [r2, #0]
 800783a:	4628      	mov	r0, r5
 800783c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007840:	f000 b8e0 	b.w	8007a04 <__malloc_unlock>
 8007844:	42a3      	cmp	r3, r4
 8007846:	d908      	bls.n	800785a <_free_r+0x42>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	1821      	adds	r1, r4, r0
 800784c:	428b      	cmp	r3, r1
 800784e:	bf01      	itttt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	e7ed      	b.n	8007836 <_free_r+0x1e>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x4c>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x42>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1850      	adds	r0, r2, r1
 8007868:	42a0      	cmp	r0, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x6c>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	4401      	add	r1, r0
 8007870:	1850      	adds	r0, r2, r1
 8007872:	4283      	cmp	r3, r0
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1e0      	bne.n	800783a <_free_r+0x22>
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4408      	add	r0, r1
 800787e:	6010      	str	r0, [r2, #0]
 8007880:	6053      	str	r3, [r2, #4]
 8007882:	e7da      	b.n	800783a <_free_r+0x22>
 8007884:	d902      	bls.n	800788c <_free_r+0x74>
 8007886:	230c      	movs	r3, #12
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	e7d6      	b.n	800783a <_free_r+0x22>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428b      	cmp	r3, r1
 8007892:	bf01      	itttt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	1809      	addeq	r1, r1, r0
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	6054      	str	r4, [r2, #4]
 80078a0:	e7cb      	b.n	800783a <_free_r+0x22>
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20002c5c 	.word	0x20002c5c

080078a8 <malloc>:
 80078a8:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <malloc+0xc>)
 80078aa:	4601      	mov	r1, r0
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f000 b823 	b.w	80078f8 <_malloc_r>
 80078b2:	bf00      	nop
 80078b4:	20000068 	.word	0x20000068

080078b8 <sbrk_aligned>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	4e0e      	ldr	r6, [pc, #56]	; (80078f4 <sbrk_aligned+0x3c>)
 80078bc:	460c      	mov	r4, r1
 80078be:	6831      	ldr	r1, [r6, #0]
 80078c0:	4605      	mov	r5, r0
 80078c2:	b911      	cbnz	r1, 80078ca <sbrk_aligned+0x12>
 80078c4:	f000 fe8c 	bl	80085e0 <_sbrk_r>
 80078c8:	6030      	str	r0, [r6, #0]
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 fe87 	bl	80085e0 <_sbrk_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	d00a      	beq.n	80078ec <sbrk_aligned+0x34>
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d007      	beq.n	80078f0 <sbrk_aligned+0x38>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fe7c 	bl	80085e0 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d101      	bne.n	80078f0 <sbrk_aligned+0x38>
 80078ec:	f04f 34ff 	mov.w	r4, #4294967295
 80078f0:	4620      	mov	r0, r4
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	20002c60 	.word	0x20002c60

080078f8 <_malloc_r>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	1ccd      	adds	r5, r1, #3
 80078fe:	f025 0503 	bic.w	r5, r5, #3
 8007902:	3508      	adds	r5, #8
 8007904:	2d0c      	cmp	r5, #12
 8007906:	bf38      	it	cc
 8007908:	250c      	movcc	r5, #12
 800790a:	2d00      	cmp	r5, #0
 800790c:	4607      	mov	r7, r0
 800790e:	db01      	blt.n	8007914 <_malloc_r+0x1c>
 8007910:	42a9      	cmp	r1, r5
 8007912:	d905      	bls.n	8007920 <_malloc_r+0x28>
 8007914:	230c      	movs	r3, #12
 8007916:	2600      	movs	r6, #0
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	4630      	mov	r0, r6
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079f4 <_malloc_r+0xfc>
 8007924:	f000 f868 	bl	80079f8 <__malloc_lock>
 8007928:	f8d8 3000 	ldr.w	r3, [r8]
 800792c:	461c      	mov	r4, r3
 800792e:	bb5c      	cbnz	r4, 8007988 <_malloc_r+0x90>
 8007930:	4629      	mov	r1, r5
 8007932:	4638      	mov	r0, r7
 8007934:	f7ff ffc0 	bl	80078b8 <sbrk_aligned>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	4604      	mov	r4, r0
 800793c:	d155      	bne.n	80079ea <_malloc_r+0xf2>
 800793e:	f8d8 4000 	ldr.w	r4, [r8]
 8007942:	4626      	mov	r6, r4
 8007944:	2e00      	cmp	r6, #0
 8007946:	d145      	bne.n	80079d4 <_malloc_r+0xdc>
 8007948:	2c00      	cmp	r4, #0
 800794a:	d048      	beq.n	80079de <_malloc_r+0xe6>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	4631      	mov	r1, r6
 8007950:	4638      	mov	r0, r7
 8007952:	eb04 0903 	add.w	r9, r4, r3
 8007956:	f000 fe43 	bl	80085e0 <_sbrk_r>
 800795a:	4581      	cmp	r9, r0
 800795c:	d13f      	bne.n	80079de <_malloc_r+0xe6>
 800795e:	6821      	ldr	r1, [r4, #0]
 8007960:	4638      	mov	r0, r7
 8007962:	1a6d      	subs	r5, r5, r1
 8007964:	4629      	mov	r1, r5
 8007966:	f7ff ffa7 	bl	80078b8 <sbrk_aligned>
 800796a:	3001      	adds	r0, #1
 800796c:	d037      	beq.n	80079de <_malloc_r+0xe6>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	442b      	add	r3, r5
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	f8d8 3000 	ldr.w	r3, [r8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d038      	beq.n	80079ee <_malloc_r+0xf6>
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	42a2      	cmp	r2, r4
 8007980:	d12b      	bne.n	80079da <_malloc_r+0xe2>
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e00f      	b.n	80079a8 <_malloc_r+0xb0>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	1b52      	subs	r2, r2, r5
 800798c:	d41f      	bmi.n	80079ce <_malloc_r+0xd6>
 800798e:	2a0b      	cmp	r2, #11
 8007990:	d917      	bls.n	80079c2 <_malloc_r+0xca>
 8007992:	1961      	adds	r1, r4, r5
 8007994:	42a3      	cmp	r3, r4
 8007996:	6025      	str	r5, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	6059      	strne	r1, [r3, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	bf08      	it	eq
 80079a0:	f8c8 1000 	streq.w	r1, [r8]
 80079a4:	5162      	str	r2, [r4, r5]
 80079a6:	604b      	str	r3, [r1, #4]
 80079a8:	4638      	mov	r0, r7
 80079aa:	f104 060b 	add.w	r6, r4, #11
 80079ae:	f000 f829 	bl	8007a04 <__malloc_unlock>
 80079b2:	f026 0607 	bic.w	r6, r6, #7
 80079b6:	1d23      	adds	r3, r4, #4
 80079b8:	1af2      	subs	r2, r6, r3
 80079ba:	d0ae      	beq.n	800791a <_malloc_r+0x22>
 80079bc:	1b9b      	subs	r3, r3, r6
 80079be:	50a3      	str	r3, [r4, r2]
 80079c0:	e7ab      	b.n	800791a <_malloc_r+0x22>
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	6862      	ldr	r2, [r4, #4]
 80079c6:	d1dd      	bne.n	8007984 <_malloc_r+0x8c>
 80079c8:	f8c8 2000 	str.w	r2, [r8]
 80079cc:	e7ec      	b.n	80079a8 <_malloc_r+0xb0>
 80079ce:	4623      	mov	r3, r4
 80079d0:	6864      	ldr	r4, [r4, #4]
 80079d2:	e7ac      	b.n	800792e <_malloc_r+0x36>
 80079d4:	4634      	mov	r4, r6
 80079d6:	6876      	ldr	r6, [r6, #4]
 80079d8:	e7b4      	b.n	8007944 <_malloc_r+0x4c>
 80079da:	4613      	mov	r3, r2
 80079dc:	e7cc      	b.n	8007978 <_malloc_r+0x80>
 80079de:	230c      	movs	r3, #12
 80079e0:	4638      	mov	r0, r7
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	f000 f80e 	bl	8007a04 <__malloc_unlock>
 80079e8:	e797      	b.n	800791a <_malloc_r+0x22>
 80079ea:	6025      	str	r5, [r4, #0]
 80079ec:	e7dc      	b.n	80079a8 <_malloc_r+0xb0>
 80079ee:	605b      	str	r3, [r3, #4]
 80079f0:	deff      	udf	#255	; 0xff
 80079f2:	bf00      	nop
 80079f4:	20002c5c 	.word	0x20002c5c

080079f8 <__malloc_lock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_lock+0x8>)
 80079fa:	f7ff b882 	b.w	8006b02 <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	20002c58 	.word	0x20002c58

08007a04 <__malloc_unlock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__malloc_unlock+0x8>)
 8007a06:	f7ff b87d 	b.w	8006b04 <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	20002c58 	.word	0x20002c58

08007a10 <_Balloc>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	69c6      	ldr	r6, [r0, #28]
 8007a14:	4604      	mov	r4, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	b976      	cbnz	r6, 8007a38 <_Balloc+0x28>
 8007a1a:	2010      	movs	r0, #16
 8007a1c:	f7ff ff44 	bl	80078a8 <malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	61e0      	str	r0, [r4, #28]
 8007a24:	b920      	cbnz	r0, 8007a30 <_Balloc+0x20>
 8007a26:	216b      	movs	r1, #107	; 0x6b
 8007a28:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <_Balloc+0x78>)
 8007a2a:	4818      	ldr	r0, [pc, #96]	; (8007a8c <_Balloc+0x7c>)
 8007a2c:	f000 fde8 	bl	8008600 <__assert_func>
 8007a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a34:	6006      	str	r6, [r0, #0]
 8007a36:	60c6      	str	r6, [r0, #12]
 8007a38:	69e6      	ldr	r6, [r4, #28]
 8007a3a:	68f3      	ldr	r3, [r6, #12]
 8007a3c:	b183      	cbz	r3, 8007a60 <_Balloc+0x50>
 8007a3e:	69e3      	ldr	r3, [r4, #28]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a46:	b9b8      	cbnz	r0, 8007a78 <_Balloc+0x68>
 8007a48:	2101      	movs	r1, #1
 8007a4a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a4e:	1d72      	adds	r2, r6, #5
 8007a50:	4620      	mov	r0, r4
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	f000 fdf2 	bl	800863c <_calloc_r>
 8007a58:	b160      	cbz	r0, 8007a74 <_Balloc+0x64>
 8007a5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a5e:	e00e      	b.n	8007a7e <_Balloc+0x6e>
 8007a60:	2221      	movs	r2, #33	; 0x21
 8007a62:	2104      	movs	r1, #4
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fde9 	bl	800863c <_calloc_r>
 8007a6a:	69e3      	ldr	r3, [r4, #28]
 8007a6c:	60f0      	str	r0, [r6, #12]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e4      	bne.n	8007a3e <_Balloc+0x2e>
 8007a74:	2000      	movs	r0, #0
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	6802      	ldr	r2, [r0, #0]
 8007a7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a84:	e7f7      	b.n	8007a76 <_Balloc+0x66>
 8007a86:	bf00      	nop
 8007a88:	0800a1db 	.word	0x0800a1db
 8007a8c:	0800a25b 	.word	0x0800a25b

08007a90 <_Bfree>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	69c6      	ldr	r6, [r0, #28]
 8007a94:	4605      	mov	r5, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	b976      	cbnz	r6, 8007ab8 <_Bfree+0x28>
 8007a9a:	2010      	movs	r0, #16
 8007a9c:	f7ff ff04 	bl	80078a8 <malloc>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	61e8      	str	r0, [r5, #28]
 8007aa4:	b920      	cbnz	r0, 8007ab0 <_Bfree+0x20>
 8007aa6:	218f      	movs	r1, #143	; 0x8f
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <_Bfree+0x3c>)
 8007aaa:	4809      	ldr	r0, [pc, #36]	; (8007ad0 <_Bfree+0x40>)
 8007aac:	f000 fda8 	bl	8008600 <__assert_func>
 8007ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ab4:	6006      	str	r6, [r0, #0]
 8007ab6:	60c6      	str	r6, [r0, #12]
 8007ab8:	b13c      	cbz	r4, 8007aca <_Bfree+0x3a>
 8007aba:	69eb      	ldr	r3, [r5, #28]
 8007abc:	6862      	ldr	r2, [r4, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ac4:	6021      	str	r1, [r4, #0]
 8007ac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	0800a1db 	.word	0x0800a1db
 8007ad0:	0800a25b 	.word	0x0800a25b

08007ad4 <__multadd>:
 8007ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad8:	4607      	mov	r7, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	461e      	mov	r6, r3
 8007ade:	2000      	movs	r0, #0
 8007ae0:	690d      	ldr	r5, [r1, #16]
 8007ae2:	f101 0c14 	add.w	ip, r1, #20
 8007ae6:	f8dc 3000 	ldr.w	r3, [ip]
 8007aea:	3001      	adds	r0, #1
 8007aec:	b299      	uxth	r1, r3
 8007aee:	fb02 6101 	mla	r1, r2, r1, r6
 8007af2:	0c1e      	lsrs	r6, r3, #16
 8007af4:	0c0b      	lsrs	r3, r1, #16
 8007af6:	fb02 3306 	mla	r3, r2, r6, r3
 8007afa:	b289      	uxth	r1, r1
 8007afc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b00:	4285      	cmp	r5, r0
 8007b02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b06:	f84c 1b04 	str.w	r1, [ip], #4
 8007b0a:	dcec      	bgt.n	8007ae6 <__multadd+0x12>
 8007b0c:	b30e      	cbz	r6, 8007b52 <__multadd+0x7e>
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	dc19      	bgt.n	8007b48 <__multadd+0x74>
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	4638      	mov	r0, r7
 8007b18:	3101      	adds	r1, #1
 8007b1a:	f7ff ff79 	bl	8007a10 <_Balloc>
 8007b1e:	4680      	mov	r8, r0
 8007b20:	b928      	cbnz	r0, 8007b2e <__multadd+0x5a>
 8007b22:	4602      	mov	r2, r0
 8007b24:	21ba      	movs	r1, #186	; 0xba
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <__multadd+0x84>)
 8007b28:	480c      	ldr	r0, [pc, #48]	; (8007b5c <__multadd+0x88>)
 8007b2a:	f000 fd69 	bl	8008600 <__assert_func>
 8007b2e:	6922      	ldr	r2, [r4, #16]
 8007b30:	f104 010c 	add.w	r1, r4, #12
 8007b34:	3202      	adds	r2, #2
 8007b36:	0092      	lsls	r2, r2, #2
 8007b38:	300c      	adds	r0, #12
 8007b3a:	f7fe fff2 	bl	8006b22 <memcpy>
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7ff ffa5 	bl	8007a90 <_Bfree>
 8007b46:	4644      	mov	r4, r8
 8007b48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	615e      	str	r6, [r3, #20]
 8007b50:	6125      	str	r5, [r4, #16]
 8007b52:	4620      	mov	r0, r4
 8007b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b58:	0800a24a 	.word	0x0800a24a
 8007b5c:	0800a25b 	.word	0x0800a25b

08007b60 <__hi0bits>:
 8007b60:	0c02      	lsrs	r2, r0, #16
 8007b62:	0412      	lsls	r2, r2, #16
 8007b64:	4603      	mov	r3, r0
 8007b66:	b9ca      	cbnz	r2, 8007b9c <__hi0bits+0x3c>
 8007b68:	0403      	lsls	r3, r0, #16
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b70:	bf04      	itt	eq
 8007b72:	021b      	lsleq	r3, r3, #8
 8007b74:	3008      	addeq	r0, #8
 8007b76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b7a:	bf04      	itt	eq
 8007b7c:	011b      	lsleq	r3, r3, #4
 8007b7e:	3004      	addeq	r0, #4
 8007b80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b84:	bf04      	itt	eq
 8007b86:	009b      	lsleq	r3, r3, #2
 8007b88:	3002      	addeq	r0, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db05      	blt.n	8007b9a <__hi0bits+0x3a>
 8007b8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007b92:	f100 0001 	add.w	r0, r0, #1
 8007b96:	bf08      	it	eq
 8007b98:	2020      	moveq	r0, #32
 8007b9a:	4770      	bx	lr
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e7e5      	b.n	8007b6c <__hi0bits+0xc>

08007ba0 <__lo0bits>:
 8007ba0:	6803      	ldr	r3, [r0, #0]
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	f013 0007 	ands.w	r0, r3, #7
 8007ba8:	d00b      	beq.n	8007bc2 <__lo0bits+0x22>
 8007baa:	07d9      	lsls	r1, r3, #31
 8007bac:	d421      	bmi.n	8007bf2 <__lo0bits+0x52>
 8007bae:	0798      	lsls	r0, r3, #30
 8007bb0:	bf49      	itett	mi
 8007bb2:	085b      	lsrmi	r3, r3, #1
 8007bb4:	089b      	lsrpl	r3, r3, #2
 8007bb6:	2001      	movmi	r0, #1
 8007bb8:	6013      	strmi	r3, [r2, #0]
 8007bba:	bf5c      	itt	pl
 8007bbc:	2002      	movpl	r0, #2
 8007bbe:	6013      	strpl	r3, [r2, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	b299      	uxth	r1, r3
 8007bc4:	b909      	cbnz	r1, 8007bca <__lo0bits+0x2a>
 8007bc6:	2010      	movs	r0, #16
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	b2d9      	uxtb	r1, r3
 8007bcc:	b909      	cbnz	r1, 8007bd2 <__lo0bits+0x32>
 8007bce:	3008      	adds	r0, #8
 8007bd0:	0a1b      	lsrs	r3, r3, #8
 8007bd2:	0719      	lsls	r1, r3, #28
 8007bd4:	bf04      	itt	eq
 8007bd6:	091b      	lsreq	r3, r3, #4
 8007bd8:	3004      	addeq	r0, #4
 8007bda:	0799      	lsls	r1, r3, #30
 8007bdc:	bf04      	itt	eq
 8007bde:	089b      	lsreq	r3, r3, #2
 8007be0:	3002      	addeq	r0, #2
 8007be2:	07d9      	lsls	r1, r3, #31
 8007be4:	d403      	bmi.n	8007bee <__lo0bits+0x4e>
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	f100 0001 	add.w	r0, r0, #1
 8007bec:	d003      	beq.n	8007bf6 <__lo0bits+0x56>
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	4770      	bx	lr
 8007bf6:	2020      	movs	r0, #32
 8007bf8:	4770      	bx	lr
	...

08007bfc <__i2b>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	460c      	mov	r4, r1
 8007c00:	2101      	movs	r1, #1
 8007c02:	f7ff ff05 	bl	8007a10 <_Balloc>
 8007c06:	4602      	mov	r2, r0
 8007c08:	b928      	cbnz	r0, 8007c16 <__i2b+0x1a>
 8007c0a:	f240 1145 	movw	r1, #325	; 0x145
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <__i2b+0x24>)
 8007c10:	4804      	ldr	r0, [pc, #16]	; (8007c24 <__i2b+0x28>)
 8007c12:	f000 fcf5 	bl	8008600 <__assert_func>
 8007c16:	2301      	movs	r3, #1
 8007c18:	6144      	str	r4, [r0, #20]
 8007c1a:	6103      	str	r3, [r0, #16]
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	0800a24a 	.word	0x0800a24a
 8007c24:	0800a25b 	.word	0x0800a25b

08007c28 <__multiply>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	4691      	mov	r9, r2
 8007c2e:	690a      	ldr	r2, [r1, #16]
 8007c30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c34:	460c      	mov	r4, r1
 8007c36:	429a      	cmp	r2, r3
 8007c38:	bfbe      	ittt	lt
 8007c3a:	460b      	movlt	r3, r1
 8007c3c:	464c      	movlt	r4, r9
 8007c3e:	4699      	movlt	r9, r3
 8007c40:	6927      	ldr	r7, [r4, #16]
 8007c42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c46:	68a3      	ldr	r3, [r4, #8]
 8007c48:	6861      	ldr	r1, [r4, #4]
 8007c4a:	eb07 060a 	add.w	r6, r7, sl
 8007c4e:	42b3      	cmp	r3, r6
 8007c50:	b085      	sub	sp, #20
 8007c52:	bfb8      	it	lt
 8007c54:	3101      	addlt	r1, #1
 8007c56:	f7ff fedb 	bl	8007a10 <_Balloc>
 8007c5a:	b930      	cbnz	r0, 8007c6a <__multiply+0x42>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c62:	4b43      	ldr	r3, [pc, #268]	; (8007d70 <__multiply+0x148>)
 8007c64:	4843      	ldr	r0, [pc, #268]	; (8007d74 <__multiply+0x14c>)
 8007c66:	f000 fccb 	bl	8008600 <__assert_func>
 8007c6a:	f100 0514 	add.w	r5, r0, #20
 8007c6e:	462b      	mov	r3, r5
 8007c70:	2200      	movs	r2, #0
 8007c72:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c76:	4543      	cmp	r3, r8
 8007c78:	d321      	bcc.n	8007cbe <__multiply+0x96>
 8007c7a:	f104 0314 	add.w	r3, r4, #20
 8007c7e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c82:	f109 0314 	add.w	r3, r9, #20
 8007c86:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c8a:	9202      	str	r2, [sp, #8]
 8007c8c:	1b3a      	subs	r2, r7, r4
 8007c8e:	3a15      	subs	r2, #21
 8007c90:	f022 0203 	bic.w	r2, r2, #3
 8007c94:	3204      	adds	r2, #4
 8007c96:	f104 0115 	add.w	r1, r4, #21
 8007c9a:	428f      	cmp	r7, r1
 8007c9c:	bf38      	it	cc
 8007c9e:	2204      	movcc	r2, #4
 8007ca0:	9201      	str	r2, [sp, #4]
 8007ca2:	9a02      	ldr	r2, [sp, #8]
 8007ca4:	9303      	str	r3, [sp, #12]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d80c      	bhi.n	8007cc4 <__multiply+0x9c>
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	dd03      	ble.n	8007cb6 <__multiply+0x8e>
 8007cae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d05a      	beq.n	8007d6c <__multiply+0x144>
 8007cb6:	6106      	str	r6, [r0, #16]
 8007cb8:	b005      	add	sp, #20
 8007cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	f843 2b04 	str.w	r2, [r3], #4
 8007cc2:	e7d8      	b.n	8007c76 <__multiply+0x4e>
 8007cc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cc8:	f1ba 0f00 	cmp.w	sl, #0
 8007ccc:	d023      	beq.n	8007d16 <__multiply+0xee>
 8007cce:	46a9      	mov	r9, r5
 8007cd0:	f04f 0c00 	mov.w	ip, #0
 8007cd4:	f104 0e14 	add.w	lr, r4, #20
 8007cd8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cdc:	f8d9 1000 	ldr.w	r1, [r9]
 8007ce0:	fa1f fb82 	uxth.w	fp, r2
 8007ce4:	b289      	uxth	r1, r1
 8007ce6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cea:	4461      	add	r1, ip
 8007cec:	f8d9 c000 	ldr.w	ip, [r9]
 8007cf0:	0c12      	lsrs	r2, r2, #16
 8007cf2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007cf6:	fb0a c202 	mla	r2, sl, r2, ip
 8007cfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cfe:	b289      	uxth	r1, r1
 8007d00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d04:	4577      	cmp	r7, lr
 8007d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d0a:	f849 1b04 	str.w	r1, [r9], #4
 8007d0e:	d8e3      	bhi.n	8007cd8 <__multiply+0xb0>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	f845 c002 	str.w	ip, [r5, r2]
 8007d16:	9a03      	ldr	r2, [sp, #12]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d1e:	f1b9 0f00 	cmp.w	r9, #0
 8007d22:	d021      	beq.n	8007d68 <__multiply+0x140>
 8007d24:	46ae      	mov	lr, r5
 8007d26:	f04f 0a00 	mov.w	sl, #0
 8007d2a:	6829      	ldr	r1, [r5, #0]
 8007d2c:	f104 0c14 	add.w	ip, r4, #20
 8007d30:	f8bc b000 	ldrh.w	fp, [ip]
 8007d34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d38:	b289      	uxth	r1, r1
 8007d3a:	fb09 220b 	mla	r2, r9, fp, r2
 8007d3e:	4452      	add	r2, sl
 8007d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d44:	f84e 1b04 	str.w	r1, [lr], #4
 8007d48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d50:	f8be 1000 	ldrh.w	r1, [lr]
 8007d54:	4567      	cmp	r7, ip
 8007d56:	fb09 110a 	mla	r1, r9, sl, r1
 8007d5a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d62:	d8e5      	bhi.n	8007d30 <__multiply+0x108>
 8007d64:	9a01      	ldr	r2, [sp, #4]
 8007d66:	50a9      	str	r1, [r5, r2]
 8007d68:	3504      	adds	r5, #4
 8007d6a:	e79a      	b.n	8007ca2 <__multiply+0x7a>
 8007d6c:	3e01      	subs	r6, #1
 8007d6e:	e79c      	b.n	8007caa <__multiply+0x82>
 8007d70:	0800a24a 	.word	0x0800a24a
 8007d74:	0800a25b 	.word	0x0800a25b

08007d78 <__pow5mult>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4615      	mov	r5, r2
 8007d7e:	f012 0203 	ands.w	r2, r2, #3
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	d007      	beq.n	8007d98 <__pow5mult+0x20>
 8007d88:	4c25      	ldr	r4, [pc, #148]	; (8007e20 <__pow5mult+0xa8>)
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d92:	f7ff fe9f 	bl	8007ad4 <__multadd>
 8007d96:	4607      	mov	r7, r0
 8007d98:	10ad      	asrs	r5, r5, #2
 8007d9a:	d03d      	beq.n	8007e18 <__pow5mult+0xa0>
 8007d9c:	69f4      	ldr	r4, [r6, #28]
 8007d9e:	b97c      	cbnz	r4, 8007dc0 <__pow5mult+0x48>
 8007da0:	2010      	movs	r0, #16
 8007da2:	f7ff fd81 	bl	80078a8 <malloc>
 8007da6:	4602      	mov	r2, r0
 8007da8:	61f0      	str	r0, [r6, #28]
 8007daa:	b928      	cbnz	r0, 8007db8 <__pow5mult+0x40>
 8007dac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007db0:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <__pow5mult+0xac>)
 8007db2:	481d      	ldr	r0, [pc, #116]	; (8007e28 <__pow5mult+0xb0>)
 8007db4:	f000 fc24 	bl	8008600 <__assert_func>
 8007db8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dbc:	6004      	str	r4, [r0, #0]
 8007dbe:	60c4      	str	r4, [r0, #12]
 8007dc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007dc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dc8:	b94c      	cbnz	r4, 8007dde <__pow5mult+0x66>
 8007dca:	f240 2171 	movw	r1, #625	; 0x271
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff ff14 	bl	8007bfc <__i2b>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ddc:	6003      	str	r3, [r0, #0]
 8007dde:	f04f 0900 	mov.w	r9, #0
 8007de2:	07eb      	lsls	r3, r5, #31
 8007de4:	d50a      	bpl.n	8007dfc <__pow5mult+0x84>
 8007de6:	4639      	mov	r1, r7
 8007de8:	4622      	mov	r2, r4
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7ff ff1c 	bl	8007c28 <__multiply>
 8007df0:	4680      	mov	r8, r0
 8007df2:	4639      	mov	r1, r7
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7ff fe4b 	bl	8007a90 <_Bfree>
 8007dfa:	4647      	mov	r7, r8
 8007dfc:	106d      	asrs	r5, r5, #1
 8007dfe:	d00b      	beq.n	8007e18 <__pow5mult+0xa0>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	b938      	cbnz	r0, 8007e14 <__pow5mult+0x9c>
 8007e04:	4622      	mov	r2, r4
 8007e06:	4621      	mov	r1, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f7ff ff0d 	bl	8007c28 <__multiply>
 8007e0e:	6020      	str	r0, [r4, #0]
 8007e10:	f8c0 9000 	str.w	r9, [r0]
 8007e14:	4604      	mov	r4, r0
 8007e16:	e7e4      	b.n	8007de2 <__pow5mult+0x6a>
 8007e18:	4638      	mov	r0, r7
 8007e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1e:	bf00      	nop
 8007e20:	0800a3a8 	.word	0x0800a3a8
 8007e24:	0800a1db 	.word	0x0800a1db
 8007e28:	0800a25b 	.word	0x0800a25b

08007e2c <__lshift>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	460c      	mov	r4, r1
 8007e32:	4607      	mov	r7, r0
 8007e34:	4691      	mov	r9, r2
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	6849      	ldr	r1, [r1, #4]
 8007e3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e44:	f108 0601 	add.w	r6, r8, #1
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	db0b      	blt.n	8007e64 <__lshift+0x38>
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff fddf 	bl	8007a10 <_Balloc>
 8007e52:	4605      	mov	r5, r0
 8007e54:	b948      	cbnz	r0, 8007e6a <__lshift+0x3e>
 8007e56:	4602      	mov	r2, r0
 8007e58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e5c:	4b27      	ldr	r3, [pc, #156]	; (8007efc <__lshift+0xd0>)
 8007e5e:	4828      	ldr	r0, [pc, #160]	; (8007f00 <__lshift+0xd4>)
 8007e60:	f000 fbce 	bl	8008600 <__assert_func>
 8007e64:	3101      	adds	r1, #1
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	e7ee      	b.n	8007e48 <__lshift+0x1c>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f100 0114 	add.w	r1, r0, #20
 8007e70:	f100 0210 	add.w	r2, r0, #16
 8007e74:	4618      	mov	r0, r3
 8007e76:	4553      	cmp	r3, sl
 8007e78:	db33      	blt.n	8007ee2 <__lshift+0xb6>
 8007e7a:	6920      	ldr	r0, [r4, #16]
 8007e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e80:	f104 0314 	add.w	r3, r4, #20
 8007e84:	f019 091f 	ands.w	r9, r9, #31
 8007e88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e90:	d02b      	beq.n	8007eea <__lshift+0xbe>
 8007e92:	468a      	mov	sl, r1
 8007e94:	2200      	movs	r2, #0
 8007e96:	f1c9 0e20 	rsb	lr, r9, #32
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	fa00 f009 	lsl.w	r0, r0, r9
 8007ea0:	4310      	orrs	r0, r2
 8007ea2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eaa:	459c      	cmp	ip, r3
 8007eac:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eb0:	d8f3      	bhi.n	8007e9a <__lshift+0x6e>
 8007eb2:	ebac 0304 	sub.w	r3, ip, r4
 8007eb6:	3b15      	subs	r3, #21
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	f104 0015 	add.w	r0, r4, #21
 8007ec2:	4584      	cmp	ip, r0
 8007ec4:	bf38      	it	cc
 8007ec6:	2304      	movcc	r3, #4
 8007ec8:	50ca      	str	r2, [r1, r3]
 8007eca:	b10a      	cbz	r2, 8007ed0 <__lshift+0xa4>
 8007ecc:	f108 0602 	add.w	r6, r8, #2
 8007ed0:	3e01      	subs	r6, #1
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	612e      	str	r6, [r5, #16]
 8007ed8:	f7ff fdda 	bl	8007a90 <_Bfree>
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	e7c5      	b.n	8007e76 <__lshift+0x4a>
 8007eea:	3904      	subs	r1, #4
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	459c      	cmp	ip, r3
 8007ef2:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ef6:	d8f9      	bhi.n	8007eec <__lshift+0xc0>
 8007ef8:	e7ea      	b.n	8007ed0 <__lshift+0xa4>
 8007efa:	bf00      	nop
 8007efc:	0800a24a 	.word	0x0800a24a
 8007f00:	0800a25b 	.word	0x0800a25b

08007f04 <__mcmp>:
 8007f04:	4603      	mov	r3, r0
 8007f06:	690a      	ldr	r2, [r1, #16]
 8007f08:	6900      	ldr	r0, [r0, #16]
 8007f0a:	b530      	push	{r4, r5, lr}
 8007f0c:	1a80      	subs	r0, r0, r2
 8007f0e:	d10d      	bne.n	8007f2c <__mcmp+0x28>
 8007f10:	3314      	adds	r3, #20
 8007f12:	3114      	adds	r1, #20
 8007f14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f24:	4295      	cmp	r5, r2
 8007f26:	d002      	beq.n	8007f2e <__mcmp+0x2a>
 8007f28:	d304      	bcc.n	8007f34 <__mcmp+0x30>
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	bd30      	pop	{r4, r5, pc}
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	d3f4      	bcc.n	8007f1c <__mcmp+0x18>
 8007f32:	e7fb      	b.n	8007f2c <__mcmp+0x28>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	e7f8      	b.n	8007f2c <__mcmp+0x28>
	...

08007f3c <__mdiff>:
 8007f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	460d      	mov	r5, r1
 8007f42:	4607      	mov	r7, r0
 8007f44:	4611      	mov	r1, r2
 8007f46:	4628      	mov	r0, r5
 8007f48:	4614      	mov	r4, r2
 8007f4a:	f7ff ffdb 	bl	8007f04 <__mcmp>
 8007f4e:	1e06      	subs	r6, r0, #0
 8007f50:	d111      	bne.n	8007f76 <__mdiff+0x3a>
 8007f52:	4631      	mov	r1, r6
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fd5b 	bl	8007a10 <_Balloc>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	b928      	cbnz	r0, 8007f6a <__mdiff+0x2e>
 8007f5e:	f240 2137 	movw	r1, #567	; 0x237
 8007f62:	4b3a      	ldr	r3, [pc, #232]	; (800804c <__mdiff+0x110>)
 8007f64:	483a      	ldr	r0, [pc, #232]	; (8008050 <__mdiff+0x114>)
 8007f66:	f000 fb4b 	bl	8008600 <__assert_func>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f70:	4610      	mov	r0, r2
 8007f72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f76:	bfa4      	itt	ge
 8007f78:	4623      	movge	r3, r4
 8007f7a:	462c      	movge	r4, r5
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	6861      	ldr	r1, [r4, #4]
 8007f80:	bfa6      	itte	ge
 8007f82:	461d      	movge	r5, r3
 8007f84:	2600      	movge	r6, #0
 8007f86:	2601      	movlt	r6, #1
 8007f88:	f7ff fd42 	bl	8007a10 <_Balloc>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	b918      	cbnz	r0, 8007f98 <__mdiff+0x5c>
 8007f90:	f240 2145 	movw	r1, #581	; 0x245
 8007f94:	4b2d      	ldr	r3, [pc, #180]	; (800804c <__mdiff+0x110>)
 8007f96:	e7e5      	b.n	8007f64 <__mdiff+0x28>
 8007f98:	f102 0814 	add.w	r8, r2, #20
 8007f9c:	46c2      	mov	sl, r8
 8007f9e:	f04f 0c00 	mov.w	ip, #0
 8007fa2:	6927      	ldr	r7, [r4, #16]
 8007fa4:	60c6      	str	r6, [r0, #12]
 8007fa6:	692e      	ldr	r6, [r5, #16]
 8007fa8:	f104 0014 	add.w	r0, r4, #20
 8007fac:	f105 0914 	add.w	r9, r5, #20
 8007fb0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007fb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fb8:	3410      	adds	r4, #16
 8007fba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007fbe:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fc2:	fa1f f18b 	uxth.w	r1, fp
 8007fc6:	4461      	add	r1, ip
 8007fc8:	fa1f fc83 	uxth.w	ip, r3
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	eba1 010c 	sub.w	r1, r1, ip
 8007fd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fda:	b289      	uxth	r1, r1
 8007fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007fe0:	454e      	cmp	r6, r9
 8007fe2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007fe6:	f84a 1b04 	str.w	r1, [sl], #4
 8007fea:	d8e6      	bhi.n	8007fba <__mdiff+0x7e>
 8007fec:	1b73      	subs	r3, r6, r5
 8007fee:	3b15      	subs	r3, #21
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	3515      	adds	r5, #21
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	42ae      	cmp	r6, r5
 8007ffa:	bf38      	it	cc
 8007ffc:	2304      	movcc	r3, #4
 8007ffe:	4418      	add	r0, r3
 8008000:	4443      	add	r3, r8
 8008002:	461e      	mov	r6, r3
 8008004:	4605      	mov	r5, r0
 8008006:	4575      	cmp	r5, lr
 8008008:	d30e      	bcc.n	8008028 <__mdiff+0xec>
 800800a:	f10e 0103 	add.w	r1, lr, #3
 800800e:	1a09      	subs	r1, r1, r0
 8008010:	f021 0103 	bic.w	r1, r1, #3
 8008014:	3803      	subs	r0, #3
 8008016:	4586      	cmp	lr, r0
 8008018:	bf38      	it	cc
 800801a:	2100      	movcc	r1, #0
 800801c:	440b      	add	r3, r1
 800801e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008022:	b189      	cbz	r1, 8008048 <__mdiff+0x10c>
 8008024:	6117      	str	r7, [r2, #16]
 8008026:	e7a3      	b.n	8007f70 <__mdiff+0x34>
 8008028:	f855 8b04 	ldr.w	r8, [r5], #4
 800802c:	fa1f f188 	uxth.w	r1, r8
 8008030:	4461      	add	r1, ip
 8008032:	140c      	asrs	r4, r1, #16
 8008034:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008038:	b289      	uxth	r1, r1
 800803a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800803e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008042:	f846 1b04 	str.w	r1, [r6], #4
 8008046:	e7de      	b.n	8008006 <__mdiff+0xca>
 8008048:	3f01      	subs	r7, #1
 800804a:	e7e8      	b.n	800801e <__mdiff+0xe2>
 800804c:	0800a24a 	.word	0x0800a24a
 8008050:	0800a25b 	.word	0x0800a25b

08008054 <__d2b>:
 8008054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008056:	2101      	movs	r1, #1
 8008058:	4617      	mov	r7, r2
 800805a:	461c      	mov	r4, r3
 800805c:	9e08      	ldr	r6, [sp, #32]
 800805e:	f7ff fcd7 	bl	8007a10 <_Balloc>
 8008062:	4605      	mov	r5, r0
 8008064:	b930      	cbnz	r0, 8008074 <__d2b+0x20>
 8008066:	4602      	mov	r2, r0
 8008068:	f240 310f 	movw	r1, #783	; 0x30f
 800806c:	4b22      	ldr	r3, [pc, #136]	; (80080f8 <__d2b+0xa4>)
 800806e:	4823      	ldr	r0, [pc, #140]	; (80080fc <__d2b+0xa8>)
 8008070:	f000 fac6 	bl	8008600 <__assert_func>
 8008074:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008078:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800807c:	bb24      	cbnz	r4, 80080c8 <__d2b+0x74>
 800807e:	2f00      	cmp	r7, #0
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	d026      	beq.n	80080d2 <__d2b+0x7e>
 8008084:	4668      	mov	r0, sp
 8008086:	9700      	str	r7, [sp, #0]
 8008088:	f7ff fd8a 	bl	8007ba0 <__lo0bits>
 800808c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008090:	b1e8      	cbz	r0, 80080ce <__d2b+0x7a>
 8008092:	f1c0 0320 	rsb	r3, r0, #32
 8008096:	fa02 f303 	lsl.w	r3, r2, r3
 800809a:	430b      	orrs	r3, r1
 800809c:	40c2      	lsrs	r2, r0
 800809e:	616b      	str	r3, [r5, #20]
 80080a0:	9201      	str	r2, [sp, #4]
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bf14      	ite	ne
 80080a8:	2102      	movne	r1, #2
 80080aa:	2101      	moveq	r1, #1
 80080ac:	61ab      	str	r3, [r5, #24]
 80080ae:	6129      	str	r1, [r5, #16]
 80080b0:	b1bc      	cbz	r4, 80080e2 <__d2b+0x8e>
 80080b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080b6:	4404      	add	r4, r0
 80080b8:	6034      	str	r4, [r6, #0]
 80080ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	6018      	str	r0, [r3, #0]
 80080c2:	4628      	mov	r0, r5
 80080c4:	b003      	add	sp, #12
 80080c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080cc:	e7d7      	b.n	800807e <__d2b+0x2a>
 80080ce:	6169      	str	r1, [r5, #20]
 80080d0:	e7e7      	b.n	80080a2 <__d2b+0x4e>
 80080d2:	a801      	add	r0, sp, #4
 80080d4:	f7ff fd64 	bl	8007ba0 <__lo0bits>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	2101      	movs	r1, #1
 80080dc:	616b      	str	r3, [r5, #20]
 80080de:	3020      	adds	r0, #32
 80080e0:	e7e5      	b.n	80080ae <__d2b+0x5a>
 80080e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80080ea:	6030      	str	r0, [r6, #0]
 80080ec:	6918      	ldr	r0, [r3, #16]
 80080ee:	f7ff fd37 	bl	8007b60 <__hi0bits>
 80080f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080f6:	e7e2      	b.n	80080be <__d2b+0x6a>
 80080f8:	0800a24a 	.word	0x0800a24a
 80080fc:	0800a25b 	.word	0x0800a25b

08008100 <__sfputc_r>:
 8008100:	6893      	ldr	r3, [r2, #8]
 8008102:	b410      	push	{r4}
 8008104:	3b01      	subs	r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	6093      	str	r3, [r2, #8]
 800810a:	da07      	bge.n	800811c <__sfputc_r+0x1c>
 800810c:	6994      	ldr	r4, [r2, #24]
 800810e:	42a3      	cmp	r3, r4
 8008110:	db01      	blt.n	8008116 <__sfputc_r+0x16>
 8008112:	290a      	cmp	r1, #10
 8008114:	d102      	bne.n	800811c <__sfputc_r+0x1c>
 8008116:	bc10      	pop	{r4}
 8008118:	f7fe bb8b 	b.w	8006832 <__swbuf_r>
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	1c58      	adds	r0, r3, #1
 8008120:	6010      	str	r0, [r2, #0]
 8008122:	7019      	strb	r1, [r3, #0]
 8008124:	4608      	mov	r0, r1
 8008126:	bc10      	pop	{r4}
 8008128:	4770      	bx	lr

0800812a <__sfputs_r>:
 800812a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812c:	4606      	mov	r6, r0
 800812e:	460f      	mov	r7, r1
 8008130:	4614      	mov	r4, r2
 8008132:	18d5      	adds	r5, r2, r3
 8008134:	42ac      	cmp	r4, r5
 8008136:	d101      	bne.n	800813c <__sfputs_r+0x12>
 8008138:	2000      	movs	r0, #0
 800813a:	e007      	b.n	800814c <__sfputs_r+0x22>
 800813c:	463a      	mov	r2, r7
 800813e:	4630      	mov	r0, r6
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	f7ff ffdc 	bl	8008100 <__sfputc_r>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d1f3      	bne.n	8008134 <__sfputs_r+0xa>
 800814c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008150 <_vfiprintf_r>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	460d      	mov	r5, r1
 8008156:	4614      	mov	r4, r2
 8008158:	4698      	mov	r8, r3
 800815a:	4606      	mov	r6, r0
 800815c:	b09d      	sub	sp, #116	; 0x74
 800815e:	b118      	cbz	r0, 8008168 <_vfiprintf_r+0x18>
 8008160:	6a03      	ldr	r3, [r0, #32]
 8008162:	b90b      	cbnz	r3, 8008168 <_vfiprintf_r+0x18>
 8008164:	f7fe fa7e 	bl	8006664 <__sinit>
 8008168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800816a:	07d9      	lsls	r1, r3, #31
 800816c:	d405      	bmi.n	800817a <_vfiprintf_r+0x2a>
 800816e:	89ab      	ldrh	r3, [r5, #12]
 8008170:	059a      	lsls	r2, r3, #22
 8008172:	d402      	bmi.n	800817a <_vfiprintf_r+0x2a>
 8008174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008176:	f7fe fcc4 	bl	8006b02 <__retarget_lock_acquire_recursive>
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	071b      	lsls	r3, r3, #28
 800817e:	d501      	bpl.n	8008184 <_vfiprintf_r+0x34>
 8008180:	692b      	ldr	r3, [r5, #16]
 8008182:	b99b      	cbnz	r3, 80081ac <_vfiprintf_r+0x5c>
 8008184:	4629      	mov	r1, r5
 8008186:	4630      	mov	r0, r6
 8008188:	f7fe fb90 	bl	80068ac <__swsetup_r>
 800818c:	b170      	cbz	r0, 80081ac <_vfiprintf_r+0x5c>
 800818e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008190:	07dc      	lsls	r4, r3, #31
 8008192:	d504      	bpl.n	800819e <_vfiprintf_r+0x4e>
 8008194:	f04f 30ff 	mov.w	r0, #4294967295
 8008198:	b01d      	add	sp, #116	; 0x74
 800819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	0598      	lsls	r0, r3, #22
 80081a2:	d4f7      	bmi.n	8008194 <_vfiprintf_r+0x44>
 80081a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a6:	f7fe fcad 	bl	8006b04 <__retarget_lock_release_recursive>
 80081aa:	e7f3      	b.n	8008194 <_vfiprintf_r+0x44>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9309      	str	r3, [sp, #36]	; 0x24
 80081b0:	2320      	movs	r3, #32
 80081b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b6:	2330      	movs	r3, #48	; 0x30
 80081b8:	f04f 0901 	mov.w	r9, #1
 80081bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008370 <_vfiprintf_r+0x220>
 80081c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081c8:	4623      	mov	r3, r4
 80081ca:	469a      	mov	sl, r3
 80081cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d0:	b10a      	cbz	r2, 80081d6 <_vfiprintf_r+0x86>
 80081d2:	2a25      	cmp	r2, #37	; 0x25
 80081d4:	d1f9      	bne.n	80081ca <_vfiprintf_r+0x7a>
 80081d6:	ebba 0b04 	subs.w	fp, sl, r4
 80081da:	d00b      	beq.n	80081f4 <_vfiprintf_r+0xa4>
 80081dc:	465b      	mov	r3, fp
 80081de:	4622      	mov	r2, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ffa1 	bl	800812a <__sfputs_r>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f000 80a9 	beq.w	8008340 <_vfiprintf_r+0x1f0>
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	445a      	add	r2, fp
 80081f2:	9209      	str	r2, [sp, #36]	; 0x24
 80081f4:	f89a 3000 	ldrb.w	r3, [sl]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80a1 	beq.w	8008340 <_vfiprintf_r+0x1f0>
 80081fe:	2300      	movs	r3, #0
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008208:	f10a 0a01 	add.w	sl, sl, #1
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008214:	931a      	str	r3, [sp, #104]	; 0x68
 8008216:	4654      	mov	r4, sl
 8008218:	2205      	movs	r2, #5
 800821a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821e:	4854      	ldr	r0, [pc, #336]	; (8008370 <_vfiprintf_r+0x220>)
 8008220:	f7fe fc71 	bl	8006b06 <memchr>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	b9d8      	cbnz	r0, 8008260 <_vfiprintf_r+0x110>
 8008228:	06d1      	lsls	r1, r2, #27
 800822a:	bf44      	itt	mi
 800822c:	2320      	movmi	r3, #32
 800822e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008232:	0713      	lsls	r3, r2, #28
 8008234:	bf44      	itt	mi
 8008236:	232b      	movmi	r3, #43	; 0x2b
 8008238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823c:	f89a 3000 	ldrb.w	r3, [sl]
 8008240:	2b2a      	cmp	r3, #42	; 0x2a
 8008242:	d015      	beq.n	8008270 <_vfiprintf_r+0x120>
 8008244:	4654      	mov	r4, sl
 8008246:	2000      	movs	r0, #0
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	9a07      	ldr	r2, [sp, #28]
 800824e:	4621      	mov	r1, r4
 8008250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008254:	3b30      	subs	r3, #48	; 0x30
 8008256:	2b09      	cmp	r3, #9
 8008258:	d94d      	bls.n	80082f6 <_vfiprintf_r+0x1a6>
 800825a:	b1b0      	cbz	r0, 800828a <_vfiprintf_r+0x13a>
 800825c:	9207      	str	r2, [sp, #28]
 800825e:	e014      	b.n	800828a <_vfiprintf_r+0x13a>
 8008260:	eba0 0308 	sub.w	r3, r0, r8
 8008264:	fa09 f303 	lsl.w	r3, r9, r3
 8008268:	4313      	orrs	r3, r2
 800826a:	46a2      	mov	sl, r4
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	e7d2      	b.n	8008216 <_vfiprintf_r+0xc6>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d19      	adds	r1, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9103      	str	r1, [sp, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfbb      	ittet	lt
 800827c:	425b      	neglt	r3, r3
 800827e:	f042 0202 	orrlt.w	r2, r2, #2
 8008282:	9307      	strge	r3, [sp, #28]
 8008284:	9307      	strlt	r3, [sp, #28]
 8008286:	bfb8      	it	lt
 8008288:	9204      	strlt	r2, [sp, #16]
 800828a:	7823      	ldrb	r3, [r4, #0]
 800828c:	2b2e      	cmp	r3, #46	; 0x2e
 800828e:	d10c      	bne.n	80082aa <_vfiprintf_r+0x15a>
 8008290:	7863      	ldrb	r3, [r4, #1]
 8008292:	2b2a      	cmp	r3, #42	; 0x2a
 8008294:	d134      	bne.n	8008300 <_vfiprintf_r+0x1b0>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	3402      	adds	r4, #2
 800829a:	1d1a      	adds	r2, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	9203      	str	r2, [sp, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfb8      	it	lt
 80082a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008374 <_vfiprintf_r+0x224>
 80082ae:	2203      	movs	r2, #3
 80082b0:	4650      	mov	r0, sl
 80082b2:	7821      	ldrb	r1, [r4, #0]
 80082b4:	f7fe fc27 	bl	8006b06 <memchr>
 80082b8:	b138      	cbz	r0, 80082ca <_vfiprintf_r+0x17a>
 80082ba:	2240      	movs	r2, #64	; 0x40
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	eba0 000a 	sub.w	r0, r0, sl
 80082c2:	4082      	lsls	r2, r0
 80082c4:	4313      	orrs	r3, r2
 80082c6:	3401      	adds	r4, #1
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	2206      	movs	r2, #6
 80082d0:	4829      	ldr	r0, [pc, #164]	; (8008378 <_vfiprintf_r+0x228>)
 80082d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d6:	f7fe fc16 	bl	8006b06 <memchr>
 80082da:	2800      	cmp	r0, #0
 80082dc:	d03f      	beq.n	800835e <_vfiprintf_r+0x20e>
 80082de:	4b27      	ldr	r3, [pc, #156]	; (800837c <_vfiprintf_r+0x22c>)
 80082e0:	bb1b      	cbnz	r3, 800832a <_vfiprintf_r+0x1da>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	3307      	adds	r3, #7
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	3308      	adds	r3, #8
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	443b      	add	r3, r7
 80082f2:	9309      	str	r3, [sp, #36]	; 0x24
 80082f4:	e768      	b.n	80081c8 <_vfiprintf_r+0x78>
 80082f6:	460c      	mov	r4, r1
 80082f8:	2001      	movs	r0, #1
 80082fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fe:	e7a6      	b.n	800824e <_vfiprintf_r+0xfe>
 8008300:	2300      	movs	r3, #0
 8008302:	f04f 0c0a 	mov.w	ip, #10
 8008306:	4619      	mov	r1, r3
 8008308:	3401      	adds	r4, #1
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	4620      	mov	r0, r4
 800830e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008312:	3a30      	subs	r2, #48	; 0x30
 8008314:	2a09      	cmp	r2, #9
 8008316:	d903      	bls.n	8008320 <_vfiprintf_r+0x1d0>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0c6      	beq.n	80082aa <_vfiprintf_r+0x15a>
 800831c:	9105      	str	r1, [sp, #20]
 800831e:	e7c4      	b.n	80082aa <_vfiprintf_r+0x15a>
 8008320:	4604      	mov	r4, r0
 8008322:	2301      	movs	r3, #1
 8008324:	fb0c 2101 	mla	r1, ip, r1, r2
 8008328:	e7f0      	b.n	800830c <_vfiprintf_r+0x1bc>
 800832a:	ab03      	add	r3, sp, #12
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	462a      	mov	r2, r5
 8008330:	4630      	mov	r0, r6
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <_vfiprintf_r+0x230>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	f7fd fd47 	bl	8005dc8 <_printf_float>
 800833a:	4607      	mov	r7, r0
 800833c:	1c78      	adds	r0, r7, #1
 800833e:	d1d6      	bne.n	80082ee <_vfiprintf_r+0x19e>
 8008340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008342:	07d9      	lsls	r1, r3, #31
 8008344:	d405      	bmi.n	8008352 <_vfiprintf_r+0x202>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	059a      	lsls	r2, r3, #22
 800834a:	d402      	bmi.n	8008352 <_vfiprintf_r+0x202>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f7fe fbd9 	bl	8006b04 <__retarget_lock_release_recursive>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	065b      	lsls	r3, r3, #25
 8008356:	f53f af1d 	bmi.w	8008194 <_vfiprintf_r+0x44>
 800835a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800835c:	e71c      	b.n	8008198 <_vfiprintf_r+0x48>
 800835e:	ab03      	add	r3, sp, #12
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	462a      	mov	r2, r5
 8008364:	4630      	mov	r0, r6
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <_vfiprintf_r+0x230>)
 8008368:	a904      	add	r1, sp, #16
 800836a:	f7fd ffcd 	bl	8006308 <_printf_i>
 800836e:	e7e4      	b.n	800833a <_vfiprintf_r+0x1ea>
 8008370:	0800a3b4 	.word	0x0800a3b4
 8008374:	0800a3ba 	.word	0x0800a3ba
 8008378:	0800a3be 	.word	0x0800a3be
 800837c:	08005dc9 	.word	0x08005dc9
 8008380:	0800812b 	.word	0x0800812b

08008384 <__sflush_r>:
 8008384:	898a      	ldrh	r2, [r1, #12]
 8008386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008388:	4605      	mov	r5, r0
 800838a:	0710      	lsls	r0, r2, #28
 800838c:	460c      	mov	r4, r1
 800838e:	d457      	bmi.n	8008440 <__sflush_r+0xbc>
 8008390:	684b      	ldr	r3, [r1, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dc04      	bgt.n	80083a0 <__sflush_r+0x1c>
 8008396:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc01      	bgt.n	80083a0 <__sflush_r+0x1c>
 800839c:	2000      	movs	r0, #0
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	d0fa      	beq.n	800839c <__sflush_r+0x18>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083ac:	682f      	ldr	r7, [r5, #0]
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	d032      	beq.n	800841a <__sflush_r+0x96>
 80083b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	075a      	lsls	r2, r3, #29
 80083ba:	d505      	bpl.n	80083c8 <__sflush_r+0x44>
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	1ac0      	subs	r0, r0, r3
 80083c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083c2:	b10b      	cbz	r3, 80083c8 <__sflush_r+0x44>
 80083c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083c6:	1ac0      	subs	r0, r0, r3
 80083c8:	2300      	movs	r3, #0
 80083ca:	4602      	mov	r2, r0
 80083cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ce:	4628      	mov	r0, r5
 80083d0:	6a21      	ldr	r1, [r4, #32]
 80083d2:	47b0      	blx	r6
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	d106      	bne.n	80083e8 <__sflush_r+0x64>
 80083da:	6829      	ldr	r1, [r5, #0]
 80083dc:	291d      	cmp	r1, #29
 80083de:	d82b      	bhi.n	8008438 <__sflush_r+0xb4>
 80083e0:	4a28      	ldr	r2, [pc, #160]	; (8008484 <__sflush_r+0x100>)
 80083e2:	410a      	asrs	r2, r1
 80083e4:	07d6      	lsls	r6, r2, #31
 80083e6:	d427      	bmi.n	8008438 <__sflush_r+0xb4>
 80083e8:	2200      	movs	r2, #0
 80083ea:	6062      	str	r2, [r4, #4]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	04d9      	lsls	r1, r3, #19
 80083f0:	6022      	str	r2, [r4, #0]
 80083f2:	d504      	bpl.n	80083fe <__sflush_r+0x7a>
 80083f4:	1c42      	adds	r2, r0, #1
 80083f6:	d101      	bne.n	80083fc <__sflush_r+0x78>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b903      	cbnz	r3, 80083fe <__sflush_r+0x7a>
 80083fc:	6560      	str	r0, [r4, #84]	; 0x54
 80083fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008400:	602f      	str	r7, [r5, #0]
 8008402:	2900      	cmp	r1, #0
 8008404:	d0ca      	beq.n	800839c <__sflush_r+0x18>
 8008406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800840a:	4299      	cmp	r1, r3
 800840c:	d002      	beq.n	8008414 <__sflush_r+0x90>
 800840e:	4628      	mov	r0, r5
 8008410:	f7ff fa02 	bl	8007818 <_free_r>
 8008414:	2000      	movs	r0, #0
 8008416:	6360      	str	r0, [r4, #52]	; 0x34
 8008418:	e7c1      	b.n	800839e <__sflush_r+0x1a>
 800841a:	2301      	movs	r3, #1
 800841c:	4628      	mov	r0, r5
 800841e:	47b0      	blx	r6
 8008420:	1c41      	adds	r1, r0, #1
 8008422:	d1c8      	bne.n	80083b6 <__sflush_r+0x32>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c5      	beq.n	80083b6 <__sflush_r+0x32>
 800842a:	2b1d      	cmp	r3, #29
 800842c:	d001      	beq.n	8008432 <__sflush_r+0xae>
 800842e:	2b16      	cmp	r3, #22
 8008430:	d101      	bne.n	8008436 <__sflush_r+0xb2>
 8008432:	602f      	str	r7, [r5, #0]
 8008434:	e7b2      	b.n	800839c <__sflush_r+0x18>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843c:	81a3      	strh	r3, [r4, #12]
 800843e:	e7ae      	b.n	800839e <__sflush_r+0x1a>
 8008440:	690f      	ldr	r7, [r1, #16]
 8008442:	2f00      	cmp	r7, #0
 8008444:	d0aa      	beq.n	800839c <__sflush_r+0x18>
 8008446:	0793      	lsls	r3, r2, #30
 8008448:	bf18      	it	ne
 800844a:	2300      	movne	r3, #0
 800844c:	680e      	ldr	r6, [r1, #0]
 800844e:	bf08      	it	eq
 8008450:	694b      	ldreq	r3, [r1, #20]
 8008452:	1bf6      	subs	r6, r6, r7
 8008454:	600f      	str	r7, [r1, #0]
 8008456:	608b      	str	r3, [r1, #8]
 8008458:	2e00      	cmp	r6, #0
 800845a:	dd9f      	ble.n	800839c <__sflush_r+0x18>
 800845c:	4633      	mov	r3, r6
 800845e:	463a      	mov	r2, r7
 8008460:	4628      	mov	r0, r5
 8008462:	6a21      	ldr	r1, [r4, #32]
 8008464:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008468:	47e0      	blx	ip
 800846a:	2800      	cmp	r0, #0
 800846c:	dc06      	bgt.n	800847c <__sflush_r+0xf8>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	e790      	b.n	800839e <__sflush_r+0x1a>
 800847c:	4407      	add	r7, r0
 800847e:	1a36      	subs	r6, r6, r0
 8008480:	e7ea      	b.n	8008458 <__sflush_r+0xd4>
 8008482:	bf00      	nop
 8008484:	dfbffffe 	.word	0xdfbffffe

08008488 <_fflush_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	690b      	ldr	r3, [r1, #16]
 800848c:	4605      	mov	r5, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b913      	cbnz	r3, 8008498 <_fflush_r+0x10>
 8008492:	2500      	movs	r5, #0
 8008494:	4628      	mov	r0, r5
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	b118      	cbz	r0, 80084a2 <_fflush_r+0x1a>
 800849a:	6a03      	ldr	r3, [r0, #32]
 800849c:	b90b      	cbnz	r3, 80084a2 <_fflush_r+0x1a>
 800849e:	f7fe f8e1 	bl	8006664 <__sinit>
 80084a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f3      	beq.n	8008492 <_fflush_r+0xa>
 80084aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084ac:	07d0      	lsls	r0, r2, #31
 80084ae:	d404      	bmi.n	80084ba <_fflush_r+0x32>
 80084b0:	0599      	lsls	r1, r3, #22
 80084b2:	d402      	bmi.n	80084ba <_fflush_r+0x32>
 80084b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084b6:	f7fe fb24 	bl	8006b02 <__retarget_lock_acquire_recursive>
 80084ba:	4628      	mov	r0, r5
 80084bc:	4621      	mov	r1, r4
 80084be:	f7ff ff61 	bl	8008384 <__sflush_r>
 80084c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084c4:	4605      	mov	r5, r0
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d4e4      	bmi.n	8008494 <_fflush_r+0xc>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	059b      	lsls	r3, r3, #22
 80084ce:	d4e1      	bmi.n	8008494 <_fflush_r+0xc>
 80084d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084d2:	f7fe fb17 	bl	8006b04 <__retarget_lock_release_recursive>
 80084d6:	e7dd      	b.n	8008494 <_fflush_r+0xc>

080084d8 <__swhatbuf_r>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e0:	4615      	mov	r5, r2
 80084e2:	2900      	cmp	r1, #0
 80084e4:	461e      	mov	r6, r3
 80084e6:	b096      	sub	sp, #88	; 0x58
 80084e8:	da0c      	bge.n	8008504 <__swhatbuf_r+0x2c>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	2100      	movs	r1, #0
 80084ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084f2:	bf0c      	ite	eq
 80084f4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084f8:	2340      	movne	r3, #64	; 0x40
 80084fa:	2000      	movs	r0, #0
 80084fc:	6031      	str	r1, [r6, #0]
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	b016      	add	sp, #88	; 0x58
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	466a      	mov	r2, sp
 8008506:	f000 f849 	bl	800859c <_fstat_r>
 800850a:	2800      	cmp	r0, #0
 800850c:	dbed      	blt.n	80084ea <__swhatbuf_r+0x12>
 800850e:	9901      	ldr	r1, [sp, #4]
 8008510:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008514:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008518:	4259      	negs	r1, r3
 800851a:	4159      	adcs	r1, r3
 800851c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008520:	e7eb      	b.n	80084fa <__swhatbuf_r+0x22>

08008522 <__smakebuf_r>:
 8008522:	898b      	ldrh	r3, [r1, #12]
 8008524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008526:	079d      	lsls	r5, r3, #30
 8008528:	4606      	mov	r6, r0
 800852a:	460c      	mov	r4, r1
 800852c:	d507      	bpl.n	800853e <__smakebuf_r+0x1c>
 800852e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	2301      	movs	r3, #1
 8008538:	6163      	str	r3, [r4, #20]
 800853a:	b002      	add	sp, #8
 800853c:	bd70      	pop	{r4, r5, r6, pc}
 800853e:	466a      	mov	r2, sp
 8008540:	ab01      	add	r3, sp, #4
 8008542:	f7ff ffc9 	bl	80084d8 <__swhatbuf_r>
 8008546:	9900      	ldr	r1, [sp, #0]
 8008548:	4605      	mov	r5, r0
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff f9d4 	bl	80078f8 <_malloc_r>
 8008550:	b948      	cbnz	r0, 8008566 <__smakebuf_r+0x44>
 8008552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008556:	059a      	lsls	r2, r3, #22
 8008558:	d4ef      	bmi.n	800853a <__smakebuf_r+0x18>
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	f043 0302 	orr.w	r3, r3, #2
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	e7e3      	b.n	800852e <__smakebuf_r+0xc>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	6020      	str	r0, [r4, #0]
 800856a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	9b00      	ldr	r3, [sp, #0]
 8008572:	6120      	str	r0, [r4, #16]
 8008574:	6163      	str	r3, [r4, #20]
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	b15b      	cbz	r3, 8008592 <__smakebuf_r+0x70>
 800857a:	4630      	mov	r0, r6
 800857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008580:	f000 f81e 	bl	80085c0 <_isatty_r>
 8008584:	b128      	cbz	r0, 8008592 <__smakebuf_r+0x70>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f023 0303 	bic.w	r3, r3, #3
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	431d      	orrs	r5, r3
 8008596:	81a5      	strh	r5, [r4, #12]
 8008598:	e7cf      	b.n	800853a <__smakebuf_r+0x18>
	...

0800859c <_fstat_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	2300      	movs	r3, #0
 80085a0:	4d06      	ldr	r5, [pc, #24]	; (80085bc <_fstat_r+0x20>)
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7fa ff70 	bl	800348e <_fstat>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_fstat_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_fstat_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20002c54 	.word	0x20002c54

080085c0 <_isatty_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	2300      	movs	r3, #0
 80085c4:	4d05      	ldr	r5, [pc, #20]	; (80085dc <_isatty_r+0x1c>)
 80085c6:	4604      	mov	r4, r0
 80085c8:	4608      	mov	r0, r1
 80085ca:	602b      	str	r3, [r5, #0]
 80085cc:	f7fa ff6e 	bl	80034ac <_isatty>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_isatty_r+0x1a>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_isatty_r+0x1a>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	20002c54 	.word	0x20002c54

080085e0 <_sbrk_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	2300      	movs	r3, #0
 80085e4:	4d05      	ldr	r5, [pc, #20]	; (80085fc <_sbrk_r+0x1c>)
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	602b      	str	r3, [r5, #0]
 80085ec:	f7fa ff74 	bl	80034d8 <_sbrk>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_sbrk_r+0x1a>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_sbrk_r+0x1a>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20002c54 	.word	0x20002c54

08008600 <__assert_func>:
 8008600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008602:	4614      	mov	r4, r2
 8008604:	461a      	mov	r2, r3
 8008606:	4b09      	ldr	r3, [pc, #36]	; (800862c <__assert_func+0x2c>)
 8008608:	4605      	mov	r5, r0
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68d8      	ldr	r0, [r3, #12]
 800860e:	b14c      	cbz	r4, 8008624 <__assert_func+0x24>
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <__assert_func+0x30>)
 8008612:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008616:	9100      	str	r1, [sp, #0]
 8008618:	462b      	mov	r3, r5
 800861a:	4906      	ldr	r1, [pc, #24]	; (8008634 <__assert_func+0x34>)
 800861c:	f000 f842 	bl	80086a4 <fiprintf>
 8008620:	f000 f852 	bl	80086c8 <abort>
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <__assert_func+0x38>)
 8008626:	461c      	mov	r4, r3
 8008628:	e7f3      	b.n	8008612 <__assert_func+0x12>
 800862a:	bf00      	nop
 800862c:	20000068 	.word	0x20000068
 8008630:	0800a3cf 	.word	0x0800a3cf
 8008634:	0800a3dc 	.word	0x0800a3dc
 8008638:	0800a40a 	.word	0x0800a40a

0800863c <_calloc_r>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	fba1 5402 	umull	r5, r4, r1, r2
 8008642:	b934      	cbnz	r4, 8008652 <_calloc_r+0x16>
 8008644:	4629      	mov	r1, r5
 8008646:	f7ff f957 	bl	80078f8 <_malloc_r>
 800864a:	4606      	mov	r6, r0
 800864c:	b928      	cbnz	r0, 800865a <_calloc_r+0x1e>
 800864e:	4630      	mov	r0, r6
 8008650:	bd70      	pop	{r4, r5, r6, pc}
 8008652:	220c      	movs	r2, #12
 8008654:	2600      	movs	r6, #0
 8008656:	6002      	str	r2, [r0, #0]
 8008658:	e7f9      	b.n	800864e <_calloc_r+0x12>
 800865a:	462a      	mov	r2, r5
 800865c:	4621      	mov	r1, r4
 800865e:	f7fe f97d 	bl	800695c <memset>
 8008662:	e7f4      	b.n	800864e <_calloc_r+0x12>

08008664 <__ascii_mbtowc>:
 8008664:	b082      	sub	sp, #8
 8008666:	b901      	cbnz	r1, 800866a <__ascii_mbtowc+0x6>
 8008668:	a901      	add	r1, sp, #4
 800866a:	b142      	cbz	r2, 800867e <__ascii_mbtowc+0x1a>
 800866c:	b14b      	cbz	r3, 8008682 <__ascii_mbtowc+0x1e>
 800866e:	7813      	ldrb	r3, [r2, #0]
 8008670:	600b      	str	r3, [r1, #0]
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	1e10      	subs	r0, r2, #0
 8008676:	bf18      	it	ne
 8008678:	2001      	movne	r0, #1
 800867a:	b002      	add	sp, #8
 800867c:	4770      	bx	lr
 800867e:	4610      	mov	r0, r2
 8008680:	e7fb      	b.n	800867a <__ascii_mbtowc+0x16>
 8008682:	f06f 0001 	mvn.w	r0, #1
 8008686:	e7f8      	b.n	800867a <__ascii_mbtowc+0x16>

08008688 <__ascii_wctomb>:
 8008688:	4603      	mov	r3, r0
 800868a:	4608      	mov	r0, r1
 800868c:	b141      	cbz	r1, 80086a0 <__ascii_wctomb+0x18>
 800868e:	2aff      	cmp	r2, #255	; 0xff
 8008690:	d904      	bls.n	800869c <__ascii_wctomb+0x14>
 8008692:	228a      	movs	r2, #138	; 0x8a
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	4770      	bx	lr
 800869c:	2001      	movs	r0, #1
 800869e:	700a      	strb	r2, [r1, #0]
 80086a0:	4770      	bx	lr
	...

080086a4 <fiprintf>:
 80086a4:	b40e      	push	{r1, r2, r3}
 80086a6:	b503      	push	{r0, r1, lr}
 80086a8:	4601      	mov	r1, r0
 80086aa:	ab03      	add	r3, sp, #12
 80086ac:	4805      	ldr	r0, [pc, #20]	; (80086c4 <fiprintf+0x20>)
 80086ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b2:	6800      	ldr	r0, [r0, #0]
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	f7ff fd4b 	bl	8008150 <_vfiprintf_r>
 80086ba:	b002      	add	sp, #8
 80086bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c0:	b003      	add	sp, #12
 80086c2:	4770      	bx	lr
 80086c4:	20000068 	.word	0x20000068

080086c8 <abort>:
 80086c8:	2006      	movs	r0, #6
 80086ca:	b508      	push	{r3, lr}
 80086cc:	f000 f82c 	bl	8008728 <raise>
 80086d0:	2001      	movs	r0, #1
 80086d2:	f7fa feaa 	bl	800342a <_exit>

080086d6 <_raise_r>:
 80086d6:	291f      	cmp	r1, #31
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4604      	mov	r4, r0
 80086dc:	460d      	mov	r5, r1
 80086de:	d904      	bls.n	80086ea <_raise_r+0x14>
 80086e0:	2316      	movs	r3, #22
 80086e2:	6003      	str	r3, [r0, #0]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80086ec:	b112      	cbz	r2, 80086f4 <_raise_r+0x1e>
 80086ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086f2:	b94b      	cbnz	r3, 8008708 <_raise_r+0x32>
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 f831 	bl	800875c <_getpid_r>
 80086fa:	462a      	mov	r2, r5
 80086fc:	4601      	mov	r1, r0
 80086fe:	4620      	mov	r0, r4
 8008700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008704:	f000 b818 	b.w	8008738 <_kill_r>
 8008708:	2b01      	cmp	r3, #1
 800870a:	d00a      	beq.n	8008722 <_raise_r+0x4c>
 800870c:	1c59      	adds	r1, r3, #1
 800870e:	d103      	bne.n	8008718 <_raise_r+0x42>
 8008710:	2316      	movs	r3, #22
 8008712:	6003      	str	r3, [r0, #0]
 8008714:	2001      	movs	r0, #1
 8008716:	e7e7      	b.n	80086e8 <_raise_r+0x12>
 8008718:	2400      	movs	r4, #0
 800871a:	4628      	mov	r0, r5
 800871c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008720:	4798      	blx	r3
 8008722:	2000      	movs	r0, #0
 8008724:	e7e0      	b.n	80086e8 <_raise_r+0x12>
	...

08008728 <raise>:
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <raise+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f7ff bfd2 	b.w	80086d6 <_raise_r>
 8008732:	bf00      	nop
 8008734:	20000068 	.word	0x20000068

08008738 <_kill_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	2300      	movs	r3, #0
 800873c:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_kill_r+0x20>)
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	f7fa fe60 	bl	800340a <_kill>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d102      	bne.n	8008754 <_kill_r+0x1c>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	b103      	cbz	r3, 8008754 <_kill_r+0x1c>
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	bd38      	pop	{r3, r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	20002c54 	.word	0x20002c54

0800875c <_getpid_r>:
 800875c:	f7fa be4e 	b.w	80033fc <_getpid>

08008760 <pow>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	4614      	mov	r4, r2
 8008766:	461d      	mov	r5, r3
 8008768:	4680      	mov	r8, r0
 800876a:	4689      	mov	r9, r1
 800876c:	f000 f9e4 	bl	8008b38 <__ieee754_pow>
 8008770:	4622      	mov	r2, r4
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	462b      	mov	r3, r5
 8008778:	4620      	mov	r0, r4
 800877a:	4629      	mov	r1, r5
 800877c:	f7f8 f946 	bl	8000a0c <__aeabi_dcmpun>
 8008780:	bbc8      	cbnz	r0, 80087f6 <pow+0x96>
 8008782:	2200      	movs	r2, #0
 8008784:	2300      	movs	r3, #0
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f8 f90d 	bl	80009a8 <__aeabi_dcmpeq>
 800878e:	b1b8      	cbz	r0, 80087c0 <pow+0x60>
 8008790:	2200      	movs	r2, #0
 8008792:	2300      	movs	r3, #0
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f7f8 f906 	bl	80009a8 <__aeabi_dcmpeq>
 800879c:	2800      	cmp	r0, #0
 800879e:	d141      	bne.n	8008824 <pow+0xc4>
 80087a0:	4620      	mov	r0, r4
 80087a2:	4629      	mov	r1, r5
 80087a4:	f000 f868 	bl	8008878 <finite>
 80087a8:	b328      	cbz	r0, 80087f6 <pow+0x96>
 80087aa:	2200      	movs	r2, #0
 80087ac:	2300      	movs	r3, #0
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f8 f903 	bl	80009bc <__aeabi_dcmplt>
 80087b6:	b1f0      	cbz	r0, 80087f6 <pow+0x96>
 80087b8:	f7fe f978 	bl	8006aac <__errno>
 80087bc:	2322      	movs	r3, #34	; 0x22
 80087be:	e019      	b.n	80087f4 <pow+0x94>
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f000 f858 	bl	8008878 <finite>
 80087c8:	b9c8      	cbnz	r0, 80087fe <pow+0x9e>
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f000 f853 	bl	8008878 <finite>
 80087d2:	b1a0      	cbz	r0, 80087fe <pow+0x9e>
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f000 f84e 	bl	8008878 <finite>
 80087dc:	b178      	cbz	r0, 80087fe <pow+0x9e>
 80087de:	4632      	mov	r2, r6
 80087e0:	463b      	mov	r3, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7f8 f911 	bl	8000a0c <__aeabi_dcmpun>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0e4      	beq.n	80087b8 <pow+0x58>
 80087ee:	f7fe f95d 	bl	8006aac <__errno>
 80087f2:	2321      	movs	r3, #33	; 0x21
 80087f4:	6003      	str	r3, [r0, #0]
 80087f6:	4630      	mov	r0, r6
 80087f8:	4639      	mov	r1, r7
 80087fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fe:	2200      	movs	r2, #0
 8008800:	2300      	movs	r3, #0
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f8 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800880a:	2800      	cmp	r0, #0
 800880c:	d0f3      	beq.n	80087f6 <pow+0x96>
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f000 f831 	bl	8008878 <finite>
 8008816:	2800      	cmp	r0, #0
 8008818:	d0ed      	beq.n	80087f6 <pow+0x96>
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f000 f82b 	bl	8008878 <finite>
 8008822:	e7c8      	b.n	80087b6 <pow+0x56>
 8008824:	2600      	movs	r6, #0
 8008826:	4f01      	ldr	r7, [pc, #4]	; (800882c <pow+0xcc>)
 8008828:	e7e5      	b.n	80087f6 <pow+0x96>
 800882a:	bf00      	nop
 800882c:	3ff00000 	.word	0x3ff00000

08008830 <sqrt>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	f000 f825 	bl	8008884 <__ieee754_sqrt>
 800883a:	4632      	mov	r2, r6
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	463b      	mov	r3, r7
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	f7f8 f8e1 	bl	8000a0c <__aeabi_dcmpun>
 800884a:	b990      	cbnz	r0, 8008872 <sqrt+0x42>
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 f8b2 	bl	80009bc <__aeabi_dcmplt>
 8008858:	b158      	cbz	r0, 8008872 <sqrt+0x42>
 800885a:	f7fe f927 	bl	8006aac <__errno>
 800885e:	2321      	movs	r3, #33	; 0x21
 8008860:	2200      	movs	r2, #0
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2300      	movs	r3, #0
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f7f7 ff5f 	bl	800072c <__aeabi_ddiv>
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	4620      	mov	r0, r4
 8008874:	4629      	mov	r1, r5
 8008876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008878 <finite>:
 8008878:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800887c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008880:	0fc0      	lsrs	r0, r0, #31
 8008882:	4770      	bx	lr

08008884 <__ieee754_sqrt>:
 8008884:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8008a28 <__ieee754_sqrt+0x1a4>
 8008888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008890:	460b      	mov	r3, r1
 8008892:	4606      	mov	r6, r0
 8008894:	460d      	mov	r5, r1
 8008896:	460a      	mov	r2, r1
 8008898:	4604      	mov	r4, r0
 800889a:	d10e      	bne.n	80088ba <__ieee754_sqrt+0x36>
 800889c:	4602      	mov	r2, r0
 800889e:	f7f7 fe1b 	bl	80004d8 <__aeabi_dmul>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4630      	mov	r0, r6
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fc5f 	bl	800016c <__adddf3>
 80088ae:	4606      	mov	r6, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	4630      	mov	r0, r6
 80088b4:	4629      	mov	r1, r5
 80088b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	2900      	cmp	r1, #0
 80088bc:	dc0d      	bgt.n	80088da <__ieee754_sqrt+0x56>
 80088be:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80088c2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80088c6:	d0f4      	beq.n	80088b2 <__ieee754_sqrt+0x2e>
 80088c8:	b139      	cbz	r1, 80088da <__ieee754_sqrt+0x56>
 80088ca:	4602      	mov	r2, r0
 80088cc:	f7f7 fc4c 	bl	8000168 <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	f7f7 ff2a 	bl	800072c <__aeabi_ddiv>
 80088d8:	e7e9      	b.n	80088ae <__ieee754_sqrt+0x2a>
 80088da:	1512      	asrs	r2, r2, #20
 80088dc:	f000 8089 	beq.w	80089f2 <__ieee754_sqrt+0x16e>
 80088e0:	2500      	movs	r5, #0
 80088e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088e6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80088ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ee:	07d2      	lsls	r2, r2, #31
 80088f0:	bf5c      	itt	pl
 80088f2:	005b      	lslpl	r3, r3, #1
 80088f4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80088f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80088fc:	bf58      	it	pl
 80088fe:	0064      	lslpl	r4, r4, #1
 8008900:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008904:	0062      	lsls	r2, r4, #1
 8008906:	2016      	movs	r0, #22
 8008908:	4629      	mov	r1, r5
 800890a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800890e:	1076      	asrs	r6, r6, #1
 8008910:	190f      	adds	r7, r1, r4
 8008912:	429f      	cmp	r7, r3
 8008914:	bfde      	ittt	le
 8008916:	1bdb      	suble	r3, r3, r7
 8008918:	1939      	addle	r1, r7, r4
 800891a:	192d      	addle	r5, r5, r4
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	3801      	subs	r0, #1
 8008920:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008924:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008928:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800892c:	d1f0      	bne.n	8008910 <__ieee754_sqrt+0x8c>
 800892e:	4604      	mov	r4, r0
 8008930:	2720      	movs	r7, #32
 8008932:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008936:	428b      	cmp	r3, r1
 8008938:	eb0c 0e00 	add.w	lr, ip, r0
 800893c:	dc02      	bgt.n	8008944 <__ieee754_sqrt+0xc0>
 800893e:	d113      	bne.n	8008968 <__ieee754_sqrt+0xe4>
 8008940:	4596      	cmp	lr, r2
 8008942:	d811      	bhi.n	8008968 <__ieee754_sqrt+0xe4>
 8008944:	f1be 0f00 	cmp.w	lr, #0
 8008948:	eb0e 000c 	add.w	r0, lr, ip
 800894c:	da56      	bge.n	80089fc <__ieee754_sqrt+0x178>
 800894e:	2800      	cmp	r0, #0
 8008950:	db54      	blt.n	80089fc <__ieee754_sqrt+0x178>
 8008952:	f101 0801 	add.w	r8, r1, #1
 8008956:	1a5b      	subs	r3, r3, r1
 8008958:	4641      	mov	r1, r8
 800895a:	4596      	cmp	lr, r2
 800895c:	bf88      	it	hi
 800895e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008962:	eba2 020e 	sub.w	r2, r2, lr
 8008966:	4464      	add	r4, ip
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	3f01      	subs	r7, #1
 800896c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008970:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008974:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008978:	d1dd      	bne.n	8008936 <__ieee754_sqrt+0xb2>
 800897a:	4313      	orrs	r3, r2
 800897c:	d01b      	beq.n	80089b6 <__ieee754_sqrt+0x132>
 800897e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008a2c <__ieee754_sqrt+0x1a8>
 8008982:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008a30 <__ieee754_sqrt+0x1ac>
 8008986:	e9da 0100 	ldrd	r0, r1, [sl]
 800898a:	e9db 2300 	ldrd	r2, r3, [fp]
 800898e:	f7f7 fbeb 	bl	8000168 <__aeabi_dsub>
 8008992:	e9da 8900 	ldrd	r8, r9, [sl]
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4640      	mov	r0, r8
 800899c:	4649      	mov	r1, r9
 800899e:	f7f8 f817 	bl	80009d0 <__aeabi_dcmple>
 80089a2:	b140      	cbz	r0, 80089b6 <__ieee754_sqrt+0x132>
 80089a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80089a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80089ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80089b0:	d126      	bne.n	8008a00 <__ieee754_sqrt+0x17c>
 80089b2:	463c      	mov	r4, r7
 80089b4:	3501      	adds	r5, #1
 80089b6:	106b      	asrs	r3, r5, #1
 80089b8:	0864      	lsrs	r4, r4, #1
 80089ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089be:	07ea      	lsls	r2, r5, #31
 80089c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089c4:	bf48      	it	mi
 80089c6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80089ca:	4620      	mov	r0, r4
 80089cc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80089d0:	e76d      	b.n	80088ae <__ieee754_sqrt+0x2a>
 80089d2:	0ae3      	lsrs	r3, r4, #11
 80089d4:	3915      	subs	r1, #21
 80089d6:	0564      	lsls	r4, r4, #21
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0fa      	beq.n	80089d2 <__ieee754_sqrt+0x14e>
 80089dc:	02d8      	lsls	r0, r3, #11
 80089de:	d50a      	bpl.n	80089f6 <__ieee754_sqrt+0x172>
 80089e0:	f1c2 0020 	rsb	r0, r2, #32
 80089e4:	fa24 f000 	lsr.w	r0, r4, r0
 80089e8:	1e55      	subs	r5, r2, #1
 80089ea:	4094      	lsls	r4, r2
 80089ec:	4303      	orrs	r3, r0
 80089ee:	1b4a      	subs	r2, r1, r5
 80089f0:	e776      	b.n	80088e0 <__ieee754_sqrt+0x5c>
 80089f2:	4611      	mov	r1, r2
 80089f4:	e7f0      	b.n	80089d8 <__ieee754_sqrt+0x154>
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	3201      	adds	r2, #1
 80089fa:	e7ef      	b.n	80089dc <__ieee754_sqrt+0x158>
 80089fc:	4688      	mov	r8, r1
 80089fe:	e7aa      	b.n	8008956 <__ieee754_sqrt+0xd2>
 8008a00:	f7f7 fbb4 	bl	800016c <__adddf3>
 8008a04:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f7 ffd4 	bl	80009bc <__aeabi_dcmplt>
 8008a14:	b120      	cbz	r0, 8008a20 <__ieee754_sqrt+0x19c>
 8008a16:	1ca1      	adds	r1, r4, #2
 8008a18:	bf08      	it	eq
 8008a1a:	3501      	addeq	r5, #1
 8008a1c:	3402      	adds	r4, #2
 8008a1e:	e7ca      	b.n	80089b6 <__ieee754_sqrt+0x132>
 8008a20:	3401      	adds	r4, #1
 8008a22:	f024 0401 	bic.w	r4, r4, #1
 8008a26:	e7c6      	b.n	80089b6 <__ieee754_sqrt+0x132>
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	200001d8 	.word	0x200001d8
 8008a30:	200001e0 	.word	0x200001e0
 8008a34:	00000000 	.word	0x00000000

08008a38 <floor>:
 8008a38:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a40:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008a44:	2e13      	cmp	r6, #19
 8008a46:	460b      	mov	r3, r1
 8008a48:	4607      	mov	r7, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	dc32      	bgt.n	8008ab6 <floor+0x7e>
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	da14      	bge.n	8008a7e <floor+0x46>
 8008a54:	a334      	add	r3, pc, #208	; (adr r3, 8008b28 <floor+0xf0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fb87 	bl	800016c <__adddf3>
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2300      	movs	r3, #0
 8008a62:	f7f7 ffc9 	bl	80009f8 <__aeabi_dcmpgt>
 8008a66:	b138      	cbz	r0, 8008a78 <floor+0x40>
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	da56      	bge.n	8008b1a <floor+0xe2>
 8008a6c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008a70:	4325      	orrs	r5, r4
 8008a72:	d055      	beq.n	8008b20 <floor+0xe8>
 8008a74:	2500      	movs	r5, #0
 8008a76:	4c2e      	ldr	r4, [pc, #184]	; (8008b30 <floor+0xf8>)
 8008a78:	4623      	mov	r3, r4
 8008a7a:	462f      	mov	r7, r5
 8008a7c:	e025      	b.n	8008aca <floor+0x92>
 8008a7e:	4a2d      	ldr	r2, [pc, #180]	; (8008b34 <floor+0xfc>)
 8008a80:	fa42 f806 	asr.w	r8, r2, r6
 8008a84:	ea01 0208 	and.w	r2, r1, r8
 8008a88:	4302      	orrs	r2, r0
 8008a8a:	d01e      	beq.n	8008aca <floor+0x92>
 8008a8c:	a326      	add	r3, pc, #152	; (adr r3, 8008b28 <floor+0xf0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fb6b 	bl	800016c <__adddf3>
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f7 ffad 	bl	80009f8 <__aeabi_dcmpgt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0ea      	beq.n	8008a78 <floor+0x40>
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	bfbe      	ittt	lt
 8008aa6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008aaa:	4133      	asrlt	r3, r6
 8008aac:	18e4      	addlt	r4, r4, r3
 8008aae:	2500      	movs	r5, #0
 8008ab0:	ea24 0408 	bic.w	r4, r4, r8
 8008ab4:	e7e0      	b.n	8008a78 <floor+0x40>
 8008ab6:	2e33      	cmp	r6, #51	; 0x33
 8008ab8:	dd0b      	ble.n	8008ad2 <floor+0x9a>
 8008aba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008abe:	d104      	bne.n	8008aca <floor+0x92>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	f7f7 fb53 	bl	800016c <__adddf3>
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4638      	mov	r0, r7
 8008acc:	4619      	mov	r1, r3
 8008ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	f04f 38ff 	mov.w	r8, #4294967295
 8008ad6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008ada:	fa28 f802 	lsr.w	r8, r8, r2
 8008ade:	ea10 0f08 	tst.w	r0, r8
 8008ae2:	d0f2      	beq.n	8008aca <floor+0x92>
 8008ae4:	a310      	add	r3, pc, #64	; (adr r3, 8008b28 <floor+0xf0>)
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	f7f7 fb3f 	bl	800016c <__adddf3>
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	f7f7 ff81 	bl	80009f8 <__aeabi_dcmpgt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d0be      	beq.n	8008a78 <floor+0x40>
 8008afa:	2c00      	cmp	r4, #0
 8008afc:	da0a      	bge.n	8008b14 <floor+0xdc>
 8008afe:	2e14      	cmp	r6, #20
 8008b00:	d101      	bne.n	8008b06 <floor+0xce>
 8008b02:	3401      	adds	r4, #1
 8008b04:	e006      	b.n	8008b14 <floor+0xdc>
 8008b06:	2301      	movs	r3, #1
 8008b08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008b0c:	40b3      	lsls	r3, r6
 8008b0e:	441d      	add	r5, r3
 8008b10:	42af      	cmp	r7, r5
 8008b12:	d8f6      	bhi.n	8008b02 <floor+0xca>
 8008b14:	ea25 0508 	bic.w	r5, r5, r8
 8008b18:	e7ae      	b.n	8008a78 <floor+0x40>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	462c      	mov	r4, r5
 8008b1e:	e7ab      	b.n	8008a78 <floor+0x40>
 8008b20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008b24:	e7a8      	b.n	8008a78 <floor+0x40>
 8008b26:	bf00      	nop
 8008b28:	8800759c 	.word	0x8800759c
 8008b2c:	7e37e43c 	.word	0x7e37e43c
 8008b30:	bff00000 	.word	0xbff00000
 8008b34:	000fffff 	.word	0x000fffff

08008b38 <__ieee754_pow>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	b093      	sub	sp, #76	; 0x4c
 8008b3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b42:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008b46:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	ea56 0102 	orrs.w	r1, r6, r2
 8008b50:	4680      	mov	r8, r0
 8008b52:	d111      	bne.n	8008b78 <__ieee754_pow+0x40>
 8008b54:	1803      	adds	r3, r0, r0
 8008b56:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8008b5a:	4152      	adcs	r2, r2
 8008b5c:	4299      	cmp	r1, r3
 8008b5e:	4b82      	ldr	r3, [pc, #520]	; (8008d68 <__ieee754_pow+0x230>)
 8008b60:	4193      	sbcs	r3, r2
 8008b62:	f080 84ba 	bcs.w	80094da <__ieee754_pow+0x9a2>
 8008b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f7 fafd 	bl	800016c <__adddf3>
 8008b72:	4683      	mov	fp, r0
 8008b74:	468c      	mov	ip, r1
 8008b76:	e06f      	b.n	8008c58 <__ieee754_pow+0x120>
 8008b78:	4b7c      	ldr	r3, [pc, #496]	; (8008d6c <__ieee754_pow+0x234>)
 8008b7a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8008b7e:	429c      	cmp	r4, r3
 8008b80:	464d      	mov	r5, r9
 8008b82:	4682      	mov	sl, r0
 8008b84:	dc06      	bgt.n	8008b94 <__ieee754_pow+0x5c>
 8008b86:	d101      	bne.n	8008b8c <__ieee754_pow+0x54>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1ec      	bne.n	8008b66 <__ieee754_pow+0x2e>
 8008b8c:	429e      	cmp	r6, r3
 8008b8e:	dc01      	bgt.n	8008b94 <__ieee754_pow+0x5c>
 8008b90:	d10f      	bne.n	8008bb2 <__ieee754_pow+0x7a>
 8008b92:	b172      	cbz	r2, 8008bb2 <__ieee754_pow+0x7a>
 8008b94:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008b98:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008b9c:	ea55 050a 	orrs.w	r5, r5, sl
 8008ba0:	d1e1      	bne.n	8008b66 <__ieee754_pow+0x2e>
 8008ba2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008ba6:	18db      	adds	r3, r3, r3
 8008ba8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008bac:	4152      	adcs	r2, r2
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	e7d5      	b.n	8008b5e <__ieee754_pow+0x26>
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	da39      	bge.n	8008c2a <__ieee754_pow+0xf2>
 8008bb6:	4b6e      	ldr	r3, [pc, #440]	; (8008d70 <__ieee754_pow+0x238>)
 8008bb8:	429e      	cmp	r6, r3
 8008bba:	dc52      	bgt.n	8008c62 <__ieee754_pow+0x12a>
 8008bbc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008bc0:	429e      	cmp	r6, r3
 8008bc2:	f340 849d 	ble.w	8009500 <__ieee754_pow+0x9c8>
 8008bc6:	1533      	asrs	r3, r6, #20
 8008bc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008bcc:	2b14      	cmp	r3, #20
 8008bce:	dd0f      	ble.n	8008bf0 <__ieee754_pow+0xb8>
 8008bd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008bd4:	fa22 f103 	lsr.w	r1, r2, r3
 8008bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	f040 848f 	bne.w	8009500 <__ieee754_pow+0x9c8>
 8008be2:	f001 0101 	and.w	r1, r1, #1
 8008be6:	f1c1 0302 	rsb	r3, r1, #2
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	b182      	cbz	r2, 8008c10 <__ieee754_pow+0xd8>
 8008bee:	e05d      	b.n	8008cac <__ieee754_pow+0x174>
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	d159      	bne.n	8008ca8 <__ieee754_pow+0x170>
 8008bf4:	f1c3 0314 	rsb	r3, r3, #20
 8008bf8:	fa46 f103 	asr.w	r1, r6, r3
 8008bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	f040 847a 	bne.w	80094fa <__ieee754_pow+0x9c2>
 8008c06:	f001 0101 	and.w	r1, r1, #1
 8008c0a:	f1c1 0302 	rsb	r3, r1, #2
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	4b58      	ldr	r3, [pc, #352]	; (8008d74 <__ieee754_pow+0x23c>)
 8008c12:	429e      	cmp	r6, r3
 8008c14:	d132      	bne.n	8008c7c <__ieee754_pow+0x144>
 8008c16:	2f00      	cmp	r7, #0
 8008c18:	f280 846b 	bge.w	80094f2 <__ieee754_pow+0x9ba>
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	464b      	mov	r3, r9
 8008c20:	2000      	movs	r0, #0
 8008c22:	4954      	ldr	r1, [pc, #336]	; (8008d74 <__ieee754_pow+0x23c>)
 8008c24:	f7f7 fd82 	bl	800072c <__aeabi_ddiv>
 8008c28:	e7a3      	b.n	8008b72 <__ieee754_pow+0x3a>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	d13c      	bne.n	8008cac <__ieee754_pow+0x174>
 8008c32:	4b4e      	ldr	r3, [pc, #312]	; (8008d6c <__ieee754_pow+0x234>)
 8008c34:	429e      	cmp	r6, r3
 8008c36:	d1eb      	bne.n	8008c10 <__ieee754_pow+0xd8>
 8008c38:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c3c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c40:	ea53 030a 	orrs.w	r3, r3, sl
 8008c44:	f000 8449 	beq.w	80094da <__ieee754_pow+0x9a2>
 8008c48:	4b4b      	ldr	r3, [pc, #300]	; (8008d78 <__ieee754_pow+0x240>)
 8008c4a:	429c      	cmp	r4, r3
 8008c4c:	dd0b      	ble.n	8008c66 <__ieee754_pow+0x12e>
 8008c4e:	2f00      	cmp	r7, #0
 8008c50:	f2c0 8449 	blt.w	80094e6 <__ieee754_pow+0x9ae>
 8008c54:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008c58:	4658      	mov	r0, fp
 8008c5a:	4661      	mov	r1, ip
 8008c5c:	b013      	add	sp, #76	; 0x4c
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	2302      	movs	r3, #2
 8008c64:	e7e2      	b.n	8008c2c <__ieee754_pow+0xf4>
 8008c66:	2f00      	cmp	r7, #0
 8008c68:	f04f 0b00 	mov.w	fp, #0
 8008c6c:	f04f 0c00 	mov.w	ip, #0
 8008c70:	daf2      	bge.n	8008c58 <__ieee754_pow+0x120>
 8008c72:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008c76:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8008c7a:	e7ed      	b.n	8008c58 <__ieee754_pow+0x120>
 8008c7c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008c80:	d106      	bne.n	8008c90 <__ieee754_pow+0x158>
 8008c82:	4642      	mov	r2, r8
 8008c84:	464b      	mov	r3, r9
 8008c86:	4640      	mov	r0, r8
 8008c88:	4649      	mov	r1, r9
 8008c8a:	f7f7 fc25 	bl	80004d8 <__aeabi_dmul>
 8008c8e:	e770      	b.n	8008b72 <__ieee754_pow+0x3a>
 8008c90:	4b3a      	ldr	r3, [pc, #232]	; (8008d7c <__ieee754_pow+0x244>)
 8008c92:	429f      	cmp	r7, r3
 8008c94:	d10a      	bne.n	8008cac <__ieee754_pow+0x174>
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	db08      	blt.n	8008cac <__ieee754_pow+0x174>
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	b013      	add	sp, #76	; 0x4c
 8008ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	f7ff bdee 	b.w	8008884 <__ieee754_sqrt>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f000 fc58 	bl	8009564 <fabs>
 8008cb4:	4683      	mov	fp, r0
 8008cb6:	468c      	mov	ip, r1
 8008cb8:	f1ba 0f00 	cmp.w	sl, #0
 8008cbc:	d128      	bne.n	8008d10 <__ieee754_pow+0x1d8>
 8008cbe:	b124      	cbz	r4, 8008cca <__ieee754_pow+0x192>
 8008cc0:	4b2c      	ldr	r3, [pc, #176]	; (8008d74 <__ieee754_pow+0x23c>)
 8008cc2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d122      	bne.n	8008d10 <__ieee754_pow+0x1d8>
 8008cca:	2f00      	cmp	r7, #0
 8008ccc:	da07      	bge.n	8008cde <__ieee754_pow+0x1a6>
 8008cce:	465a      	mov	r2, fp
 8008cd0:	4663      	mov	r3, ip
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	4927      	ldr	r1, [pc, #156]	; (8008d74 <__ieee754_pow+0x23c>)
 8008cd6:	f7f7 fd29 	bl	800072c <__aeabi_ddiv>
 8008cda:	4683      	mov	fp, r0
 8008cdc:	468c      	mov	ip, r1
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	daba      	bge.n	8008c58 <__ieee754_pow+0x120>
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ce8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008cec:	431c      	orrs	r4, r3
 8008cee:	d108      	bne.n	8008d02 <__ieee754_pow+0x1ca>
 8008cf0:	465a      	mov	r2, fp
 8008cf2:	4663      	mov	r3, ip
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	4661      	mov	r1, ip
 8008cf8:	f7f7 fa36 	bl	8000168 <__aeabi_dsub>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	e790      	b.n	8008c24 <__ieee754_pow+0xec>
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d1a7      	bne.n	8008c58 <__ieee754_pow+0x120>
 8008d08:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8008d0c:	469c      	mov	ip, r3
 8008d0e:	e7a3      	b.n	8008c58 <__ieee754_pow+0x120>
 8008d10:	0feb      	lsrs	r3, r5, #31
 8008d12:	3b01      	subs	r3, #1
 8008d14:	930c      	str	r3, [sp, #48]	; 0x30
 8008d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d18:	9b00      	ldr	r3, [sp, #0]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	d104      	bne.n	8008d28 <__ieee754_pow+0x1f0>
 8008d1e:	4642      	mov	r2, r8
 8008d20:	464b      	mov	r3, r9
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	e7e7      	b.n	8008cf8 <__ieee754_pow+0x1c0>
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <__ieee754_pow+0x248>)
 8008d2a:	429e      	cmp	r6, r3
 8008d2c:	f340 80f6 	ble.w	8008f1c <__ieee754_pow+0x3e4>
 8008d30:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d34:	429e      	cmp	r6, r3
 8008d36:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <__ieee754_pow+0x240>)
 8008d38:	dd09      	ble.n	8008d4e <__ieee754_pow+0x216>
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	dc0c      	bgt.n	8008d58 <__ieee754_pow+0x220>
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	da0c      	bge.n	8008d5c <__ieee754_pow+0x224>
 8008d42:	2000      	movs	r0, #0
 8008d44:	b013      	add	sp, #76	; 0x4c
 8008d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4a:	f000 bcb2 	b.w	80096b2 <__math_oflow>
 8008d4e:	429c      	cmp	r4, r3
 8008d50:	dbf5      	blt.n	8008d3e <__ieee754_pow+0x206>
 8008d52:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <__ieee754_pow+0x23c>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	dd15      	ble.n	8008d84 <__ieee754_pow+0x24c>
 8008d58:	2f00      	cmp	r7, #0
 8008d5a:	dcf2      	bgt.n	8008d42 <__ieee754_pow+0x20a>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	b013      	add	sp, #76	; 0x4c
 8008d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	f000 bca0 	b.w	80096a8 <__math_uflow>
 8008d68:	fff00000 	.word	0xfff00000
 8008d6c:	7ff00000 	.word	0x7ff00000
 8008d70:	433fffff 	.word	0x433fffff
 8008d74:	3ff00000 	.word	0x3ff00000
 8008d78:	3fefffff 	.word	0x3fefffff
 8008d7c:	3fe00000 	.word	0x3fe00000
 8008d80:	41e00000 	.word	0x41e00000
 8008d84:	4661      	mov	r1, ip
 8008d86:	2200      	movs	r2, #0
 8008d88:	4658      	mov	r0, fp
 8008d8a:	4b5f      	ldr	r3, [pc, #380]	; (8008f08 <__ieee754_pow+0x3d0>)
 8008d8c:	f7f7 f9ec 	bl	8000168 <__aeabi_dsub>
 8008d90:	a355      	add	r3, pc, #340	; (adr r3, 8008ee8 <__ieee754_pow+0x3b0>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	f7f7 fb9d 	bl	80004d8 <__aeabi_dmul>
 8008d9e:	a354      	add	r3, pc, #336	; (adr r3, 8008ef0 <__ieee754_pow+0x3b8>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 fb94 	bl	80004d8 <__aeabi_dmul>
 8008db0:	2200      	movs	r2, #0
 8008db2:	4682      	mov	sl, r0
 8008db4:	468b      	mov	fp, r1
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	4b54      	ldr	r3, [pc, #336]	; (8008f0c <__ieee754_pow+0x3d4>)
 8008dbc:	f7f7 fb8c 	bl	80004d8 <__aeabi_dmul>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	a14c      	add	r1, pc, #304	; (adr r1, 8008ef8 <__ieee754_pow+0x3c0>)
 8008dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dca:	f7f7 f9cd 	bl	8000168 <__aeabi_dsub>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	f7f7 fb81 	bl	80004d8 <__aeabi_dmul>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	2000      	movs	r0, #0
 8008ddc:	494c      	ldr	r1, [pc, #304]	; (8008f10 <__ieee754_pow+0x3d8>)
 8008dde:	f7f7 f9c3 	bl	8000168 <__aeabi_dsub>
 8008de2:	4622      	mov	r2, r4
 8008de4:	462b      	mov	r3, r5
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fb73 	bl	80004d8 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4640      	mov	r0, r8
 8008df8:	4649      	mov	r1, r9
 8008dfa:	f7f7 fb6d 	bl	80004d8 <__aeabi_dmul>
 8008dfe:	a340      	add	r3, pc, #256	; (adr r3, 8008f00 <__ieee754_pow+0x3c8>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f7f7 fb68 	bl	80004d8 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4650      	mov	r0, sl
 8008e0e:	4659      	mov	r1, fp
 8008e10:	f7f7 f9aa 	bl	8000168 <__aeabi_dsub>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 f9a4 	bl	800016c <__adddf3>
 8008e24:	2000      	movs	r0, #0
 8008e26:	4632      	mov	r2, r6
 8008e28:	463b      	mov	r3, r7
 8008e2a:	4682      	mov	sl, r0
 8008e2c:	468b      	mov	fp, r1
 8008e2e:	f7f7 f99b 	bl	8000168 <__aeabi_dsub>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4620      	mov	r0, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7f7 f995 	bl	8000168 <__aeabi_dsub>
 8008e3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e42:	9b00      	ldr	r3, [sp, #0]
 8008e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e46:	3b01      	subs	r3, #1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f04f 0600 	mov.w	r6, #0
 8008e4e:	f04f 0200 	mov.w	r2, #0
 8008e52:	bf0c      	ite	eq
 8008e54:	4b2f      	ldreq	r3, [pc, #188]	; (8008f14 <__ieee754_pow+0x3dc>)
 8008e56:	4b2c      	ldrne	r3, [pc, #176]	; (8008f08 <__ieee754_pow+0x3d0>)
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e60:	e9cd 2300 	strd	r2, r3, [sp]
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	f7f7 f97e 	bl	8000168 <__aeabi_dsub>
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	465b      	mov	r3, fp
 8008e70:	f7f7 fb32 	bl	80004d8 <__aeabi_dmul>
 8008e74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4689      	mov	r9, r1
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fb2a 	bl	80004d8 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	f7f7 f96e 	bl	800016c <__adddf3>
 8008e90:	4632      	mov	r2, r6
 8008e92:	463b      	mov	r3, r7
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	4650      	mov	r0, sl
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	f7f7 fb1c 	bl	80004d8 <__aeabi_dmul>
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	4640      	mov	r0, r8
 8008eac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008eb0:	f7f7 f95c 	bl	800016c <__adddf3>
 8008eb4:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <__ieee754_pow+0x3e0>)
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	4299      	cmp	r1, r3
 8008eba:	460f      	mov	r7, r1
 8008ebc:	460e      	mov	r6, r1
 8008ebe:	f340 82e7 	ble.w	8009490 <__ieee754_pow+0x958>
 8008ec2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008ec6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008eca:	4303      	orrs	r3, r0
 8008ecc:	f000 81e2 	beq.w	8009294 <__ieee754_pow+0x75c>
 8008ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f7f7 fd70 	bl	80009bc <__aeabi_dcmplt>
 8008edc:	3800      	subs	r0, #0
 8008ede:	bf18      	it	ne
 8008ee0:	2001      	movne	r0, #1
 8008ee2:	e72f      	b.n	8008d44 <__ieee754_pow+0x20c>
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	60000000 	.word	0x60000000
 8008eec:	3ff71547 	.word	0x3ff71547
 8008ef0:	f85ddf44 	.word	0xf85ddf44
 8008ef4:	3e54ae0b 	.word	0x3e54ae0b
 8008ef8:	55555555 	.word	0x55555555
 8008efc:	3fd55555 	.word	0x3fd55555
 8008f00:	652b82fe 	.word	0x652b82fe
 8008f04:	3ff71547 	.word	0x3ff71547
 8008f08:	3ff00000 	.word	0x3ff00000
 8008f0c:	3fd00000 	.word	0x3fd00000
 8008f10:	3fe00000 	.word	0x3fe00000
 8008f14:	bff00000 	.word	0xbff00000
 8008f18:	408fffff 	.word	0x408fffff
 8008f1c:	4bd4      	ldr	r3, [pc, #848]	; (8009270 <__ieee754_pow+0x738>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	402b      	ands	r3, r5
 8008f22:	b943      	cbnz	r3, 8008f36 <__ieee754_pow+0x3fe>
 8008f24:	4658      	mov	r0, fp
 8008f26:	4661      	mov	r1, ip
 8008f28:	4bd2      	ldr	r3, [pc, #840]	; (8009274 <__ieee754_pow+0x73c>)
 8008f2a:	f7f7 fad5 	bl	80004d8 <__aeabi_dmul>
 8008f2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008f32:	4683      	mov	fp, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	1523      	asrs	r3, r4, #20
 8008f38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f3c:	4413      	add	r3, r2
 8008f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f40:	4bcd      	ldr	r3, [pc, #820]	; (8009278 <__ieee754_pow+0x740>)
 8008f42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f50:	dd08      	ble.n	8008f64 <__ieee754_pow+0x42c>
 8008f52:	4bca      	ldr	r3, [pc, #808]	; (800927c <__ieee754_pow+0x744>)
 8008f54:	429c      	cmp	r4, r3
 8008f56:	f340 8164 	ble.w	8009222 <__ieee754_pow+0x6ea>
 8008f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f5c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008f60:	3301      	adds	r3, #1
 8008f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f64:	2600      	movs	r6, #0
 8008f66:	00f3      	lsls	r3, r6, #3
 8008f68:	930d      	str	r3, [sp, #52]	; 0x34
 8008f6a:	4bc5      	ldr	r3, [pc, #788]	; (8009280 <__ieee754_pow+0x748>)
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f76:	4629      	mov	r1, r5
 8008f78:	461a      	mov	r2, r3
 8008f7a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008f7e:	4623      	mov	r3, r4
 8008f80:	f7f7 f8f2 	bl	8000168 <__aeabi_dsub>
 8008f84:	46da      	mov	sl, fp
 8008f86:	462b      	mov	r3, r5
 8008f88:	4652      	mov	r2, sl
 8008f8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008f8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f92:	f7f7 f8eb 	bl	800016c <__adddf3>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	49b9      	ldr	r1, [pc, #740]	; (8009284 <__ieee754_pow+0x74c>)
 8008f9e:	f7f7 fbc5 	bl	800072c <__aeabi_ddiv>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008faa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fae:	f7f7 fa93 	bl	80004d8 <__aeabi_dmul>
 8008fb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008fb6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008fba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	46ab      	mov	fp, r5
 8008fc4:	106d      	asrs	r5, r5, #1
 8008fc6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008fd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fd4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4614      	mov	r4, r2
 8008fde:	461d      	mov	r5, r3
 8008fe0:	f7f7 fa7a 	bl	80004d8 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fec:	f7f7 f8bc 	bl	8000168 <__aeabi_dsub>
 8008ff0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	460f      	mov	r7, r1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7f7 f8b4 	bl	8000168 <__aeabi_dsub>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4650      	mov	r0, sl
 8009006:	4659      	mov	r1, fp
 8009008:	f7f7 f8ae 	bl	8000168 <__aeabi_dsub>
 800900c:	4642      	mov	r2, r8
 800900e:	464b      	mov	r3, r9
 8009010:	f7f7 fa62 	bl	80004d8 <__aeabi_dmul>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4630      	mov	r0, r6
 800901a:	4639      	mov	r1, r7
 800901c:	f7f7 f8a4 	bl	8000168 <__aeabi_dsub>
 8009020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009024:	f7f7 fa58 	bl	80004d8 <__aeabi_dmul>
 8009028:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800902c:	4682      	mov	sl, r0
 800902e:	468b      	mov	fp, r1
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	f7f7 fa50 	bl	80004d8 <__aeabi_dmul>
 8009038:	a37b      	add	r3, pc, #492	; (adr r3, 8009228 <__ieee754_pow+0x6f0>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	4604      	mov	r4, r0
 8009040:	460d      	mov	r5, r1
 8009042:	f7f7 fa49 	bl	80004d8 <__aeabi_dmul>
 8009046:	a37a      	add	r3, pc, #488	; (adr r3, 8009230 <__ieee754_pow+0x6f8>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 f88e 	bl	800016c <__adddf3>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	a377      	add	r3, pc, #476	; (adr r3, 8009238 <__ieee754_pow+0x700>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	f7f7 f885 	bl	800016c <__adddf3>
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	f7f7 fa37 	bl	80004d8 <__aeabi_dmul>
 800906a:	a375      	add	r3, pc, #468	; (adr r3, 8009240 <__ieee754_pow+0x708>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 f87c 	bl	800016c <__adddf3>
 8009074:	4622      	mov	r2, r4
 8009076:	462b      	mov	r3, r5
 8009078:	f7f7 fa2e 	bl	80004d8 <__aeabi_dmul>
 800907c:	a372      	add	r3, pc, #456	; (adr r3, 8009248 <__ieee754_pow+0x710>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f873 	bl	800016c <__adddf3>
 8009086:	4622      	mov	r2, r4
 8009088:	462b      	mov	r3, r5
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	a370      	add	r3, pc, #448	; (adr r3, 8009250 <__ieee754_pow+0x718>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f86a 	bl	800016c <__adddf3>
 8009098:	4622      	mov	r2, r4
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	462b      	mov	r3, r5
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 fa18 	bl	80004d8 <__aeabi_dmul>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fa12 	bl	80004d8 <__aeabi_dmul>
 80090b4:	4604      	mov	r4, r0
 80090b6:	460d      	mov	r5, r1
 80090b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090bc:	4642      	mov	r2, r8
 80090be:	464b      	mov	r3, r9
 80090c0:	f7f7 f854 	bl	800016c <__adddf3>
 80090c4:	4652      	mov	r2, sl
 80090c6:	465b      	mov	r3, fp
 80090c8:	f7f7 fa06 	bl	80004d8 <__aeabi_dmul>
 80090cc:	4622      	mov	r2, r4
 80090ce:	462b      	mov	r3, r5
 80090d0:	f7f7 f84c 	bl	800016c <__adddf3>
 80090d4:	4642      	mov	r2, r8
 80090d6:	4606      	mov	r6, r0
 80090d8:	460f      	mov	r7, r1
 80090da:	464b      	mov	r3, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 f9fa 	bl	80004d8 <__aeabi_dmul>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090ec:	2200      	movs	r2, #0
 80090ee:	4b66      	ldr	r3, [pc, #408]	; (8009288 <__ieee754_pow+0x750>)
 80090f0:	f7f7 f83c 	bl	800016c <__adddf3>
 80090f4:	4632      	mov	r2, r6
 80090f6:	463b      	mov	r3, r7
 80090f8:	f7f7 f838 	bl	800016c <__adddf3>
 80090fc:	2400      	movs	r4, #0
 80090fe:	460d      	mov	r5, r1
 8009100:	4622      	mov	r2, r4
 8009102:	460b      	mov	r3, r1
 8009104:	4640      	mov	r0, r8
 8009106:	4649      	mov	r1, r9
 8009108:	f7f7 f9e6 	bl	80004d8 <__aeabi_dmul>
 800910c:	2200      	movs	r2, #0
 800910e:	4680      	mov	r8, r0
 8009110:	4689      	mov	r9, r1
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	4b5c      	ldr	r3, [pc, #368]	; (8009288 <__ieee754_pow+0x750>)
 8009118:	f7f7 f826 	bl	8000168 <__aeabi_dsub>
 800911c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009120:	f7f7 f822 	bl	8000168 <__aeabi_dsub>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f81c 	bl	8000168 <__aeabi_dsub>
 8009130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009134:	f7f7 f9d0 	bl	80004d8 <__aeabi_dmul>
 8009138:	4622      	mov	r2, r4
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	462b      	mov	r3, r5
 8009140:	4650      	mov	r0, sl
 8009142:	4659      	mov	r1, fp
 8009144:	f7f7 f9c8 	bl	80004d8 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 f80c 	bl	800016c <__adddf3>
 8009154:	2400      	movs	r4, #0
 8009156:	4606      	mov	r6, r0
 8009158:	460f      	mov	r7, r1
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4640      	mov	r0, r8
 8009160:	4649      	mov	r1, r9
 8009162:	f7f7 f803 	bl	800016c <__adddf3>
 8009166:	a33c      	add	r3, pc, #240	; (adr r3, 8009258 <__ieee754_pow+0x720>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	4620      	mov	r0, r4
 800916e:	460d      	mov	r5, r1
 8009170:	f7f7 f9b2 	bl	80004d8 <__aeabi_dmul>
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	f7f6 fff2 	bl	8000168 <__aeabi_dsub>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f6 ffec 	bl	8000168 <__aeabi_dsub>
 8009190:	a333      	add	r3, pc, #204	; (adr r3, 8009260 <__ieee754_pow+0x728>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 f99f 	bl	80004d8 <__aeabi_dmul>
 800919a:	a333      	add	r3, pc, #204	; (adr r3, 8009268 <__ieee754_pow+0x730>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	4620      	mov	r0, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	f7f7 f996 	bl	80004d8 <__aeabi_dmul>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4630      	mov	r0, r6
 80091b2:	4639      	mov	r1, r7
 80091b4:	f7f6 ffda 	bl	800016c <__adddf3>
 80091b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ba:	4b34      	ldr	r3, [pc, #208]	; (800928c <__ieee754_pow+0x754>)
 80091bc:	4413      	add	r3, r2
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f6 ffd3 	bl	800016c <__adddf3>
 80091c6:	4680      	mov	r8, r0
 80091c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80091ca:	4689      	mov	r9, r1
 80091cc:	f7f7 f91a 	bl	8000404 <__aeabi_i2d>
 80091d0:	4604      	mov	r4, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091da:	4b2d      	ldr	r3, [pc, #180]	; (8009290 <__ieee754_pow+0x758>)
 80091dc:	4413      	add	r3, r2
 80091de:	e9d3 6700 	ldrd	r6, r7, [r3]
 80091e2:	4642      	mov	r2, r8
 80091e4:	464b      	mov	r3, r9
 80091e6:	f7f6 ffc1 	bl	800016c <__adddf3>
 80091ea:	4632      	mov	r2, r6
 80091ec:	463b      	mov	r3, r7
 80091ee:	f7f6 ffbd 	bl	800016c <__adddf3>
 80091f2:	4622      	mov	r2, r4
 80091f4:	462b      	mov	r3, r5
 80091f6:	f7f6 ffb9 	bl	800016c <__adddf3>
 80091fa:	2000      	movs	r0, #0
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	4682      	mov	sl, r0
 8009202:	468b      	mov	fp, r1
 8009204:	f7f6 ffb0 	bl	8000168 <__aeabi_dsub>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f6 ffac 	bl	8000168 <__aeabi_dsub>
 8009210:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009214:	f7f6 ffa8 	bl	8000168 <__aeabi_dsub>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	e60b      	b.n	8008e3a <__ieee754_pow+0x302>
 8009222:	2601      	movs	r6, #1
 8009224:	e69f      	b.n	8008f66 <__ieee754_pow+0x42e>
 8009226:	bf00      	nop
 8009228:	4a454eef 	.word	0x4a454eef
 800922c:	3fca7e28 	.word	0x3fca7e28
 8009230:	93c9db65 	.word	0x93c9db65
 8009234:	3fcd864a 	.word	0x3fcd864a
 8009238:	a91d4101 	.word	0xa91d4101
 800923c:	3fd17460 	.word	0x3fd17460
 8009240:	518f264d 	.word	0x518f264d
 8009244:	3fd55555 	.word	0x3fd55555
 8009248:	db6fabff 	.word	0xdb6fabff
 800924c:	3fdb6db6 	.word	0x3fdb6db6
 8009250:	33333303 	.word	0x33333303
 8009254:	3fe33333 	.word	0x3fe33333
 8009258:	e0000000 	.word	0xe0000000
 800925c:	3feec709 	.word	0x3feec709
 8009260:	dc3a03fd 	.word	0xdc3a03fd
 8009264:	3feec709 	.word	0x3feec709
 8009268:	145b01f5 	.word	0x145b01f5
 800926c:	be3e2fe0 	.word	0xbe3e2fe0
 8009270:	7ff00000 	.word	0x7ff00000
 8009274:	43400000 	.word	0x43400000
 8009278:	0003988e 	.word	0x0003988e
 800927c:	000bb679 	.word	0x000bb679
 8009280:	0800a510 	.word	0x0800a510
 8009284:	3ff00000 	.word	0x3ff00000
 8009288:	40080000 	.word	0x40080000
 800928c:	0800a530 	.word	0x0800a530
 8009290:	0800a520 	.word	0x0800a520
 8009294:	a39c      	add	r3, pc, #624	; (adr r3, 8009508 <__ieee754_pow+0x9d0>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f6 ff65 	bl	800016c <__adddf3>
 80092a2:	4622      	mov	r2, r4
 80092a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092a8:	462b      	mov	r3, r5
 80092aa:	4650      	mov	r0, sl
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f6 ff5b 	bl	8000168 <__aeabi_dsub>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ba:	f7f7 fb9d 	bl	80009f8 <__aeabi_dcmpgt>
 80092be:	2800      	cmp	r0, #0
 80092c0:	f47f ae06 	bne.w	8008ed0 <__ieee754_pow+0x398>
 80092c4:	4aa2      	ldr	r2, [pc, #648]	; (8009550 <__ieee754_pow+0xa18>)
 80092c6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80092ca:	4293      	cmp	r3, r2
 80092cc:	f340 8100 	ble.w	80094d0 <__ieee754_pow+0x998>
 80092d0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80092d4:	151b      	asrs	r3, r3, #20
 80092d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80092da:	fa4a fa03 	asr.w	sl, sl, r3
 80092de:	44b2      	add	sl, r6
 80092e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80092e4:	489b      	ldr	r0, [pc, #620]	; (8009554 <__ieee754_pow+0xa1c>)
 80092e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80092ea:	4108      	asrs	r0, r1
 80092ec:	ea00 030a 	and.w	r3, r0, sl
 80092f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80092f4:	f1c1 0114 	rsb	r1, r1, #20
 80092f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80092fc:	fa4a fa01 	asr.w	sl, sl, r1
 8009300:	2e00      	cmp	r6, #0
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	bfb8      	it	lt
 800930c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009310:	f7f6 ff2a 	bl	8000168 <__aeabi_dsub>
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931c:	2400      	movs	r4, #0
 800931e:	4642      	mov	r2, r8
 8009320:	464b      	mov	r3, r9
 8009322:	f7f6 ff23 	bl	800016c <__adddf3>
 8009326:	a37a      	add	r3, pc, #488	; (adr r3, 8009510 <__ieee754_pow+0x9d8>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	4620      	mov	r0, r4
 800932e:	460d      	mov	r5, r1
 8009330:	f7f7 f8d2 	bl	80004d8 <__aeabi_dmul>
 8009334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009338:	4606      	mov	r6, r0
 800933a:	460f      	mov	r7, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7f6 ff12 	bl	8000168 <__aeabi_dsub>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4640      	mov	r0, r8
 800934a:	4649      	mov	r1, r9
 800934c:	f7f6 ff0c 	bl	8000168 <__aeabi_dsub>
 8009350:	a371      	add	r3, pc, #452	; (adr r3, 8009518 <__ieee754_pow+0x9e0>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f7f7 f8bf 	bl	80004d8 <__aeabi_dmul>
 800935a:	a371      	add	r3, pc, #452	; (adr r3, 8009520 <__ieee754_pow+0x9e8>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	4680      	mov	r8, r0
 8009362:	4689      	mov	r9, r1
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 f8b6 	bl	80004d8 <__aeabi_dmul>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	f7f6 fefa 	bl	800016c <__adddf3>
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 fef2 	bl	800016c <__adddf3>
 8009388:	4632      	mov	r2, r6
 800938a:	463b      	mov	r3, r7
 800938c:	4680      	mov	r8, r0
 800938e:	4689      	mov	r9, r1
 8009390:	f7f6 feea 	bl	8000168 <__aeabi_dsub>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f6 fee4 	bl	8000168 <__aeabi_dsub>
 80093a0:	4642      	mov	r2, r8
 80093a2:	4606      	mov	r6, r0
 80093a4:	460f      	mov	r7, r1
 80093a6:	464b      	mov	r3, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 f894 	bl	80004d8 <__aeabi_dmul>
 80093b0:	a35d      	add	r3, pc, #372	; (adr r3, 8009528 <__ieee754_pow+0x9f0>)
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	4604      	mov	r4, r0
 80093b8:	460d      	mov	r5, r1
 80093ba:	f7f7 f88d 	bl	80004d8 <__aeabi_dmul>
 80093be:	a35c      	add	r3, pc, #368	; (adr r3, 8009530 <__ieee754_pow+0x9f8>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f7f6 fed0 	bl	8000168 <__aeabi_dsub>
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	f7f7 f884 	bl	80004d8 <__aeabi_dmul>
 80093d0:	a359      	add	r3, pc, #356	; (adr r3, 8009538 <__ieee754_pow+0xa00>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f6 fec9 	bl	800016c <__adddf3>
 80093da:	4622      	mov	r2, r4
 80093dc:	462b      	mov	r3, r5
 80093de:	f7f7 f87b 	bl	80004d8 <__aeabi_dmul>
 80093e2:	a357      	add	r3, pc, #348	; (adr r3, 8009540 <__ieee754_pow+0xa08>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f7f6 febe 	bl	8000168 <__aeabi_dsub>
 80093ec:	4622      	mov	r2, r4
 80093ee:	462b      	mov	r3, r5
 80093f0:	f7f7 f872 	bl	80004d8 <__aeabi_dmul>
 80093f4:	a354      	add	r3, pc, #336	; (adr r3, 8009548 <__ieee754_pow+0xa10>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7f6 feb7 	bl	800016c <__adddf3>
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	f7f7 f869 	bl	80004d8 <__aeabi_dmul>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	f7f6 feab 	bl	8000168 <__aeabi_dsub>
 8009412:	4604      	mov	r4, r0
 8009414:	460d      	mov	r5, r1
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f7 f85b 	bl	80004d8 <__aeabi_dmul>
 8009422:	2200      	movs	r2, #0
 8009424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800942c:	4620      	mov	r0, r4
 800942e:	4629      	mov	r1, r5
 8009430:	f7f6 fe9a 	bl	8000168 <__aeabi_dsub>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800943c:	f7f7 f976 	bl	800072c <__aeabi_ddiv>
 8009440:	4632      	mov	r2, r6
 8009442:	4604      	mov	r4, r0
 8009444:	460d      	mov	r5, r1
 8009446:	463b      	mov	r3, r7
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	f7f7 f844 	bl	80004d8 <__aeabi_dmul>
 8009450:	4632      	mov	r2, r6
 8009452:	463b      	mov	r3, r7
 8009454:	f7f6 fe8a 	bl	800016c <__adddf3>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4620      	mov	r0, r4
 800945e:	4629      	mov	r1, r5
 8009460:	f7f6 fe82 	bl	8000168 <__aeabi_dsub>
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	f7f6 fe7e 	bl	8000168 <__aeabi_dsub>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	2000      	movs	r0, #0
 8009472:	4939      	ldr	r1, [pc, #228]	; (8009558 <__ieee754_pow+0xa20>)
 8009474:	f7f6 fe78 	bl	8000168 <__aeabi_dsub>
 8009478:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800947c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009480:	da29      	bge.n	80094d6 <__ieee754_pow+0x99e>
 8009482:	4652      	mov	r2, sl
 8009484:	f000 f874 	bl	8009570 <scalbn>
 8009488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800948c:	f7ff bbfd 	b.w	8008c8a <__ieee754_pow+0x152>
 8009490:	4b32      	ldr	r3, [pc, #200]	; (800955c <__ieee754_pow+0xa24>)
 8009492:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009496:	429f      	cmp	r7, r3
 8009498:	f77f af14 	ble.w	80092c4 <__ieee754_pow+0x78c>
 800949c:	4b30      	ldr	r3, [pc, #192]	; (8009560 <__ieee754_pow+0xa28>)
 800949e:	440b      	add	r3, r1
 80094a0:	4303      	orrs	r3, r0
 80094a2:	d009      	beq.n	80094b8 <__ieee754_pow+0x980>
 80094a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a8:	2200      	movs	r2, #0
 80094aa:	2300      	movs	r3, #0
 80094ac:	f7f7 fa86 	bl	80009bc <__aeabi_dcmplt>
 80094b0:	3800      	subs	r0, #0
 80094b2:	bf18      	it	ne
 80094b4:	2001      	movne	r0, #1
 80094b6:	e452      	b.n	8008d5e <__ieee754_pow+0x226>
 80094b8:	4622      	mov	r2, r4
 80094ba:	462b      	mov	r3, r5
 80094bc:	f7f6 fe54 	bl	8000168 <__aeabi_dsub>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f7 fa8e 	bl	80009e4 <__aeabi_dcmpge>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43f aefb 	beq.w	80092c4 <__ieee754_pow+0x78c>
 80094ce:	e7e9      	b.n	80094a4 <__ieee754_pow+0x96c>
 80094d0:	f04f 0a00 	mov.w	sl, #0
 80094d4:	e720      	b.n	8009318 <__ieee754_pow+0x7e0>
 80094d6:	4621      	mov	r1, r4
 80094d8:	e7d6      	b.n	8009488 <__ieee754_pow+0x950>
 80094da:	f04f 0b00 	mov.w	fp, #0
 80094de:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009558 <__ieee754_pow+0xa20>
 80094e2:	f7ff bbb9 	b.w	8008c58 <__ieee754_pow+0x120>
 80094e6:	f04f 0b00 	mov.w	fp, #0
 80094ea:	f04f 0c00 	mov.w	ip, #0
 80094ee:	f7ff bbb3 	b.w	8008c58 <__ieee754_pow+0x120>
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7ff bb3c 	b.w	8008b72 <__ieee754_pow+0x3a>
 80094fa:	9200      	str	r2, [sp, #0]
 80094fc:	f7ff bb88 	b.w	8008c10 <__ieee754_pow+0xd8>
 8009500:	2300      	movs	r3, #0
 8009502:	f7ff bb72 	b.w	8008bea <__ieee754_pow+0xb2>
 8009506:	bf00      	nop
 8009508:	652b82fe 	.word	0x652b82fe
 800950c:	3c971547 	.word	0x3c971547
 8009510:	00000000 	.word	0x00000000
 8009514:	3fe62e43 	.word	0x3fe62e43
 8009518:	fefa39ef 	.word	0xfefa39ef
 800951c:	3fe62e42 	.word	0x3fe62e42
 8009520:	0ca86c39 	.word	0x0ca86c39
 8009524:	be205c61 	.word	0xbe205c61
 8009528:	72bea4d0 	.word	0x72bea4d0
 800952c:	3e663769 	.word	0x3e663769
 8009530:	c5d26bf1 	.word	0xc5d26bf1
 8009534:	3ebbbd41 	.word	0x3ebbbd41
 8009538:	af25de2c 	.word	0xaf25de2c
 800953c:	3f11566a 	.word	0x3f11566a
 8009540:	16bebd93 	.word	0x16bebd93
 8009544:	3f66c16c 	.word	0x3f66c16c
 8009548:	5555553e 	.word	0x5555553e
 800954c:	3fc55555 	.word	0x3fc55555
 8009550:	3fe00000 	.word	0x3fe00000
 8009554:	fff00000 	.word	0xfff00000
 8009558:	3ff00000 	.word	0x3ff00000
 800955c:	4090cbff 	.word	0x4090cbff
 8009560:	3f6f3400 	.word	0x3f6f3400

08009564 <fabs>:
 8009564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009568:	4619      	mov	r1, r3
 800956a:	4770      	bx	lr
 800956c:	0000      	movs	r0, r0
	...

08009570 <scalbn>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4616      	mov	r6, r2
 8009574:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009578:	4604      	mov	r4, r0
 800957a:	460d      	mov	r5, r1
 800957c:	460b      	mov	r3, r1
 800957e:	b992      	cbnz	r2, 80095a6 <scalbn+0x36>
 8009580:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009584:	4303      	orrs	r3, r0
 8009586:	d03c      	beq.n	8009602 <scalbn+0x92>
 8009588:	4b31      	ldr	r3, [pc, #196]	; (8009650 <scalbn+0xe0>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f6 ffa4 	bl	80004d8 <__aeabi_dmul>
 8009590:	4b30      	ldr	r3, [pc, #192]	; (8009654 <scalbn+0xe4>)
 8009592:	4604      	mov	r4, r0
 8009594:	429e      	cmp	r6, r3
 8009596:	460d      	mov	r5, r1
 8009598:	da0f      	bge.n	80095ba <scalbn+0x4a>
 800959a:	a329      	add	r3, pc, #164	; (adr r3, 8009640 <scalbn+0xd0>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f6 ff9a 	bl	80004d8 <__aeabi_dmul>
 80095a4:	e006      	b.n	80095b4 <scalbn+0x44>
 80095a6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80095aa:	42ba      	cmp	r2, r7
 80095ac:	d109      	bne.n	80095c2 <scalbn+0x52>
 80095ae:	4602      	mov	r2, r0
 80095b0:	f7f6 fddc 	bl	800016c <__adddf3>
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	e023      	b.n	8009602 <scalbn+0x92>
 80095ba:	460b      	mov	r3, r1
 80095bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095c0:	3a36      	subs	r2, #54	; 0x36
 80095c2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80095c6:	428e      	cmp	r6, r1
 80095c8:	dd0e      	ble.n	80095e8 <scalbn+0x78>
 80095ca:	a31f      	add	r3, pc, #124	; (adr r3, 8009648 <scalbn+0xd8>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80095d4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80095d8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80095dc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80095e0:	481d      	ldr	r0, [pc, #116]	; (8009658 <scalbn+0xe8>)
 80095e2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80095e6:	e7db      	b.n	80095a0 <scalbn+0x30>
 80095e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80095ec:	4432      	add	r2, r6
 80095ee:	428a      	cmp	r2, r1
 80095f0:	dceb      	bgt.n	80095ca <scalbn+0x5a>
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	dd08      	ble.n	8009608 <scalbn+0x98>
 80095f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009608:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800960c:	da0c      	bge.n	8009628 <scalbn+0xb8>
 800960e:	a30c      	add	r3, pc, #48	; (adr r3, 8009640 <scalbn+0xd0>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009618:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800961c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009620:	480e      	ldr	r0, [pc, #56]	; (800965c <scalbn+0xec>)
 8009622:	f041 011f 	orr.w	r1, r1, #31
 8009626:	e7bb      	b.n	80095a0 <scalbn+0x30>
 8009628:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800962c:	3236      	adds	r2, #54	; 0x36
 800962e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009632:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	2200      	movs	r2, #0
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <scalbn+0xf0>)
 800963e:	e7af      	b.n	80095a0 <scalbn+0x30>
 8009640:	c2f8f359 	.word	0xc2f8f359
 8009644:	01a56e1f 	.word	0x01a56e1f
 8009648:	8800759c 	.word	0x8800759c
 800964c:	7e37e43c 	.word	0x7e37e43c
 8009650:	43500000 	.word	0x43500000
 8009654:	ffff3cb0 	.word	0xffff3cb0
 8009658:	8800759c 	.word	0x8800759c
 800965c:	c2f8f359 	.word	0xc2f8f359
 8009660:	3c900000 	.word	0x3c900000

08009664 <with_errno>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	460d      	mov	r5, r1
 800966a:	4616      	mov	r6, r2
 800966c:	f7fd fa1e 	bl	8006aac <__errno>
 8009670:	4629      	mov	r1, r5
 8009672:	6006      	str	r6, [r0, #0]
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}

08009678 <xflow>:
 8009678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967a:	4615      	mov	r5, r2
 800967c:	461c      	mov	r4, r3
 800967e:	b180      	cbz	r0, 80096a2 <xflow+0x2a>
 8009680:	4610      	mov	r0, r2
 8009682:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009686:	e9cd 0100 	strd	r0, r1, [sp]
 800968a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800968e:	4628      	mov	r0, r5
 8009690:	4621      	mov	r1, r4
 8009692:	f7f6 ff21 	bl	80004d8 <__aeabi_dmul>
 8009696:	2222      	movs	r2, #34	; 0x22
 8009698:	b003      	add	sp, #12
 800969a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800969e:	f7ff bfe1 	b.w	8009664 <with_errno>
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	e7ee      	b.n	8009686 <xflow+0xe>

080096a8 <__math_uflow>:
 80096a8:	2200      	movs	r2, #0
 80096aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096ae:	f7ff bfe3 	b.w	8009678 <xflow>

080096b2 <__math_oflow>:
 80096b2:	2200      	movs	r2, #0
 80096b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80096b8:	f7ff bfde 	b.w	8009678 <xflow>

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
